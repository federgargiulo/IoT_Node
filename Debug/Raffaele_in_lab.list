
Raffaele_in_lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e084  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013fc  0800e214  0800e214  0001e214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f610  0800f610  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f610  0800f610  0001f610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f618  0800f618  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f618  0800f618  0001f618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f61c  0800f61c  0001f61c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800f620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000119c  2000007c  0800f69c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001218  0800f69c  00021218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036f9f  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ec5  00000000  00000000  0005704b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e08  00000000  00000000  0005bf10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002c30  00000000  00000000  0005ed18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c581  00000000  00000000  00061948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d4fa  00000000  00000000  0008dec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010abbf  00000000  00000000  000bb3c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c5f82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d524  00000000  00000000  001c5fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e1fc 	.word	0x0800e1fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800e1fc 	.word	0x0800e1fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <sendPacket>:
/*-----------------------------------------------------------*/

static int32_t sendPacket( MQTTContext_t * pContext,
                           const uint8_t * pBufferToSend,
                           size_t bytesToSend )
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08c      	sub	sp, #48	; 0x30
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
    const uint8_t * pIndex = pBufferToSend;
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t bytesRemaining = bytesToSend;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t totalBytesSent = 0, bytesSent;
 8000598:	2300      	movs	r3, #0
 800059a:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t lastSendTimeMs = 0U, timeSinceLastSendMs = 0U;
 800059c:	2300      	movs	r3, #0
 800059e:	623b      	str	r3, [r7, #32]
 80005a0:	2300      	movs	r3, #0
 80005a2:	61bb      	str	r3, [r7, #24]
    bool sendError = false;
 80005a4:	2300      	movs	r3, #0
 80005a6:	77fb      	strb	r3, [r7, #31]

    assert( pContext != NULL );
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d106      	bne.n	80005bc <sendPacket+0x38>
 80005ae:	4b3f      	ldr	r3, [pc, #252]	; (80006ac <sendPacket+0x128>)
 80005b0:	4a3f      	ldr	r2, [pc, #252]	; (80006b0 <sendPacket+0x12c>)
 80005b2:	f240 215e 	movw	r1, #606	; 0x25e
 80005b6:	483f      	ldr	r0, [pc, #252]	; (80006b4 <sendPacket+0x130>)
 80005b8:	f00c fb06 	bl	800cbc8 <__assert_func>
    assert( pContext->getTime != NULL );
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d106      	bne.n	80005d2 <sendPacket+0x4e>
 80005c4:	4b3c      	ldr	r3, [pc, #240]	; (80006b8 <sendPacket+0x134>)
 80005c6:	4a3a      	ldr	r2, [pc, #232]	; (80006b0 <sendPacket+0x12c>)
 80005c8:	f240 215f 	movw	r1, #607	; 0x25f
 80005cc:	4839      	ldr	r0, [pc, #228]	; (80006b4 <sendPacket+0x130>)
 80005ce:	f00c fafb 	bl	800cbc8 <__assert_func>
    assert( pContext->transportInterface.send != NULL );
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d106      	bne.n	80005e8 <sendPacket+0x64>
 80005da:	4b38      	ldr	r3, [pc, #224]	; (80006bc <sendPacket+0x138>)
 80005dc:	4a34      	ldr	r2, [pc, #208]	; (80006b0 <sendPacket+0x12c>)
 80005de:	f44f 7118 	mov.w	r1, #608	; 0x260
 80005e2:	4834      	ldr	r0, [pc, #208]	; (80006b4 <sendPacket+0x130>)
 80005e4:	f00c faf0 	bl	800cbc8 <__assert_func>
    assert( pIndex != NULL );
 80005e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d106      	bne.n	80005fc <sendPacket+0x78>
 80005ee:	4b34      	ldr	r3, [pc, #208]	; (80006c0 <sendPacket+0x13c>)
 80005f0:	4a2f      	ldr	r2, [pc, #188]	; (80006b0 <sendPacket+0x12c>)
 80005f2:	f240 2161 	movw	r1, #609	; 0x261
 80005f6:	482f      	ldr	r0, [pc, #188]	; (80006b4 <sendPacket+0x130>)
 80005f8:	f00c fae6 	bl	800cbc8 <__assert_func>

    bytesRemaining = bytesToSend;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Record the most recent time of successful transmission. */
    lastSendTimeMs = pContext->getTime();
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000604:	4798      	blx	r3
 8000606:	6238      	str	r0, [r7, #32]

    /* Loop until the entire packet is sent. */
    while( ( bytesRemaining > 0UL ) && ( sendError == false ) )
 8000608:	e03c      	b.n	8000684 <sendPacket+0x100>
    {
        bytesSent = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800060e:	68fa      	ldr	r2, [r7, #12]
 8000610:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8000612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000614:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000616:	4798      	blx	r3
 8000618:	6178      	str	r0, [r7, #20]
                                                       pIndex,
                                                       bytesRemaining );

        if( bytesSent < 0 )
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	2b00      	cmp	r3, #0
 800061e:	da04      	bge.n	800062a <sendPacket+0xa6>
        {
            LogError( ( "Transport send failed. Error code=%ld.", ( long int ) bytesSent ) );
            totalBytesSent = bytesSent;
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	627b      	str	r3, [r7, #36]	; 0x24
            sendError = true;
 8000624:	2301      	movs	r3, #1
 8000626:	77fb      	strb	r3, [r7, #31]
 8000628:	e02c      	b.n	8000684 <sendPacket+0x100>
        }
        else if( bytesSent > 0 )
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	2b00      	cmp	r3, #0
 800062e:	dd1b      	ble.n	8000668 <sendPacket+0xe4>
        {
            /* Record the most recent time of successful transmission. */
            lastSendTimeMs = pContext->getTime();
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000634:	4798      	blx	r3
 8000636:	6238      	str	r0, [r7, #32]

            /* It is a bug in the application's transport send implementation if
             * more bytes than expected are sent. To avoid a possible overflow
             * in converting bytesRemaining from unsigned to signed, this assert
             * must exist after the check for bytesSent being negative. */
            assert( ( size_t ) bytesSent <= bytesRemaining );
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800063c:	429a      	cmp	r2, r3
 800063e:	d206      	bcs.n	800064e <sendPacket+0xca>
 8000640:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <sendPacket+0x140>)
 8000642:	4a1b      	ldr	r2, [pc, #108]	; (80006b0 <sendPacket+0x12c>)
 8000644:	f240 217e 	movw	r1, #638	; 0x27e
 8000648:	481a      	ldr	r0, [pc, #104]	; (80006b4 <sendPacket+0x130>)
 800064a:	f00c fabd 	bl	800cbc8 <__assert_func>

            bytesRemaining -= ( size_t ) bytesSent;
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000652:	1ad3      	subs	r3, r2, r3
 8000654:	62bb      	str	r3, [r7, #40]	; 0x28
            totalBytesSent += bytesSent;
 8000656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	4413      	add	r3, r2
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
            pIndex += bytesSent;
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000662:	4413      	add	r3, r2
 8000664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000666:	e00d      	b.n	8000684 <sendPacket+0x100>
                        ( unsigned long ) bytesRemaining ) );
        }
        else
        {
            /* No bytes were sent over the network. */
            timeSinceLastSendMs = calculateElapsedTime( pContext->getTime(), lastSendTimeMs );
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800066c:	4798      	blx	r3
 800066e:	4603      	mov	r3, r0
 8000670:	6a39      	ldr	r1, [r7, #32]
 8000672:	4618      	mov	r0, r3
 8000674:	f000 f828 	bl	80006c8 <calculateElapsedTime>
 8000678:	61b8      	str	r0, [r7, #24]

            /* Check for timeout if we have been waiting to send any data over the network. */
            if( timeSinceLastSendMs >= MQTT_SEND_RETRY_TIMEOUT_MS )
 800067a:	69bb      	ldr	r3, [r7, #24]
 800067c:	2b09      	cmp	r3, #9
 800067e:	d901      	bls.n	8000684 <sendPacket+0x100>
            {
                LogError( ( "Unable to send packet: Timed out in transport send." ) );
                sendError = true;
 8000680:	2301      	movs	r3, #1
 8000682:	77fb      	strb	r3, [r7, #31]
    while( ( bytesRemaining > 0UL ) && ( sendError == false ) )
 8000684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000686:	2b00      	cmp	r3, #0
 8000688:	d005      	beq.n	8000696 <sendPacket+0x112>
 800068a:	7ffb      	ldrb	r3, [r7, #31]
 800068c:	f083 0301 	eor.w	r3, r3, #1
 8000690:	b2db      	uxtb	r3, r3
 8000692:	2b00      	cmp	r3, #0
 8000694:	d1b9      	bne.n	800060a <sendPacket+0x86>
            }
        }
    }

    /* Update time of last transmission if the entire packet is successfully sent. */
    if( totalBytesSent > 0 )
 8000696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000698:	2b00      	cmp	r3, #0
 800069a:	dd02      	ble.n	80006a2 <sendPacket+0x11e>
    {
        pContext->lastPacketTime = lastSendTimeMs;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	6a3a      	ldr	r2, [r7, #32]
 80006a0:	671a      	str	r2, [r3, #112]	; 0x70
        LogDebug( ( "Successfully sent packet at time %lu.",
                    ( unsigned long ) lastSendTimeMs ) );
    }

    return totalBytesSent;
 80006a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3730      	adds	r7, #48	; 0x30
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	0800e2c4 	.word	0x0800e2c4
 80006b0:	0800f1ec 	.word	0x0800f1ec
 80006b4:	0800e22c 	.word	0x0800e22c
 80006b8:	0800e2d8 	.word	0x0800e2d8
 80006bc:	0800e2f4 	.word	0x0800e2f4
 80006c0:	0800e320 	.word	0x0800e320
 80006c4:	0800e330 	.word	0x0800e330

080006c8 <calculateElapsedTime>:

/*-----------------------------------------------------------*/

static uint32_t calculateElapsedTime( uint32_t later,
                                      uint32_t start )
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
    return later - start;
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	1ad3      	subs	r3, r2, r3
}
 80006d8:	4618      	mov	r0, r3
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <getAckFromPacketType>:

/*-----------------------------------------------------------*/

static MQTTPubAckType_t getAckFromPacketType( uint8_t packetType )
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
    MQTTPubAckType_t ackType = MQTTPuback;
 80006ee:	2300      	movs	r3, #0
 80006f0:	73fb      	strb	r3, [r7, #15]

    switch( packetType )
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b62      	cmp	r3, #98	; 0x62
 80006f6:	d00c      	beq.n	8000712 <getAckFromPacketType+0x2e>
 80006f8:	2b62      	cmp	r3, #98	; 0x62
 80006fa:	dc0d      	bgt.n	8000718 <getAckFromPacketType+0x34>
 80006fc:	2b40      	cmp	r3, #64	; 0x40
 80006fe:	d002      	beq.n	8000706 <getAckFromPacketType+0x22>
 8000700:	2b50      	cmp	r3, #80	; 0x50
 8000702:	d003      	beq.n	800070c <getAckFromPacketType+0x28>
 8000704:	e008      	b.n	8000718 <getAckFromPacketType+0x34>
    {
        case MQTT_PACKET_TYPE_PUBACK:
            ackType = MQTTPuback;
 8000706:	2300      	movs	r3, #0
 8000708:	73fb      	strb	r3, [r7, #15]
            break;
 800070a:	e012      	b.n	8000732 <getAckFromPacketType+0x4e>

        case MQTT_PACKET_TYPE_PUBREC:
            ackType = MQTTPubrec;
 800070c:	2301      	movs	r3, #1
 800070e:	73fb      	strb	r3, [r7, #15]
            break;
 8000710:	e00f      	b.n	8000732 <getAckFromPacketType+0x4e>

        case MQTT_PACKET_TYPE_PUBREL:
            ackType = MQTTPubrel;
 8000712:	2302      	movs	r3, #2
 8000714:	73fb      	strb	r3, [r7, #15]
            break;
 8000716:	e00c      	b.n	8000732 <getAckFromPacketType+0x4e>
        case MQTT_PACKET_TYPE_PUBCOMP:
        default:

            /* This function is only called after checking the type is one of
             * the above four values, so packet type must be PUBCOMP here. */
            assert( packetType == MQTT_PACKET_TYPE_PUBCOMP );
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	2b70      	cmp	r3, #112	; 0x70
 800071c:	d006      	beq.n	800072c <getAckFromPacketType+0x48>
 800071e:	4b07      	ldr	r3, [pc, #28]	; (800073c <getAckFromPacketType+0x58>)
 8000720:	4a07      	ldr	r2, [pc, #28]	; (8000740 <getAckFromPacketType+0x5c>)
 8000722:	f240 21c1 	movw	r1, #705	; 0x2c1
 8000726:	4807      	ldr	r0, [pc, #28]	; (8000744 <getAckFromPacketType+0x60>)
 8000728:	f00c fa4e 	bl	800cbc8 <__assert_func>
            ackType = MQTTPubcomp;
 800072c:	2303      	movs	r3, #3
 800072e:	73fb      	strb	r3, [r7, #15]
            break;
 8000730:	bf00      	nop
    }

    return ackType;
 8000732:	7bfb      	ldrb	r3, [r7, #15]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	0800e358 	.word	0x0800e358
 8000740:	0800f1f8 	.word	0x0800f1f8
 8000744:	0800e22c 	.word	0x0800e22c

08000748 <recvExact>:

/*-----------------------------------------------------------*/

static int32_t recvExact( const MQTTContext_t * pContext,
                          size_t bytesToRecv )
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08c      	sub	sp, #48	; 0x30
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
    uint8_t * pIndex = NULL;
 8000752:	2300      	movs	r3, #0
 8000754:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t bytesRemaining = bytesToRecv;
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t totalBytesRecvd = 0, bytesRecvd;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t lastDataRecvTimeMs = 0U, timeSinceLastRecvMs = 0U;
 800075e:	2300      	movs	r3, #0
 8000760:	623b      	str	r3, [r7, #32]
 8000762:	2300      	movs	r3, #0
 8000764:	61bb      	str	r3, [r7, #24]
    TransportRecv_t recvFunc = NULL;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
    MQTTGetCurrentTimeFunc_t getTimeStampMs = NULL;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
    bool receiveError = false;
 800076e:	2300      	movs	r3, #0
 8000770:	77fb      	strb	r3, [r7, #31]

    assert( pContext != NULL );
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d106      	bne.n	8000786 <recvExact+0x3e>
 8000778:	4b44      	ldr	r3, [pc, #272]	; (800088c <recvExact+0x144>)
 800077a:	4a45      	ldr	r2, [pc, #276]	; (8000890 <recvExact+0x148>)
 800077c:	f240 21d6 	movw	r1, #726	; 0x2d6
 8000780:	4844      	ldr	r0, [pc, #272]	; (8000894 <recvExact+0x14c>)
 8000782:	f00c fa21 	bl	800cbc8 <__assert_func>
    assert( bytesToRecv <= pContext->networkBuffer.size );
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800078a:	683a      	ldr	r2, [r7, #0]
 800078c:	429a      	cmp	r2, r3
 800078e:	d906      	bls.n	800079e <recvExact+0x56>
 8000790:	4b41      	ldr	r3, [pc, #260]	; (8000898 <recvExact+0x150>)
 8000792:	4a3f      	ldr	r2, [pc, #252]	; (8000890 <recvExact+0x148>)
 8000794:	f240 21d7 	movw	r1, #727	; 0x2d7
 8000798:	483e      	ldr	r0, [pc, #248]	; (8000894 <recvExact+0x14c>)
 800079a:	f00c fa15 	bl	800cbc8 <__assert_func>
    assert( pContext->getTime != NULL );
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d106      	bne.n	80007b4 <recvExact+0x6c>
 80007a6:	4b3d      	ldr	r3, [pc, #244]	; (800089c <recvExact+0x154>)
 80007a8:	4a39      	ldr	r2, [pc, #228]	; (8000890 <recvExact+0x148>)
 80007aa:	f44f 7136 	mov.w	r1, #728	; 0x2d8
 80007ae:	4839      	ldr	r0, [pc, #228]	; (8000894 <recvExact+0x14c>)
 80007b0:	f00c fa0a 	bl	800cbc8 <__assert_func>
    assert( pContext->transportInterface.recv != NULL );
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d106      	bne.n	80007ca <recvExact+0x82>
 80007bc:	4b38      	ldr	r3, [pc, #224]	; (80008a0 <recvExact+0x158>)
 80007be:	4a34      	ldr	r2, [pc, #208]	; (8000890 <recvExact+0x148>)
 80007c0:	f240 21d9 	movw	r1, #729	; 0x2d9
 80007c4:	4833      	ldr	r0, [pc, #204]	; (8000894 <recvExact+0x14c>)
 80007c6:	f00c f9ff 	bl	800cbc8 <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d106      	bne.n	80007e0 <recvExact+0x98>
 80007d2:	4b34      	ldr	r3, [pc, #208]	; (80008a4 <recvExact+0x15c>)
 80007d4:	4a2e      	ldr	r2, [pc, #184]	; (8000890 <recvExact+0x148>)
 80007d6:	f240 21da 	movw	r1, #730	; 0x2da
 80007da:	482e      	ldr	r0, [pc, #184]	; (8000894 <recvExact+0x14c>)
 80007dc:	f00c f9f4 	bl	800cbc8 <__assert_func>

    pIndex = pContext->networkBuffer.pBuffer;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    recvFunc = pContext->transportInterface.recv;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80007ea:	617b      	str	r3, [r7, #20]
    getTimeStampMs = pContext->getTime;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80007f0:	613b      	str	r3, [r7, #16]

    /* Part of the MQTT packet has been read before calling this function. */
    lastDataRecvTimeMs = getTimeStampMs();
 80007f2:	693b      	ldr	r3, [r7, #16]
 80007f4:	4798      	blx	r3
 80007f6:	6238      	str	r0, [r7, #32]

    while( ( bytesRemaining > 0U ) && ( receiveError == false ) )
 80007f8:	e039      	b.n	800086e <recvExact+0x126>
    {
        bytesRecvd = recvFunc( pContext->transportInterface.pNetworkContext,
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000802:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000804:	4798      	blx	r3
 8000806:	60f8      	str	r0, [r7, #12]
                               pIndex,
                               bytesRemaining );

        if( bytesRecvd < 0 )
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	2b00      	cmp	r3, #0
 800080c:	da04      	bge.n	8000818 <recvExact+0xd0>
        {
            LogError( ( "Network error while receiving packet: ReturnCode=%ld.",
                        ( long int ) bytesRecvd ) );
            totalBytesRecvd = bytesRecvd;
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
            receiveError = true;
 8000812:	2301      	movs	r3, #1
 8000814:	77fb      	strb	r3, [r7, #31]
 8000816:	e02a      	b.n	800086e <recvExact+0x126>
        }
        else if( bytesRecvd > 0 )
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	2b00      	cmp	r3, #0
 800081c:	dd1a      	ble.n	8000854 <recvExact+0x10c>
        {
            /* Reset the starting time as we have received some data from the network. */
            lastDataRecvTimeMs = getTimeStampMs();
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	4798      	blx	r3
 8000822:	6238      	str	r0, [r7, #32]
            /* It is a bug in the application's transport receive implementation
             * if more bytes than expected are received. To avoid a possible
             * overflow in converting bytesRemaining from unsigned to signed,
             * this assert must exist after the check for bytesRecvd being
             * negative. */
            assert( ( size_t ) bytesRecvd <= bytesRemaining );
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000828:	429a      	cmp	r2, r3
 800082a:	d206      	bcs.n	800083a <recvExact+0xf2>
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <recvExact+0x160>)
 800082e:	4a18      	ldr	r2, [pc, #96]	; (8000890 <recvExact+0x148>)
 8000830:	f240 21fa 	movw	r1, #762	; 0x2fa
 8000834:	4817      	ldr	r0, [pc, #92]	; (8000894 <recvExact+0x14c>)
 8000836:	f00c f9c7 	bl	800cbc8 <__assert_func>

            bytesRemaining -= ( size_t ) bytesRecvd;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
            totalBytesRecvd += ( int32_t ) bytesRecvd;
 8000842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	4413      	add	r3, r2
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
            pIndex += bytesRecvd;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800084e:	4413      	add	r3, r2
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000852:	e00c      	b.n	800086e <recvExact+0x126>
                        ( long int ) totalBytesRecvd ) );
        }
        else
        {
            /* No bytes were read from the network. */
            timeSinceLastRecvMs = calculateElapsedTime( getTimeStampMs(), lastDataRecvTimeMs );
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	4798      	blx	r3
 8000858:	4603      	mov	r3, r0
 800085a:	6a39      	ldr	r1, [r7, #32]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ff33 	bl	80006c8 <calculateElapsedTime>
 8000862:	61b8      	str	r0, [r7, #24]

            /* Check for timeout if we have been waiting to receive any byte on the network. */
            if( timeSinceLastRecvMs >= MQTT_RECV_POLLING_TIMEOUT_MS )
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <recvExact+0x126>
            {
                LogError( ( "Unable to receive packet: Timed out in transport recv." ) );
                receiveError = true;
 800086a:	2301      	movs	r3, #1
 800086c:	77fb      	strb	r3, [r7, #31]
    while( ( bytesRemaining > 0U ) && ( receiveError == false ) )
 800086e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000870:	2b00      	cmp	r3, #0
 8000872:	d005      	beq.n	8000880 <recvExact+0x138>
 8000874:	7ffb      	ldrb	r3, [r7, #31]
 8000876:	f083 0301 	eor.w	r3, r3, #1
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	d1bc      	bne.n	80007fa <recvExact+0xb2>
            }
        }
    }

    return totalBytesRecvd;
 8000880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000882:	4618      	mov	r0, r3
 8000884:	3730      	adds	r7, #48	; 0x30
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	0800e2c4 	.word	0x0800e2c4
 8000890:	0800f210 	.word	0x0800f210
 8000894:	0800e22c 	.word	0x0800e22c
 8000898:	0800e380 	.word	0x0800e380
 800089c:	0800e2d8 	.word	0x0800e2d8
 80008a0:	0800e3ac 	.word	0x0800e3ac
 80008a4:	0800e3d8 	.word	0x0800e3d8
 80008a8:	0800e400 	.word	0x0800e400

080008ac <discardPacket>:
/*-----------------------------------------------------------*/

static MQTTStatus_t discardPacket( const MQTTContext_t * pContext,
                                   size_t remainingLength,
                                   uint32_t timeoutMs )
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08c      	sub	sp, #48	; 0x30
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTRecvFailed;
 80008b8:	2304      	movs	r3, #4
 80008ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int32_t bytesReceived = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
    size_t bytesToReceive = 0U;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t totalBytesReceived = 0U, entryTimeMs = 0U, elapsedTimeMs = 0U;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
 80008ca:	2300      	movs	r3, #0
 80008cc:	61bb      	str	r3, [r7, #24]
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
    MQTTGetCurrentTimeFunc_t getTimeStampMs = NULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
    bool receiveError = false;
 80008d6:	2300      	movs	r3, #0
 80008d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    assert( pContext != NULL );
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d106      	bne.n	80008f0 <discardPacket+0x44>
 80008e2:	4b2f      	ldr	r3, [pc, #188]	; (80009a0 <discardPacket+0xf4>)
 80008e4:	4a2f      	ldr	r2, [pc, #188]	; (80009a4 <discardPacket+0xf8>)
 80008e6:	f240 3122 	movw	r1, #802	; 0x322
 80008ea:	482f      	ldr	r0, [pc, #188]	; (80009a8 <discardPacket+0xfc>)
 80008ec:	f00c f96c 	bl	800cbc8 <__assert_func>
    assert( pContext->getTime != NULL );
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d106      	bne.n	8000906 <discardPacket+0x5a>
 80008f8:	4b2c      	ldr	r3, [pc, #176]	; (80009ac <discardPacket+0x100>)
 80008fa:	4a2a      	ldr	r2, [pc, #168]	; (80009a4 <discardPacket+0xf8>)
 80008fc:	f240 3123 	movw	r1, #803	; 0x323
 8000900:	4829      	ldr	r0, [pc, #164]	; (80009a8 <discardPacket+0xfc>)
 8000902:	f00c f961 	bl	800cbc8 <__assert_func>

    bytesToReceive = pContext->networkBuffer.size;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
    getTimeStampMs = pContext->getTime;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000910:	613b      	str	r3, [r7, #16]

    entryTimeMs = getTimeStampMs();
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	4798      	blx	r3
 8000916:	61b8      	str	r0, [r7, #24]

    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 8000918:	e029      	b.n	800096e <discardPacket+0xc2>
    {
        if( ( remainingLength - totalBytesReceived ) < bytesToReceive )
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091e:	1ad3      	subs	r3, r2, r3
 8000920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000922:	429a      	cmp	r2, r3
 8000924:	d903      	bls.n	800092e <discardPacket+0x82>
        {
            bytesToReceive = remainingLength - totalBytesReceived;
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        bytesReceived = recvExact( pContext, bytesToReceive );
 800092e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000930:	68f8      	ldr	r0, [r7, #12]
 8000932:	f7ff ff09 	bl	8000748 <recvExact>
 8000936:	61f8      	str	r0, [r7, #28]

        if( bytesReceived != ( int32_t ) bytesToReceive )
 8000938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800093a:	69fa      	ldr	r2, [r7, #28]
 800093c:	429a      	cmp	r2, r3
 800093e:	d003      	beq.n	8000948 <discardPacket+0x9c>
        {
            LogError( ( "Receive error while discarding packet."
                        "ReceivedBytes=%ld, ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            receiveError = true;
 8000940:	2301      	movs	r3, #1
 8000942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000946:	e012      	b.n	800096e <discardPacket+0xc2>
        }
        else
        {
            totalBytesReceived += ( uint32_t ) bytesReceived;
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800094c:	4413      	add	r3, r2
 800094e:	627b      	str	r3, [r7, #36]	; 0x24

            elapsedTimeMs = calculateElapsedTime( getTimeStampMs(), entryTimeMs );
 8000950:	693b      	ldr	r3, [r7, #16]
 8000952:	4798      	blx	r3
 8000954:	4603      	mov	r3, r0
 8000956:	69b9      	ldr	r1, [r7, #24]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff feb5 	bl	80006c8 <calculateElapsedTime>
 800095e:	6178      	str	r0, [r7, #20]

            /* Check for timeout. */
            if( elapsedTimeMs >= timeoutMs )
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	429a      	cmp	r2, r3
 8000966:	d302      	bcc.n	800096e <discardPacket+0xc2>
            {
                LogError( ( "Time expired while discarding packet." ) );
                receiveError = true;
 8000968:	2301      	movs	r3, #1
 800096a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800096e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	429a      	cmp	r2, r3
 8000974:	d206      	bcs.n	8000984 <discardPacket+0xd8>
 8000976:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800097a:	f083 0301 	eor.w	r3, r3, #1
 800097e:	b2db      	uxtb	r3, r3
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1ca      	bne.n	800091a <discardPacket+0x6e>
            }
        }
    }

    if( totalBytesReceived == remainingLength )
 8000984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	429a      	cmp	r2, r3
 800098a:	d102      	bne.n	8000992 <discardPacket+0xe6>
    {
        LogError( ( "Dumped packet. DumpedBytes=%lu.",
                    ( unsigned long ) totalBytesReceived ) );
        /* Packet dumped, so no data is available. */
        status = MQTTNoDataAvailable;
 800098c:	2307      	movs	r3, #7
 800098e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 8000992:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000996:	4618      	mov	r0, r3
 8000998:	3730      	adds	r7, #48	; 0x30
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	0800e2c4 	.word	0x0800e2c4
 80009a4:	0800f21c 	.word	0x0800f21c
 80009a8:	0800e22c 	.word	0x0800e22c
 80009ac:	0800e2d8 	.word	0x0800e2d8

080009b0 <receivePacket>:
/*-----------------------------------------------------------*/

static MQTTStatus_t receivePacket( const MQTTContext_t * pContext,
                                   MQTTPacketInfo_t incomingPacket,
                                   uint32_t remainingTimeMs )
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	4638      	mov	r0, r7
 80009ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    MQTTStatus_t status = MQTTSuccess;
 80009be:	2300      	movs	r3, #0
 80009c0:	77fb      	strb	r3, [r7, #31]
    int32_t bytesReceived = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
    size_t bytesToReceive = 0U;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]

    assert( pContext != NULL );
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d106      	bne.n	80009de <receivePacket+0x2e>
 80009d0:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <receivePacket+0x84>)
 80009d2:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <receivePacket+0x88>)
 80009d4:	f240 315f 	movw	r1, #863	; 0x35f
 80009d8:	4818      	ldr	r0, [pc, #96]	; (8000a3c <receivePacket+0x8c>)
 80009da:	f00c f8f5 	bl	800cbc8 <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d106      	bne.n	80009f4 <receivePacket+0x44>
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <receivePacket+0x90>)
 80009e8:	4a13      	ldr	r2, [pc, #76]	; (8000a38 <receivePacket+0x88>)
 80009ea:	f44f 7158 	mov.w	r1, #864	; 0x360
 80009ee:	4813      	ldr	r0, [pc, #76]	; (8000a3c <receivePacket+0x8c>)
 80009f0:	f00c f8ea 	bl	800cbc8 <__assert_func>

    if( incomingPacket.remainingLength > pContext->networkBuffer.size )
 80009f4:	68ba      	ldr	r2, [r7, #8]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d908      	bls.n	8000a10 <receivePacket+0x60>
        LogError( ( "Incoming packet will be dumped: "
                    "Packet length exceeds network buffer size."
                    "PacketSize=%lu, NetworkBufferSize=%lu.",
                    ( unsigned long ) incomingPacket.remainingLength,
                    ( unsigned long ) pContext->networkBuffer.size ) );
        status = discardPacket( pContext,
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a02:	4619      	mov	r1, r3
 8000a04:	68f8      	ldr	r0, [r7, #12]
 8000a06:	f7ff ff51 	bl	80008ac <discardPacket>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	77fb      	strb	r3, [r7, #31]
 8000a0e:	e00c      	b.n	8000a2a <receivePacket+0x7a>
                                incomingPacket.remainingLength,
                                remainingTimeMs );
    }
    else
    {
        bytesToReceive = incomingPacket.remainingLength;
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	617b      	str	r3, [r7, #20]
        bytesReceived = recvExact( pContext, bytesToReceive );
 8000a14:	6979      	ldr	r1, [r7, #20]
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f7ff fe96 	bl	8000748 <recvExact>
 8000a1c:	61b8      	str	r0, [r7, #24]

        if( bytesReceived == ( int32_t ) bytesToReceive )
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	69ba      	ldr	r2, [r7, #24]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d001      	beq.n	8000a2a <receivePacket+0x7a>
        {
            LogError( ( "Packet reception failed. ReceivedBytes=%ld, "
                        "ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            status = MQTTRecvFailed;
 8000a26:	2304      	movs	r3, #4
 8000a28:	77fb      	strb	r3, [r7, #31]
        }
    }

    return status;
 8000a2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3720      	adds	r7, #32
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	0800e2c4 	.word	0x0800e2c4
 8000a38:	0800f22c 	.word	0x0800f22c
 8000a3c:	0800e22c 	.word	0x0800e22c
 8000a40:	0800e3d8 	.word	0x0800e3d8

08000a44 <getAckTypeToSend>:

/*-----------------------------------------------------------*/

static uint8_t getAckTypeToSend( MQTTPublishState_t state )
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
    uint8_t packetTypeByte = 0U;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	73fb      	strb	r3, [r7, #15]

    switch( state )
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	3b02      	subs	r3, #2
 8000a56:	2b03      	cmp	r3, #3
 8000a58:	d816      	bhi.n	8000a88 <getAckTypeToSend+0x44>
 8000a5a:	a201      	add	r2, pc, #4	; (adr r2, 8000a60 <getAckTypeToSend+0x1c>)
 8000a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a60:	08000a71 	.word	0x08000a71
 8000a64:	08000a77 	.word	0x08000a77
 8000a68:	08000a7d 	.word	0x08000a7d
 8000a6c:	08000a83 	.word	0x08000a83
    {
        case MQTTPubAckSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBACK;
 8000a70:	2340      	movs	r3, #64	; 0x40
 8000a72:	73fb      	strb	r3, [r7, #15]
            break;
 8000a74:	e009      	b.n	8000a8a <getAckTypeToSend+0x46>

        case MQTTPubRecSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBREC;
 8000a76:	2350      	movs	r3, #80	; 0x50
 8000a78:	73fb      	strb	r3, [r7, #15]
            break;
 8000a7a:	e006      	b.n	8000a8a <getAckTypeToSend+0x46>

        case MQTTPubRelSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBREL;
 8000a7c:	2362      	movs	r3, #98	; 0x62
 8000a7e:	73fb      	strb	r3, [r7, #15]
            break;
 8000a80:	e003      	b.n	8000a8a <getAckTypeToSend+0x46>

        case MQTTPubCompSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBCOMP;
 8000a82:	2370      	movs	r3, #112	; 0x70
 8000a84:	73fb      	strb	r3, [r7, #15]
            break;
 8000a86:	e000      	b.n	8000a8a <getAckTypeToSend+0x46>

        default:
            /* Take no action for states that do not require sending an ack. */
            break;
 8000a88:	bf00      	nop
    }

    return packetTypeByte;
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <sendPublishAcks>:
/*-----------------------------------------------------------*/

static MQTTStatus_t sendPublishAcks( MQTTContext_t * pContext,
                                     uint16_t packetId,
                                     MQTTPublishState_t publishState )
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af02      	add	r7, sp, #8
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	807b      	strh	r3, [r7, #2]
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	707b      	strb	r3, [r7, #1]
    MQTTStatus_t status = MQTTSuccess;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	75fb      	strb	r3, [r7, #23]
    MQTTPublishState_t newState = MQTTStateNull;
 8000aac:	2300      	movs	r3, #0
 8000aae:	737b      	strb	r3, [r7, #13]
    int32_t bytesSent = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	613b      	str	r3, [r7, #16]
    uint8_t packetTypeByte = 0U;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	73fb      	strb	r3, [r7, #15]
    MQTTPubAckType_t packetType;

    assert( pContext != NULL );
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d106      	bne.n	8000acc <sendPublishAcks+0x34>
 8000abe:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <sendPublishAcks+0xb0>)
 8000ac0:	4a22      	ldr	r2, [pc, #136]	; (8000b4c <sendPublishAcks+0xb4>)
 8000ac2:	f240 31b1 	movw	r1, #945	; 0x3b1
 8000ac6:	4822      	ldr	r0, [pc, #136]	; (8000b50 <sendPublishAcks+0xb8>)
 8000ac8:	f00c f87e 	bl	800cbc8 <__assert_func>

    packetTypeByte = getAckTypeToSend( publishState );
 8000acc:	787b      	ldrb	r3, [r7, #1]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff ffb8 	bl	8000a44 <getAckTypeToSend>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	73fb      	strb	r3, [r7, #15]

    if( packetTypeByte != 0U )
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d02e      	beq.n	8000b3c <sendPublishAcks+0xa4>
    {
        packetType = getAckFromPacketType( packetTypeByte );
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fdff 	bl	80006e4 <getAckFromPacketType>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	73bb      	strb	r3, [r7, #14]

        status = MQTT_SerializeAck( &( pContext->networkBuffer ),
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	335c      	adds	r3, #92	; 0x5c
 8000aee:	887a      	ldrh	r2, [r7, #2]
 8000af0:	7bf9      	ldrb	r1, [r7, #15]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 fe32 	bl	800275c <MQTT_SerializeAck>
 8000af8:	4603      	mov	r3, r0
 8000afa:	75fb      	strb	r3, [r7, #23]
                                    packetTypeByte,
                                    packetId );

        if( status == MQTTSuccess )
 8000afc:	7dfb      	ldrb	r3, [r7, #23]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d107      	bne.n	8000b12 <sendPublishAcks+0x7a>
        {
            bytesSent = sendPacket( pContext,
                                    pContext->networkBuffer.pBuffer,
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            bytesSent = sendPacket( pContext,
 8000b06:	2204      	movs	r2, #4
 8000b08:	4619      	mov	r1, r3
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f7ff fd3a 	bl	8000584 <sendPacket>
 8000b10:	6138      	str	r0, [r7, #16]
                                    MQTT_PUBLISH_ACK_PACKET_SIZE );
        }

        if( bytesSent == ( int32_t ) MQTT_PUBLISH_ACK_PACKET_SIZE )
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	2b04      	cmp	r3, #4
 8000b16:	d10f      	bne.n	8000b38 <sendPublishAcks+0xa0>
        {
            pContext->controlPacketSent = true;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
            status = MQTT_UpdateStateAck( pContext,
 8000b20:	7bba      	ldrb	r2, [r7, #14]
 8000b22:	8879      	ldrh	r1, [r7, #2]
 8000b24:	f107 030d 	add.w	r3, r7, #13
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f002 fc72 	bl	8003416 <MQTT_UpdateStateAck>
 8000b32:	4603      	mov	r3, r0
 8000b34:	75fb      	strb	r3, [r7, #23]
 8000b36:	e001      	b.n	8000b3c <sendPublishAcks+0xa4>
        {
            LogError( ( "Failed to send ACK packet: PacketType=%02x, SentBytes=%ld, "
                        "PacketSize=%lu.",
                        ( unsigned int ) packetTypeByte, ( long int ) bytesSent,
                        MQTT_PUBLISH_ACK_PACKET_SIZE ) );
            status = MQTTSendFailed;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 8000b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	0800e2c4 	.word	0x0800e2c4
 8000b4c:	0800f23c 	.word	0x0800f23c
 8000b50:	0800e22c 	.word	0x0800e22c

08000b54 <handleKeepAlive>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleKeepAlive( MQTTContext_t * pContext )
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	75fb      	strb	r3, [r7, #23]
    uint32_t now = 0U, keepAliveMs = 0U;
 8000b60:	2300      	movs	r3, #0
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]

    assert( pContext != NULL );
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d106      	bne.n	8000b7c <handleKeepAlive+0x28>
 8000b6e:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <handleKeepAlive+0xac>)
 8000b70:	4a24      	ldr	r2, [pc, #144]	; (8000c04 <handleKeepAlive+0xb0>)
 8000b72:	f240 31e7 	movw	r1, #999	; 0x3e7
 8000b76:	4824      	ldr	r0, [pc, #144]	; (8000c08 <handleKeepAlive+0xb4>)
 8000b78:	f00c f826 	bl	800cbc8 <__assert_func>
    assert( pContext->getTime != NULL );
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d106      	bne.n	8000b92 <handleKeepAlive+0x3e>
 8000b84:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <handleKeepAlive+0xb8>)
 8000b86:	4a1f      	ldr	r2, [pc, #124]	; (8000c04 <handleKeepAlive+0xb0>)
 8000b88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b8c:	481e      	ldr	r0, [pc, #120]	; (8000c08 <handleKeepAlive+0xb4>)
 8000b8e:	f00c f81b 	bl	800cbc8 <__assert_func>

    now = pContext->getTime();
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000b96:	4798      	blx	r3
 8000b98:	6138      	str	r0, [r7, #16]
    keepAliveMs = 1000U * ( uint32_t ) pContext->keepAliveIntervalSec;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba6:	fb02 f303 	mul.w	r3, r2, r3
 8000baa:	60fb      	str	r3, [r7, #12]

    /* If keep alive interval is 0, it is disabled. */
    if( ( keepAliveMs != 0U ) &&
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d020      	beq.n	8000bf4 <handleKeepAlive+0xa0>
        ( calculateElapsedTime( now, pContext->lastPacketTime ) > keepAliveMs ) )
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	6938      	ldr	r0, [r7, #16]
 8000bba:	f7ff fd85 	bl	80006c8 <calculateElapsedTime>
 8000bbe:	4602      	mov	r2, r0
    if( ( keepAliveMs != 0U ) &&
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d216      	bcs.n	8000bf4 <handleKeepAlive+0xa0>
    {
        if( pContext->waitingForPingResp == true )
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d00c      	beq.n	8000bea <handleKeepAlive+0x96>
        {
            /* Has time expired? */
            if( calculateElapsedTime( now, pContext->pingReqSendTimeMs ) >
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	6938      	ldr	r0, [r7, #16]
 8000bd8:	f7ff fd76 	bl	80006c8 <calculateElapsedTime>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000be2:	d907      	bls.n	8000bf4 <handleKeepAlive+0xa0>
                MQTT_PINGRESP_TIMEOUT_MS )
            {
                status = MQTTKeepAliveTimeout;
 8000be4:	230a      	movs	r3, #10
 8000be6:	75fb      	strb	r3, [r7, #23]
 8000be8:	e004      	b.n	8000bf4 <handleKeepAlive+0xa0>
            }
        }
        else
        {
            status = MQTT_Ping( pContext );
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f000 fda5 	bl	800173a <MQTT_Ping>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 8000bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	0800e2c4 	.word	0x0800e2c4
 8000c04:	0800f24c 	.word	0x0800f24c
 8000c08:	0800e22c 	.word	0x0800e22c
 8000c0c:	0800e2d8 	.word	0x0800e2d8

08000c10 <handleIncomingPublish>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleIncomingPublish( MQTTContext_t * pContext,
                                           MQTTPacketInfo_t * pIncomingPacket )
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08e      	sub	sp, #56	; 0x38
 8000c14:	af02      	add	r7, sp, #8
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTBadParameter;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    MQTTPublishState_t publishRecordState = MQTTStateNull;
 8000c20:	2300      	movs	r3, #0
 8000c22:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t packetIdentifier = 0U;
 8000c26:	2300      	movs	r3, #0
 8000c28:	857b      	strh	r3, [r7, #42]	; 0x2a
    MQTTPublishInfo_t publishInfo;
    MQTTDeserializedInfo_t deserializedInfo;
    bool duplicatePublish = false;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    assert( pContext != NULL );
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d106      	bne.n	8000c44 <handleIncomingPublish+0x34>
 8000c36:	4b3c      	ldr	r3, [pc, #240]	; (8000d28 <handleIncomingPublish+0x118>)
 8000c38:	4a3c      	ldr	r2, [pc, #240]	; (8000d2c <handleIncomingPublish+0x11c>)
 8000c3a:	f240 410f 	movw	r1, #1039	; 0x40f
 8000c3e:	483c      	ldr	r0, [pc, #240]	; (8000d30 <handleIncomingPublish+0x120>)
 8000c40:	f00b ffc2 	bl	800cbc8 <__assert_func>
    assert( pIncomingPacket != NULL );
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d106      	bne.n	8000c58 <handleIncomingPublish+0x48>
 8000c4a:	4b3a      	ldr	r3, [pc, #232]	; (8000d34 <handleIncomingPublish+0x124>)
 8000c4c:	4a37      	ldr	r2, [pc, #220]	; (8000d2c <handleIncomingPublish+0x11c>)
 8000c4e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000c52:	4837      	ldr	r0, [pc, #220]	; (8000d30 <handleIncomingPublish+0x120>)
 8000c54:	f00b ffb8 	bl	800cbc8 <__assert_func>
    assert( pContext->appCallback != NULL );
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d106      	bne.n	8000c6e <handleIncomingPublish+0x5e>
 8000c60:	4b35      	ldr	r3, [pc, #212]	; (8000d38 <handleIncomingPublish+0x128>)
 8000c62:	4a32      	ldr	r2, [pc, #200]	; (8000d2c <handleIncomingPublish+0x11c>)
 8000c64:	f240 4111 	movw	r1, #1041	; 0x411
 8000c68:	4831      	ldr	r0, [pc, #196]	; (8000d30 <handleIncomingPublish+0x120>)
 8000c6a:	f00b ffad 	bl	800cbc8 <__assert_func>

    status = MQTT_DeserializePublish( pIncomingPacket, &packetIdentifier, &publishInfo );
 8000c6e:	f107 0214 	add.w	r2, r7, #20
 8000c72:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8000c76:	4619      	mov	r1, r3
 8000c78:	6838      	ldr	r0, [r7, #0]
 8000c7a:	f001 fe06 	bl	800288a <MQTT_DeserializePublish>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    LogInfo( ( "De-serialized incoming PUBLISH packet: DeserializerResult=%s.",
               MQTT_Status_strerror( status ) ) );

    if( status == MQTTSuccess )
 8000c84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d122      	bne.n	8000cd2 <handleIncomingPublish+0xc2>
    {
        status = MQTT_UpdateStatePublish( pContext,
 8000c8c:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000c8e:	7d3a      	ldrb	r2, [r7, #20]
 8000c90:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	4613      	mov	r3, r2
 8000c98:	2201      	movs	r2, #1
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f002 fb4d 	bl	800333a <MQTT_UpdateStatePublish>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                          packetIdentifier,
                                          MQTT_RECEIVE,
                                          publishInfo.qos,
                                          &publishRecordState );

        if( status == MQTTSuccess )
 8000ca6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d011      	beq.n	8000cd2 <handleIncomingPublish+0xc2>
         *       sending out a duplicate publish with dup flag set, when a
         *       session is reestablished. It can result in a collision in
         *       state engine. This will be handled by ignoring the
         *       #MQTTStateCollision status from the state engine. The publish
         *       data is not passed to the application. */
        else if( status == MQTTStateCollision )
 8000cae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cb2:	2b09      	cmp	r3, #9
 8000cb4:	d10d      	bne.n	8000cd2 <handleIncomingPublish+0xc2>
        {
            status = MQTTSuccess;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            duplicatePublish = true;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

            /* Calculate the state for the ack packet that needs to be sent out
             * for the duplicate incoming publish. */
            publishRecordState = MQTT_CalculateStatePublish( MQTT_RECEIVE,
 8000cc2:	7d3b      	ldrb	r3, [r7, #20]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f002 fb08 	bl	80032dc <MQTT_CalculateStatePublish>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                        ( unsigned short ) packetIdentifier,
                        MQTT_Status_strerror( status ) ) );
        }
    }

    if( status == MQTTSuccess )
 8000cd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d11f      	bne.n	8000d1a <handleIncomingPublish+0x10a>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 8000cda:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000cdc:	813b      	strh	r3, [r7, #8]
        deserializedInfo.pPublishInfo = &publishInfo;
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	60fb      	str	r3, [r7, #12]
        deserializedInfo.deserializationResult = status;
 8000ce4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ce8:	743b      	strb	r3, [r7, #16]

        /* Invoke application callback to hand the buffer over to application
         * before sending acks.
         * Application callback will be invoked for all publishes, except for
         * duplicate incoming publishes. */
        if( duplicatePublish == false )
 8000cea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000cee:	f083 0301 	eor.w	r3, r3, #1
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d006      	beq.n	8000d06 <handleIncomingPublish+0xf6>
        {
            pContext->appCallback( pContext,
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000cfc:	f107 0208 	add.w	r2, r7, #8
 8000d00:	6839      	ldr	r1, [r7, #0]
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	4798      	blx	r3
                                   pIncomingPacket,
                                   &deserializedInfo );
        }

        /* Send PUBACK or PUBREC if necessary. */
        status = sendPublishAcks( pContext,
 8000d06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000d08:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff fec2 	bl	8000a98 <sendPublishAcks>
 8000d14:	4603      	mov	r3, r0
 8000d16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                  packetIdentifier,
                                  publishRecordState );
    }

    return status;
 8000d1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3730      	adds	r7, #48	; 0x30
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	0800e2c4 	.word	0x0800e2c4
 8000d2c:	0800f25c 	.word	0x0800f25c
 8000d30:	0800e22c 	.word	0x0800e22c
 8000d34:	0800e428 	.word	0x0800e428
 8000d38:	0800e440 	.word	0x0800e440

08000d3c <handlePublishAcks>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handlePublishAcks( MQTTContext_t * pContext,
                                       MQTTPacketInfo_t * pIncomingPacket )
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	; 0x28
 8000d40:	af02      	add	r7, sp, #8
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTBadResponse;
 8000d46:	2305      	movs	r3, #5
 8000d48:	77fb      	strb	r3, [r7, #31]
    MQTTPublishState_t publishRecordState = MQTTStateNull;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	75bb      	strb	r3, [r7, #22]
    uint16_t packetIdentifier;
    MQTTPubAckType_t ackType;
    MQTTEventCallback_t appCallback;
    MQTTDeserializedInfo_t deserializedInfo;

    assert( pContext != NULL );
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d106      	bne.n	8000d62 <handlePublishAcks+0x26>
 8000d54:	4b2c      	ldr	r3, [pc, #176]	; (8000e08 <handlePublishAcks+0xcc>)
 8000d56:	4a2d      	ldr	r2, [pc, #180]	; (8000e0c <handlePublishAcks+0xd0>)
 8000d58:	f240 4181 	movw	r1, #1153	; 0x481
 8000d5c:	482c      	ldr	r0, [pc, #176]	; (8000e10 <handlePublishAcks+0xd4>)
 8000d5e:	f00b ff33 	bl	800cbc8 <__assert_func>
    assert( pIncomingPacket != NULL );
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d106      	bne.n	8000d76 <handlePublishAcks+0x3a>
 8000d68:	4b2a      	ldr	r3, [pc, #168]	; (8000e14 <handlePublishAcks+0xd8>)
 8000d6a:	4a28      	ldr	r2, [pc, #160]	; (8000e0c <handlePublishAcks+0xd0>)
 8000d6c:	f240 4182 	movw	r1, #1154	; 0x482
 8000d70:	4827      	ldr	r0, [pc, #156]	; (8000e10 <handlePublishAcks+0xd4>)
 8000d72:	f00b ff29 	bl	800cbc8 <__assert_func>
    assert( pContext->appCallback != NULL );
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d106      	bne.n	8000d8c <handlePublishAcks+0x50>
 8000d7e:	4b26      	ldr	r3, [pc, #152]	; (8000e18 <handlePublishAcks+0xdc>)
 8000d80:	4a22      	ldr	r2, [pc, #136]	; (8000e0c <handlePublishAcks+0xd0>)
 8000d82:	f240 4183 	movw	r1, #1155	; 0x483
 8000d86:	4822      	ldr	r0, [pc, #136]	; (8000e10 <handlePublishAcks+0xd4>)
 8000d88:	f00b ff1e 	bl	800cbc8 <__assert_func>

    appCallback = pContext->appCallback;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000d90:	61bb      	str	r3, [r7, #24]

    ackType = getAckFromPacketType( pIncomingPacket->type );
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fca4 	bl	80006e4 <getAckFromPacketType>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	75fb      	strb	r3, [r7, #23]
    status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	2200      	movs	r2, #0
 8000da6:	4619      	mov	r1, r3
 8000da8:	6838      	ldr	r0, [r7, #0]
 8000daa:	f001 fd9e 	bl	80028ea <MQTT_DeserializeAck>
 8000dae:	4603      	mov	r3, r0
 8000db0:	77fb      	strb	r3, [r7, #31]
    LogInfo( ( "Ack packet deserialized with result: %s.",
               MQTT_Status_strerror( status ) ) );

    if( status == MQTTSuccess )
 8000db2:	7ffb      	ldrb	r3, [r7, #31]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d10a      	bne.n	8000dce <handlePublishAcks+0x92>
    {
        status = MQTT_UpdateStateAck( pContext,
 8000db8:	8ab9      	ldrh	r1, [r7, #20]
 8000dba:	7dfa      	ldrb	r2, [r7, #23]
 8000dbc:	f107 0316 	add.w	r3, r7, #22
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f002 fb26 	bl	8003416 <MQTT_UpdateStateAck>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	77fb      	strb	r3, [r7, #31]
                        ( unsigned short ) packetIdentifier,
                        MQTT_Status_strerror( status ) ) );
        }
    }

    if( status == MQTTSuccess )
 8000dce:	7ffb      	ldrb	r3, [r7, #31]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d113      	bne.n	8000dfc <handlePublishAcks+0xc0>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 8000dd4:	8abb      	ldrh	r3, [r7, #20]
 8000dd6:	813b      	strh	r3, [r7, #8]
        deserializedInfo.deserializationResult = status;
 8000dd8:	7ffb      	ldrb	r3, [r7, #31]
 8000dda:	743b      	strb	r3, [r7, #16]
        deserializedInfo.pPublishInfo = NULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]

        /* Invoke application callback to hand the buffer over to application
         * before sending acks. */
        appCallback( pContext, pIncomingPacket, &deserializedInfo );
 8000de0:	f107 0208 	add.w	r2, r7, #8
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	6839      	ldr	r1, [r7, #0]
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	4798      	blx	r3

        /* Send PUBREL or PUBCOMP if necessary. */
        status = sendPublishAcks( pContext,
 8000dec:	8abb      	ldrh	r3, [r7, #20]
 8000dee:	7dba      	ldrb	r2, [r7, #22]
 8000df0:	4619      	mov	r1, r3
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff fe50 	bl	8000a98 <sendPublishAcks>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	77fb      	strb	r3, [r7, #31]
                                  packetIdentifier,
                                  publishRecordState );
    }

    return status;
 8000dfc:	7ffb      	ldrb	r3, [r7, #31]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3720      	adds	r7, #32
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	0800e2c4 	.word	0x0800e2c4
 8000e0c:	0800f274 	.word	0x0800f274
 8000e10:	0800e22c 	.word	0x0800e22c
 8000e14:	0800e428 	.word	0x0800e428
 8000e18:	0800e440 	.word	0x0800e440

08000e1c <handleIncomingAck>:
/*-----------------------------------------------------------*/

static MQTTStatus_t handleIncomingAck( MQTTContext_t * pContext,
                                       MQTTPacketInfo_t * pIncomingPacket,
                                       bool manageKeepAlive )
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	; 0x28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	4613      	mov	r3, r2
 8000e28:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTBadResponse;
 8000e2a:	2305      	movs	r3, #5
 8000e2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint16_t packetIdentifier = MQTT_PACKET_ID_INVALID;
 8000e30:	2300      	movs	r3, #0
 8000e32:	83fb      	strh	r3, [r7, #30]
    /* We should always invoke the app callback unless we receive a PINGRESP
     * and are managing keep alive, or if we receive an unknown packet. We
     * initialize this to false since the callback must be invoked before
     * sending any PUBREL or PUBCOMP. However, for other cases, we invoke it
     * at the end to reduce the complexity of this function. */
    bool invokeAppCallback = false;
 8000e34:	2300      	movs	r3, #0
 8000e36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    MQTTEventCallback_t appCallback = NULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	623b      	str	r3, [r7, #32]

    assert( pContext != NULL );
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d106      	bne.n	8000e52 <handleIncomingAck+0x36>
 8000e44:	4b54      	ldr	r3, [pc, #336]	; (8000f98 <handleIncomingAck+0x17c>)
 8000e46:	4a55      	ldr	r2, [pc, #340]	; (8000f9c <handleIncomingAck+0x180>)
 8000e48:	f44f 6199 	mov.w	r1, #1224	; 0x4c8
 8000e4c:	4854      	ldr	r0, [pc, #336]	; (8000fa0 <handleIncomingAck+0x184>)
 8000e4e:	f00b febb 	bl	800cbc8 <__assert_func>
    assert( pIncomingPacket != NULL );
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d106      	bne.n	8000e66 <handleIncomingAck+0x4a>
 8000e58:	4b52      	ldr	r3, [pc, #328]	; (8000fa4 <handleIncomingAck+0x188>)
 8000e5a:	4a50      	ldr	r2, [pc, #320]	; (8000f9c <handleIncomingAck+0x180>)
 8000e5c:	f240 41c9 	movw	r1, #1225	; 0x4c9
 8000e60:	484f      	ldr	r0, [pc, #316]	; (8000fa0 <handleIncomingAck+0x184>)
 8000e62:	f00b feb1 	bl	800cbc8 <__assert_func>
    assert( pContext->appCallback != NULL );
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d106      	bne.n	8000e7c <handleIncomingAck+0x60>
 8000e6e:	4b4e      	ldr	r3, [pc, #312]	; (8000fa8 <handleIncomingAck+0x18c>)
 8000e70:	4a4a      	ldr	r2, [pc, #296]	; (8000f9c <handleIncomingAck+0x180>)
 8000e72:	f240 41ca 	movw	r1, #1226	; 0x4ca
 8000e76:	484a      	ldr	r0, [pc, #296]	; (8000fa0 <handleIncomingAck+0x184>)
 8000e78:	f00b fea6 	bl	800cbc8 <__assert_func>

    appCallback = pContext->appCallback;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000e80:	623b      	str	r3, [r7, #32]

    LogDebug( ( "Received packet of type %02x.",
                ( unsigned int ) pIncomingPacket->type ) );

    switch( pIncomingPacket->type )
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2bd0      	cmp	r3, #208	; 0xd0
 8000e88:	d01d      	beq.n	8000ec6 <handleIncomingAck+0xaa>
 8000e8a:	2bd0      	cmp	r3, #208	; 0xd0
 8000e8c:	dc64      	bgt.n	8000f58 <handleIncomingAck+0x13c>
 8000e8e:	2bb0      	cmp	r3, #176	; 0xb0
 8000e90:	d044      	beq.n	8000f1c <handleIncomingAck+0x100>
 8000e92:	2bb0      	cmp	r3, #176	; 0xb0
 8000e94:	dc60      	bgt.n	8000f58 <handleIncomingAck+0x13c>
 8000e96:	2b90      	cmp	r3, #144	; 0x90
 8000e98:	d040      	beq.n	8000f1c <handleIncomingAck+0x100>
 8000e9a:	2b90      	cmp	r3, #144	; 0x90
 8000e9c:	dc5c      	bgt.n	8000f58 <handleIncomingAck+0x13c>
 8000e9e:	2b70      	cmp	r3, #112	; 0x70
 8000ea0:	d009      	beq.n	8000eb6 <handleIncomingAck+0x9a>
 8000ea2:	2b70      	cmp	r3, #112	; 0x70
 8000ea4:	dc58      	bgt.n	8000f58 <handleIncomingAck+0x13c>
 8000ea6:	2b62      	cmp	r3, #98	; 0x62
 8000ea8:	d005      	beq.n	8000eb6 <handleIncomingAck+0x9a>
 8000eaa:	2b62      	cmp	r3, #98	; 0x62
 8000eac:	dc54      	bgt.n	8000f58 <handleIncomingAck+0x13c>
 8000eae:	2b40      	cmp	r3, #64	; 0x40
 8000eb0:	d001      	beq.n	8000eb6 <handleIncomingAck+0x9a>
 8000eb2:	2b50      	cmp	r3, #80	; 0x50
 8000eb4:	d150      	bne.n	8000f58 <handleIncomingAck+0x13c>
        case MQTT_PACKET_TYPE_PUBREC:
        case MQTT_PACKET_TYPE_PUBREL:
        case MQTT_PACKET_TYPE_PUBCOMP:

            /* Handle all the publish acks. The app callback is invoked here. */
            status = handlePublishAcks( pContext, pIncomingPacket );
 8000eb6:	68b9      	ldr	r1, [r7, #8]
 8000eb8:	68f8      	ldr	r0, [r7, #12]
 8000eba:	f7ff ff3f 	bl	8000d3c <handlePublishAcks>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            break;
 8000ec4:	e04d      	b.n	8000f62 <handleIncomingAck+0x146>

        case MQTT_PACKET_TYPE_PINGRESP:
            status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 8000ec6:	f107 031e 	add.w	r3, r7, #30
 8000eca:	2200      	movs	r2, #0
 8000ecc:	4619      	mov	r1, r3
 8000ece:	68b8      	ldr	r0, [r7, #8]
 8000ed0:	f001 fd0b 	bl	80028ea <MQTT_DeserializeAck>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            invokeAppCallback = ( ( status == MQTTSuccess ) && ( manageKeepAlive == false ) ) ? true : false;
 8000eda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d107      	bne.n	8000ef2 <handleIncomingAck+0xd6>
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	f083 0301 	eor.w	r3, r3, #1
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <handleIncomingAck+0xd6>
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e000      	b.n	8000ef4 <handleIncomingAck+0xd8>
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ef8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

            if( ( status == MQTTSuccess ) && ( manageKeepAlive == true ) )
 8000f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d129      	bne.n	8000f60 <handleIncomingAck+0x144>
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d026      	beq.n	8000f60 <handleIncomingAck+0x144>
            {
                pContext->waitingForPingResp = false;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            }

            break;
 8000f1a:	e021      	b.n	8000f60 <handleIncomingAck+0x144>

        case MQTT_PACKET_TYPE_SUBACK:
        case MQTT_PACKET_TYPE_UNSUBACK:
            /* Deserialize and give these to the app provided callback. */
            status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 8000f1c:	f107 031e 	add.w	r3, r7, #30
 8000f20:	2200      	movs	r2, #0
 8000f22:	4619      	mov	r1, r3
 8000f24:	68b8      	ldr	r0, [r7, #8]
 8000f26:	f001 fce0 	bl	80028ea <MQTT_DeserializeAck>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            invokeAppCallback = ( ( status == MQTTSuccess ) || ( status == MQTTServerRefused ) ) ? true : false;
 8000f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <handleIncomingAck+0x124>
 8000f38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f3c:	2b06      	cmp	r3, #6
 8000f3e:	d101      	bne.n	8000f44 <handleIncomingAck+0x128>
 8000f40:	2301      	movs	r3, #1
 8000f42:	e000      	b.n	8000f46 <handleIncomingAck+0x12a>
 8000f44:	2300      	movs	r3, #0
 8000f46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            break;
 8000f56:	e004      	b.n	8000f62 <handleIncomingAck+0x146>

        default:
            /* Bad response from the server. */
            LogError( ( "Unexpected packet type from server: PacketType=%02x.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 8000f58:	2305      	movs	r3, #5
 8000f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8000f5e:	e000      	b.n	8000f62 <handleIncomingAck+0x146>
            break;
 8000f60:	bf00      	nop
    }

    if( invokeAppCallback == true )
 8000f62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00f      	beq.n	8000f8a <handleIncomingAck+0x16e>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 8000f6a:	8bfb      	ldrh	r3, [r7, #30]
 8000f6c:	823b      	strh	r3, [r7, #16]
        deserializedInfo.deserializationResult = status;
 8000f6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f72:	763b      	strb	r3, [r7, #24]
        deserializedInfo.pPublishInfo = NULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
        appCallback( pContext, pIncomingPacket, &deserializedInfo );
 8000f78:	f107 0210 	add.w	r2, r7, #16
 8000f7c:	6a3b      	ldr	r3, [r7, #32]
 8000f7e:	68b9      	ldr	r1, [r7, #8]
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	4798      	blx	r3
        /* In case a SUBACK indicated refusal, reset the status to continue the loop. */
        status = MQTTSuccess;
 8000f84:	2300      	movs	r3, #0
 8000f86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return status;
 8000f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3728      	adds	r7, #40	; 0x28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	0800e2c4 	.word	0x0800e2c4
 8000f9c:	0800f288 	.word	0x0800f288
 8000fa0:	0800e22c 	.word	0x0800e22c
 8000fa4:	0800e428 	.word	0x0800e428
 8000fa8:	0800e440 	.word	0x0800e440

08000fac <receiveSingleIteration>:
/*-----------------------------------------------------------*/

static MQTTStatus_t receiveSingleIteration( MQTTContext_t * pContext,
                                            uint32_t remainingTimeMs,
                                            bool manageKeepAlive )
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTSuccess;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	77fb      	strb	r3, [r7, #31]
    MQTTPacketInfo_t incomingPacket;

    assert( pContext != NULL );
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d106      	bne.n	8000fd2 <receiveSingleIteration+0x26>
 8000fc4:	4b30      	ldr	r3, [pc, #192]	; (8001088 <receiveSingleIteration+0xdc>)
 8000fc6:	4a31      	ldr	r2, [pc, #196]	; (800108c <receiveSingleIteration+0xe0>)
 8000fc8:	f240 510e 	movw	r1, #1294	; 0x50e
 8000fcc:	4830      	ldr	r0, [pc, #192]	; (8001090 <receiveSingleIteration+0xe4>)
 8000fce:	f00b fdfb 	bl	800cbc8 <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d106      	bne.n	8000fe8 <receiveSingleIteration+0x3c>
 8000fda:	4b2e      	ldr	r3, [pc, #184]	; (8001094 <receiveSingleIteration+0xe8>)
 8000fdc:	4a2b      	ldr	r2, [pc, #172]	; (800108c <receiveSingleIteration+0xe0>)
 8000fde:	f240 510f 	movw	r1, #1295	; 0x50f
 8000fe2:	482b      	ldr	r0, [pc, #172]	; (8001090 <receiveSingleIteration+0xe4>)
 8000fe4:	f00b fdf0 	bl	800cbc8 <__assert_func>

    status = MQTT_GetIncomingPacketTypeAndLength( pContext->transportInterface.recv,
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff0:	f107 0210 	add.w	r2, r7, #16
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f001 fceb 	bl	80029d0 <MQTT_GetIncomingPacketTypeAndLength>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	77fb      	strb	r3, [r7, #31]
                                                  pContext->transportInterface.pNetworkContext,
                                                  &incomingPacket );

    if( status == MQTTNoDataAvailable )
 8000ffe:	7ffb      	ldrb	r3, [r7, #31]
 8001000:	2b07      	cmp	r3, #7
 8001002:	d10d      	bne.n	8001020 <receiveSingleIteration+0x74>
    {
        if( manageKeepAlive == true )
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d004      	beq.n	8001014 <receiveSingleIteration+0x68>
        {
            /* Assign status so an error can be bubbled up to application,
             * but reset it on success. */
            status = handleKeepAlive( pContext );
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f7ff fda2 	bl	8000b54 <handleKeepAlive>
 8001010:	4603      	mov	r3, r0
 8001012:	77fb      	strb	r3, [r7, #31]
        }

        if( status == MQTTSuccess )
 8001014:	7ffb      	ldrb	r3, [r7, #31]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d10f      	bne.n	800103a <receiveSingleIteration+0x8e>
        {
            /* Reset the status to indicate that we should not try to read
             * a packet from the transport interface. */
            status = MQTTNoDataAvailable;
 800101a:	2307      	movs	r3, #7
 800101c:	77fb      	strb	r3, [r7, #31]
 800101e:	e00c      	b.n	800103a <receiveSingleIteration+0x8e>
        }
    }
    else if( status != MQTTSuccess )
 8001020:	7ffb      	ldrb	r3, [r7, #31]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d109      	bne.n	800103a <receiveSingleIteration+0x8e>
    }
    else
    {
        /* Receive packet. Remaining time is recalculated before calling this
         * function. */
        status = receivePacket( pContext, incomingPacket, remainingTimeMs );
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	f107 0310 	add.w	r3, r7, #16
 800102e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	f7ff fcbd 	bl	80009b0 <receivePacket>
 8001036:	4603      	mov	r3, r0
 8001038:	77fb      	strb	r3, [r7, #31]
    }

    /* Handle received packet. If no data was read then this will not execute. */
    if( status == MQTTSuccess )
 800103a:	7ffb      	ldrb	r3, [r7, #31]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d119      	bne.n	8001074 <receiveSingleIteration+0xc8>
    {
        incomingPacket.pRemainingData = pContext->networkBuffer.pBuffer;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001044:	617b      	str	r3, [r7, #20]

        /* PUBLISH packets allow flags in the lower four bits. For other
         * packet types, they are reserved. */
        if( ( incomingPacket.type & 0xF0U ) == MQTT_PACKET_TYPE_PUBLISH )
 8001046:	7c3b      	ldrb	r3, [r7, #16]
 8001048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800104c:	2b30      	cmp	r3, #48	; 0x30
 800104e:	d108      	bne.n	8001062 <receiveSingleIteration+0xb6>
        {
            status = handleIncomingPublish( pContext, &incomingPacket );
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	4619      	mov	r1, r3
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f7ff fdda 	bl	8000c10 <handleIncomingPublish>
 800105c:	4603      	mov	r3, r0
 800105e:	77fb      	strb	r3, [r7, #31]
 8001060:	e008      	b.n	8001074 <receiveSingleIteration+0xc8>
        }
        else
        {
            status = handleIncomingAck( pContext, &incomingPacket, manageKeepAlive );
 8001062:	79fa      	ldrb	r2, [r7, #7]
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	4619      	mov	r1, r3
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	f7ff fed6 	bl	8000e1c <handleIncomingAck>
 8001070:	4603      	mov	r3, r0
 8001072:	77fb      	strb	r3, [r7, #31]
        }
    }

    if( status == MQTTNoDataAvailable )
 8001074:	7ffb      	ldrb	r3, [r7, #31]
 8001076:	2b07      	cmp	r3, #7
 8001078:	d101      	bne.n	800107e <receiveSingleIteration+0xd2>
    {
        /* No data available is not an error. Reset to MQTTSuccess so the
         * return code will indicate success. */
        status = MQTTSuccess;
 800107a:	2300      	movs	r3, #0
 800107c:	77fb      	strb	r3, [r7, #31]
    }

    return status;
 800107e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	0800e2c4 	.word	0x0800e2c4
 800108c:	0800f29c 	.word	0x0800f29c
 8001090:	0800e22c 	.word	0x0800e22c
 8001094:	0800e3d8 	.word	0x0800e3d8

08001098 <sendPublish>:
/*-----------------------------------------------------------*/

static MQTTStatus_t sendPublish( MQTTContext_t * pContext,
                                 const MQTTPublishInfo_t * pPublishInfo,
                                 size_t headerSize )
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 80010a4:	2300      	movs	r3, #0
 80010a6:	75fb      	strb	r3, [r7, #23]
    int32_t bytesSent = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	613b      	str	r3, [r7, #16]

    assert( pContext != NULL );
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d106      	bne.n	80010c0 <sendPublish+0x28>
 80010b2:	4b2f      	ldr	r3, [pc, #188]	; (8001170 <sendPublish+0xd8>)
 80010b4:	4a2f      	ldr	r2, [pc, #188]	; (8001174 <sendPublish+0xdc>)
 80010b6:	f240 5179 	movw	r1, #1401	; 0x579
 80010ba:	482f      	ldr	r0, [pc, #188]	; (8001178 <sendPublish+0xe0>)
 80010bc:	f00b fd84 	bl	800cbc8 <__assert_func>
    assert( pPublishInfo != NULL );
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d106      	bne.n	80010d4 <sendPublish+0x3c>
 80010c6:	4b2d      	ldr	r3, [pc, #180]	; (800117c <sendPublish+0xe4>)
 80010c8:	4a2a      	ldr	r2, [pc, #168]	; (8001174 <sendPublish+0xdc>)
 80010ca:	f240 517a 	movw	r1, #1402	; 0x57a
 80010ce:	482a      	ldr	r0, [pc, #168]	; (8001178 <sendPublish+0xe0>)
 80010d0:	f00b fd7a 	bl	800cbc8 <__assert_func>
    assert( headerSize > 0 );
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d106      	bne.n	80010e8 <sendPublish+0x50>
 80010da:	4b29      	ldr	r3, [pc, #164]	; (8001180 <sendPublish+0xe8>)
 80010dc:	4a25      	ldr	r2, [pc, #148]	; (8001174 <sendPublish+0xdc>)
 80010de:	f240 517b 	movw	r1, #1403	; 0x57b
 80010e2:	4825      	ldr	r0, [pc, #148]	; (8001178 <sendPublish+0xe0>)
 80010e4:	f00b fd70 	bl	800cbc8 <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d106      	bne.n	80010fe <sendPublish+0x66>
 80010f0:	4b24      	ldr	r3, [pc, #144]	; (8001184 <sendPublish+0xec>)
 80010f2:	4a20      	ldr	r2, [pc, #128]	; (8001174 <sendPublish+0xdc>)
 80010f4:	f240 517c 	movw	r1, #1404	; 0x57c
 80010f8:	481f      	ldr	r0, [pc, #124]	; (8001178 <sendPublish+0xe0>)
 80010fa:	f00b fd65 	bl	800cbc8 <__assert_func>
    assert( !( pPublishInfo->payloadLength > 0 ) || ( pPublishInfo->pPayload != NULL ) );
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d00a      	beq.n	800111c <sendPublish+0x84>
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d106      	bne.n	800111c <sendPublish+0x84>
 800110e:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <sendPublish+0xf0>)
 8001110:	4a18      	ldr	r2, [pc, #96]	; (8001174 <sendPublish+0xdc>)
 8001112:	f240 517d 	movw	r1, #1405	; 0x57d
 8001116:	4818      	ldr	r0, [pc, #96]	; (8001178 <sendPublish+0xe0>)
 8001118:	f00b fd56 	bl	800cbc8 <__assert_func>

    /* Send header first. */
    bytesSent = sendPacket( pContext,
                            pContext->networkBuffer.pBuffer,
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    bytesSent = sendPacket( pContext,
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	4619      	mov	r1, r3
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f7ff fa2d 	bl	8000584 <sendPacket>
 800112a:	6138      	str	r0, [r7, #16]
                            headerSize );

    if( bytesSent < ( int32_t ) headerSize )
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	429a      	cmp	r2, r3
 8001132:	da02      	bge.n	800113a <sendPublish+0xa2>
    {
        LogError( ( "Transport send failed for PUBLISH header." ) );
        status = MQTTSendFailed;
 8001134:	2303      	movs	r3, #3
 8001136:	75fb      	strb	r3, [r7, #23]
 8001138:	e014      	b.n	8001164 <sendPublish+0xcc>
        LogDebug( ( "Sent %ld bytes of PUBLISH header.",
                    ( long int ) bytesSent ) );

        /* Send Payload if there is one to send. It is valid for a PUBLISH
         * Packet to contain a zero length payload.*/
        if( pPublishInfo->payloadLength > 0U )
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d010      	beq.n	8001164 <sendPublish+0xcc>
        {
            bytesSent = sendPacket( pContext,
                                    pPublishInfo->pPayload,
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	68d9      	ldr	r1, [r3, #12]
            bytesSent = sendPacket( pContext,
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	461a      	mov	r2, r3
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f7ff fa19 	bl	8000584 <sendPacket>
 8001152:	6138      	str	r0, [r7, #16]
                                    pPublishInfo->payloadLength );

            if( bytesSent < ( int32_t ) pPublishInfo->payloadLength )
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	461a      	mov	r2, r3
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4293      	cmp	r3, r2
 800115e:	da01      	bge.n	8001164 <sendPublish+0xcc>
            {
                LogError( ( "Transport send failed for PUBLISH payload." ) );
                status = MQTTSendFailed;
 8001160:	2303      	movs	r3, #3
 8001162:	75fb      	strb	r3, [r7, #23]
        {
            LogDebug( ( "PUBLISH payload was not sent. Payload length was zero." ) );
        }
    }

    return status;
 8001164:	7dfb      	ldrb	r3, [r7, #23]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	0800e2c4 	.word	0x0800e2c4
 8001174:	0800f2b4 	.word	0x0800f2b4
 8001178:	0800e22c 	.word	0x0800e22c
 800117c:	0800e460 	.word	0x0800e460
 8001180:	0800e478 	.word	0x0800e478
 8001184:	0800e3d8 	.word	0x0800e3d8
 8001188:	0800e488 	.word	0x0800e488

0800118c <receiveConnack>:
static MQTTStatus_t receiveConnack( const MQTTContext_t * pContext,
                                    uint32_t timeoutMs,
                                    bool cleanSession,
                                    MQTTPacketInfo_t * pIncomingPacket,
                                    bool * pSessionPresent )
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08c      	sub	sp, #48	; 0x30
 8001190:	af02      	add	r7, sp, #8
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	4613      	mov	r3, r2
 800119a:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTSuccess;
 800119c:	2300      	movs	r3, #0
 800119e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MQTTGetCurrentTimeFunc_t getTimeStamp = NULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
    uint32_t entryTimeMs = 0U, remainingTimeMs = 0U, timeTakenMs = 0U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
    bool breakFromLoop = false;
 80011b2:	2300      	movs	r3, #0
 80011b4:	77fb      	strb	r3, [r7, #31]
    uint16_t loopCount = 0U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	83bb      	strh	r3, [r7, #28]

    assert( pContext != NULL );
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d106      	bne.n	80011ce <receiveConnack+0x42>
 80011c0:	4b4d      	ldr	r3, [pc, #308]	; (80012f8 <receiveConnack+0x16c>)
 80011c2:	4a4e      	ldr	r2, [pc, #312]	; (80012fc <receiveConnack+0x170>)
 80011c4:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
 80011c8:	484d      	ldr	r0, [pc, #308]	; (8001300 <receiveConnack+0x174>)
 80011ca:	f00b fcfd 	bl	800cbc8 <__assert_func>
    assert( pIncomingPacket != NULL );
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d106      	bne.n	80011e2 <receiveConnack+0x56>
 80011d4:	4b4b      	ldr	r3, [pc, #300]	; (8001304 <receiveConnack+0x178>)
 80011d6:	4a49      	ldr	r2, [pc, #292]	; (80012fc <receiveConnack+0x170>)
 80011d8:	f240 51b9 	movw	r1, #1465	; 0x5b9
 80011dc:	4848      	ldr	r0, [pc, #288]	; (8001300 <receiveConnack+0x174>)
 80011de:	f00b fcf3 	bl	800cbc8 <__assert_func>
    assert( pContext->getTime != NULL );
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d106      	bne.n	80011f8 <receiveConnack+0x6c>
 80011ea:	4b47      	ldr	r3, [pc, #284]	; (8001308 <receiveConnack+0x17c>)
 80011ec:	4a43      	ldr	r2, [pc, #268]	; (80012fc <receiveConnack+0x170>)
 80011ee:	f240 51ba 	movw	r1, #1466	; 0x5ba
 80011f2:	4843      	ldr	r0, [pc, #268]	; (8001300 <receiveConnack+0x174>)
 80011f4:	f00b fce8 	bl	800cbc8 <__assert_func>

    getTimeStamp = pContext->getTime;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80011fc:	61bb      	str	r3, [r7, #24]

    /* Get the entry time for the function. */
    entryTimeMs = getTimeStamp();
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	4798      	blx	r3
 8001202:	6178      	str	r0, [r7, #20]
    {
        /* Transport read for incoming CONNACK packet type and length.
         * MQTT_GetIncomingPacketTypeAndLength is a blocking call and it is
         * returned after a transport receive timeout, an error, or a successful
         * receive of packet type and length. */
        status = MQTT_GetIncomingPacketTypeAndLength( pContext->transportInterface.recv,
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	4619      	mov	r1, r3
 8001210:	f001 fbde 	bl	80029d0 <MQTT_GetIncomingPacketTypeAndLength>
 8001214:	4603      	mov	r3, r0
 8001216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
         * 2. If timeoutMs is 0:
         *    Loop times out based on the maximum number of retries config
         *    MQTT_MAX_CONNACK_RECEIVE_RETRY_COUNT. This config will control
         *    maximum the number of retry attempts to read the CONNACK packet.
         *    A value of 0 for the config will try once to read CONNACK. */
        if( timeoutMs > 0U )
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00e      	beq.n	800123e <receiveConnack+0xb2>
        {
            breakFromLoop = ( calculateElapsedTime( getTimeStamp(), entryTimeMs ) >= timeoutMs ) ? true : false;
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	4798      	blx	r3
 8001224:	4603      	mov	r3, r0
 8001226:	6979      	ldr	r1, [r7, #20]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fa4d 	bl	80006c8 <calculateElapsedTime>
 800122e:	4602      	mov	r2, r0
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	4293      	cmp	r3, r2
 8001234:	bf94      	ite	ls
 8001236:	2301      	movls	r3, #1
 8001238:	2300      	movhi	r3, #0
 800123a:	77fb      	strb	r3, [r7, #31]
 800123c:	e008      	b.n	8001250 <receiveConnack+0xc4>
        }
        else
        {
            breakFromLoop = ( loopCount >= MQTT_MAX_CONNACK_RECEIVE_RETRY_COUNT ) ? true : false;
 800123e:	8bbb      	ldrh	r3, [r7, #28]
 8001240:	2b01      	cmp	r3, #1
 8001242:	bf8c      	ite	hi
 8001244:	2301      	movhi	r3, #1
 8001246:	2300      	movls	r3, #0
 8001248:	77fb      	strb	r3, [r7, #31]
            loopCount++;
 800124a:	8bbb      	ldrh	r3, [r7, #28]
 800124c:	3301      	adds	r3, #1
 800124e:	83bb      	strh	r3, [r7, #28]
        }

        /* Loop until there is data to read or if we have exceeded the timeout/retries. */
    } while( ( status == MQTTNoDataAvailable ) && ( breakFromLoop == false ) );
 8001250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001254:	2b07      	cmp	r3, #7
 8001256:	d105      	bne.n	8001264 <receiveConnack+0xd8>
 8001258:	7ffb      	ldrb	r3, [r7, #31]
 800125a:	f083 0301 	eor.w	r3, r3, #1
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1cf      	bne.n	8001204 <receiveConnack+0x78>

    if( status == MQTTSuccess )
 8001264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001268:	2b00      	cmp	r3, #0
 800126a:	d121      	bne.n	80012b0 <receiveConnack+0x124>
    {
        /* Time taken in this function so far. */
        timeTakenMs = calculateElapsedTime( getTimeStamp(), entryTimeMs );
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	4798      	blx	r3
 8001270:	4603      	mov	r3, r0
 8001272:	6979      	ldr	r1, [r7, #20]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fa27 	bl	80006c8 <calculateElapsedTime>
 800127a:	6138      	str	r0, [r7, #16]

        if( timeTakenMs < timeoutMs )
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	429a      	cmp	r2, r3
 8001282:	d203      	bcs.n	800128c <receiveConnack+0x100>
        {
            /* Calculate remaining time for receiving the remainder of
             * the packet. */
            remainingTimeMs = timeoutMs - timeTakenMs;
 8001284:	68ba      	ldr	r2, [r7, #8]
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	623b      	str	r3, [r7, #32]
         * Invoking receivePacket with remainingTime as 0 would attempt to
         * recv from network once. If using retries, the remainder of the
         * CONNACK packet is tried to be read only once. Reading once would be
         * good as the packet type and remaining length was already read. Hence,
         * the probability of the remaining 2 bytes available to read is very high. */
        if( pIncomingPacket->type == MQTT_PACKET_TYPE_CONNACK )
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b20      	cmp	r3, #32
 8001292:	d10a      	bne.n	80012aa <receiveConnack+0x11e>
        {
            status = receivePacket( pContext,
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	6a3a      	ldr	r2, [r7, #32]
 8001298:	9200      	str	r2, [sp, #0]
 800129a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f7ff fb87 	bl	80009b0 <receivePacket>
 80012a2:	4603      	mov	r3, r0
 80012a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012a8:	e002      	b.n	80012b0 <receiveConnack+0x124>
        {
            LogError( ( "Incorrect packet type %X received while expecting"
                        " CONNACK(%X).",
                        ( unsigned int ) pIncomingPacket->type,
                        MQTT_PACKET_TYPE_CONNACK ) );
            status = MQTTBadResponse;
 80012aa:	2305      	movs	r3, #5
 80012ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    if( status == MQTTSuccess )
 80012b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d10b      	bne.n	80012d0 <receiveConnack+0x144>
    {
        /* Update the packet info pointer to the buffer read. */
        pIncomingPacket->pRemainingData = pContext->networkBuffer.pBuffer;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	605a      	str	r2, [r3, #4]

        /* Deserialize CONNACK. */
        status = MQTT_DeserializeAck( pIncomingPacket, NULL, pSessionPresent );
 80012c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012c2:	2100      	movs	r1, #0
 80012c4:	6838      	ldr	r0, [r7, #0]
 80012c6:	f001 fb10 	bl	80028ea <MQTT_DeserializeAck>
 80012ca:	4603      	mov	r3, r0
 80012cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If a clean session is requested, a session present should not be set by
     * broker. */
    if( status == MQTTSuccess )
 80012d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d109      	bne.n	80012ec <receiveConnack+0x160>
    {
        if( ( cleanSession == true ) && ( *pSessionPresent == true ) )
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d006      	beq.n	80012ec <receiveConnack+0x160>
 80012de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d002      	beq.n	80012ec <receiveConnack+0x160>
        {
            LogError( ( "Unexpected session present flag in CONNACK response from broker."
                        " CONNECT request with clean session was made with broker." ) );
            status = MQTTBadResponse;
 80012e6:	2305      	movs	r3, #5
 80012e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        LogError( ( "CONNACK recv failed with status = %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 80012ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3728      	adds	r7, #40	; 0x28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	0800e2c4 	.word	0x0800e2c4
 80012fc:	0800f2c0 	.word	0x0800f2c0
 8001300:	0800e22c 	.word	0x0800e22c
 8001304:	0800e428 	.word	0x0800e428
 8001308:	0800e2d8 	.word	0x0800e2d8

0800130c <handleSessionResumption>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleSessionResumption( MQTTContext_t * pContext,
                                             bool sessionPresent )
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	70fb      	strb	r3, [r7, #3]
    MQTTStatus_t status = MQTTSuccess;
 8001318:	2300      	movs	r3, #0
 800131a:	75fb      	strb	r3, [r7, #23]
    MQTTStateCursor_t cursor = MQTT_STATE_CURSOR_INITIALIZER;
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 8001320:	2300      	movs	r3, #0
 8001322:	82bb      	strh	r3, [r7, #20]
    MQTTPublishState_t state = MQTTStateNull;
 8001324:	2300      	movs	r3, #0
 8001326:	73fb      	strb	r3, [r7, #15]

    assert( pContext != NULL );
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d106      	bne.n	800133c <handleSessionResumption+0x30>
 800132e:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <handleSessionResumption+0xa4>)
 8001330:	4a20      	ldr	r2, [pc, #128]	; (80013b4 <handleSessionResumption+0xa8>)
 8001332:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001336:	4820      	ldr	r0, [pc, #128]	; (80013b8 <handleSessionResumption+0xac>)
 8001338:	f00b fc46 	bl	800cbc8 <__assert_func>

    if( sessionPresent == true )
 800133c:	78fb      	ldrb	r3, [r7, #3]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d023      	beq.n	800138a <handleSessionResumption+0x7e>
    {
        /* Get the next packet ID for which a PUBREL need to be resent. */
        packetId = MQTT_PubrelToResend( pContext, &cursor, &state );
 8001342:	f107 020f 	add.w	r2, r7, #15
 8001346:	f107 0310 	add.w	r3, r7, #16
 800134a:	4619      	mov	r1, r3
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f002 f8ce 	bl	80034ee <MQTT_PubrelToResend>
 8001352:	4603      	mov	r3, r0
 8001354:	82bb      	strh	r3, [r7, #20]

        /* Resend all the PUBREL acks after session is reestablished. */
        while( ( packetId != MQTT_PACKET_ID_INVALID ) &&
 8001356:	e011      	b.n	800137c <handleSessionResumption+0x70>
               ( status == MQTTSuccess ) )
        {
            status = sendPublishAcks( pContext, packetId, state );
 8001358:	7bfa      	ldrb	r2, [r7, #15]
 800135a:	8abb      	ldrh	r3, [r7, #20]
 800135c:	4619      	mov	r1, r3
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff fb9a 	bl	8000a98 <sendPublishAcks>
 8001364:	4603      	mov	r3, r0
 8001366:	75fb      	strb	r3, [r7, #23]

            packetId = MQTT_PubrelToResend( pContext, &cursor, &state );
 8001368:	f107 020f 	add.w	r2, r7, #15
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	4619      	mov	r1, r3
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f002 f8bb 	bl	80034ee <MQTT_PubrelToResend>
 8001378:	4603      	mov	r3, r0
 800137a:	82bb      	strh	r3, [r7, #20]
        while( ( packetId != MQTT_PACKET_ID_INVALID ) &&
 800137c:	8abb      	ldrh	r3, [r7, #20]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d010      	beq.n	80013a4 <handleSessionResumption+0x98>
 8001382:	7dfb      	ldrb	r3, [r7, #23]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0e7      	beq.n	8001358 <handleSessionResumption+0x4c>
 8001388:	e00c      	b.n	80013a4 <handleSessionResumption+0x98>
        }
    }
    else
    {
        /* Clear any existing records if a new session is established. */
        ( void ) memset( pContext->outgoingPublishRecords,
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2228      	movs	r2, #40	; 0x28
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f00b fc81 	bl	800cc98 <memset>
                         0x00,
                         sizeof( pContext->outgoingPublishRecords ) );
        ( void ) memset( pContext->incomingPublishRecords,
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3328      	adds	r3, #40	; 0x28
 800139a:	2228      	movs	r2, #40	; 0x28
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f00b fc7a 	bl	800cc98 <memset>
                         0x00,
                         sizeof( pContext->incomingPublishRecords ) );
    }

    return status;
 80013a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	0800e2c4 	.word	0x0800e2c4
 80013b4:	0800f2d0 	.word	0x0800f2d0
 80013b8:	0800e22c 	.word	0x0800e22c

080013bc <serializePublish>:

static MQTTStatus_t serializePublish( const MQTTContext_t * pContext,
                                      const MQTTPublishInfo_t * pPublishInfo,
                                      uint16_t packetId,
                                      size_t * const pHeaderSize )
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af02      	add	r7, sp, #8
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	4613      	mov	r3, r2
 80013ca:	80fb      	strh	r3, [r7, #6]
    MQTTStatus_t status = MQTTSuccess;
 80013cc:	2300      	movs	r3, #0
 80013ce:	77fb      	strb	r3, [r7, #31]
    size_t remainingLength = 0UL, packetSize = 0UL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]

    assert( pContext != NULL );
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d106      	bne.n	80013ec <serializePublish+0x30>
 80013de:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <serializePublish+0x98>)
 80013e0:	4a1d      	ldr	r2, [pc, #116]	; (8001458 <serializePublish+0x9c>)
 80013e2:	f44f 61cb 	mov.w	r1, #1624	; 0x658
 80013e6:	481d      	ldr	r0, [pc, #116]	; (800145c <serializePublish+0xa0>)
 80013e8:	f00b fbee 	bl	800cbc8 <__assert_func>
    assert( pPublishInfo != NULL );
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d106      	bne.n	8001400 <serializePublish+0x44>
 80013f2:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <serializePublish+0xa4>)
 80013f4:	4a18      	ldr	r2, [pc, #96]	; (8001458 <serializePublish+0x9c>)
 80013f6:	f240 6159 	movw	r1, #1625	; 0x659
 80013fa:	4818      	ldr	r0, [pc, #96]	; (800145c <serializePublish+0xa0>)
 80013fc:	f00b fbe4 	bl	800cbc8 <__assert_func>
    assert( pHeaderSize != NULL );
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d106      	bne.n	8001414 <serializePublish+0x58>
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <serializePublish+0xa8>)
 8001408:	4a13      	ldr	r2, [pc, #76]	; (8001458 <serializePublish+0x9c>)
 800140a:	f240 615a 	movw	r1, #1626	; 0x65a
 800140e:	4813      	ldr	r0, [pc, #76]	; (800145c <serializePublish+0xa0>)
 8001410:	f00b fbda 	bl	800cbc8 <__assert_func>

    /* Get the remaining length and packet size.*/
    status = MQTT_GetPublishPacketSize( pPublishInfo,
 8001414:	f107 0214 	add.w	r2, r7, #20
 8001418:	f107 0318 	add.w	r3, r7, #24
 800141c:	4619      	mov	r1, r3
 800141e:	68b8      	ldr	r0, [r7, #8]
 8001420:	f001 f904 	bl	800262c <MQTT_GetPublishPacketSize>
 8001424:	4603      	mov	r3, r0
 8001426:	77fb      	strb	r3, [r7, #31]
                                        &packetSize );
    LogDebug( ( "PUBLISH packet size is %lu and remaining length is %lu.",
                ( unsigned long ) packetSize,
                ( unsigned long ) remainingLength ) );

    if( status == MQTTSuccess )
 8001428:	7ffb      	ldrb	r3, [r7, #31]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10c      	bne.n	8001448 <serializePublish+0x8c>
    {
        status = MQTT_SerializePublishHeader( pPublishInfo,
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8001436:	88f9      	ldrh	r1, [r7, #6]
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	4603      	mov	r3, r0
 800143e:	68b8      	ldr	r0, [r7, #8]
 8001440:	f001 f925 	bl	800268e <MQTT_SerializePublishHeader>
 8001444:	4603      	mov	r3, r0
 8001446:	77fb      	strb	r3, [r7, #31]
                                              pHeaderSize );
        LogDebug( ( "Serialized PUBLISH header size is %lu.",
                    ( unsigned long ) *pHeaderSize ) );
    }

    return status;
 8001448:	7ffb      	ldrb	r3, [r7, #31]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3720      	adds	r7, #32
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	0800e2c4 	.word	0x0800e2c4
 8001458:	0800f2e8 	.word	0x0800f2e8
 800145c:	0800e22c 	.word	0x0800e22c
 8001460:	0800e460 	.word	0x0800e460
 8001464:	0800e4d4 	.word	0x0800e4d4

08001468 <validatePublishParams>:
/*-----------------------------------------------------------*/

static MQTTStatus_t validatePublishParams( const MQTTContext_t * pContext,
                                           const MQTTPublishInfo_t * pPublishInfo,
                                           uint16_t packetId )
{
 8001468:	b480      	push	{r7}
 800146a:	b087      	sub	sp, #28
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	4613      	mov	r3, r2
 8001474:	80fb      	strh	r3, [r7, #6]
    MQTTStatus_t status = MQTTSuccess;
 8001476:	2300      	movs	r3, #0
 8001478:	75fb      	strb	r3, [r7, #23]

    /* Validate arguments. */
    if( ( pContext == NULL ) || ( pPublishInfo == NULL ) )
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d002      	beq.n	8001486 <validatePublishParams+0x1e>
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d102      	bne.n	800148c <validatePublishParams+0x24>
    {
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pPublishInfo=%p.",
                    ( void * ) pContext,
                    ( void * ) pPublishInfo ) );
        status = MQTTBadParameter;
 8001486:	2301      	movs	r3, #1
 8001488:	75fb      	strb	r3, [r7, #23]
 800148a:	e013      	b.n	80014b4 <validatePublishParams+0x4c>
    }
    else if( ( pPublishInfo->qos != MQTTQoS0 ) && ( packetId == 0U ) )
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d005      	beq.n	80014a0 <validatePublishParams+0x38>
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d102      	bne.n	80014a0 <validatePublishParams+0x38>
    {
        LogError( ( "Packet Id is 0 for PUBLISH with QoS=%u.",
                    ( unsigned int ) pPublishInfo->qos ) );
        status = MQTTBadParameter;
 800149a:	2301      	movs	r3, #1
 800149c:	75fb      	strb	r3, [r7, #23]
 800149e:	e009      	b.n	80014b4 <validatePublishParams+0x4c>
    }
    else if( ( pPublishInfo->payloadLength > 0U ) && ( pPublishInfo->pPayload == NULL ) )
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d005      	beq.n	80014b4 <validatePublishParams+0x4c>
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <validatePublishParams+0x4c>
    {
        LogError( ( "A nonzero payload length requires a non-NULL payload: "
                    "payloadLength=%lu, pPayload=%p.",
                    ( unsigned long ) pPublishInfo->payloadLength,
                    pPublishInfo->pPayload ) );
        status = MQTTBadParameter;
 80014b0:	2301      	movs	r3, #1
 80014b2:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    return status;
 80014b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	371c      	adds	r7, #28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <MQTT_Init>:
MQTTStatus_t MQTT_Init( MQTTContext_t * pContext,
                        const TransportInterface_t * pTransportInterface,
                        MQTTGetCurrentTimeFunc_t getTimeFunction,
                        MQTTEventCallback_t userCallback,
                        const MQTTFixedBuffer_t * pNetworkBuffer )
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	60f8      	str	r0, [r7, #12]
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 80014d0:	2300      	movs	r3, #0
 80014d2:	75fb      	strb	r3, [r7, #23]

    /* Validate arguments. */
    if( ( pContext == NULL ) || ( pTransportInterface == NULL ) ||
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d005      	beq.n	80014e6 <MQTT_Init+0x24>
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d002      	beq.n	80014e6 <MQTT_Init+0x24>
 80014e0:	6a3b      	ldr	r3, [r7, #32]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d102      	bne.n	80014ec <MQTT_Init+0x2a>
                    "pTransportInterface=%p, "
                    "pNetworkBuffer=%p",
                    ( void * ) pContext,
                    ( void * ) pTransportInterface,
                    ( void * ) pNetworkBuffer ) );
        status = MQTTBadParameter;
 80014e6:	2301      	movs	r3, #1
 80014e8:	75fb      	strb	r3, [r7, #23]
 80014ea:	e039      	b.n	8001560 <MQTT_Init+0x9e>
    }
    else if( getTimeFunction == NULL )
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d102      	bne.n	80014f8 <MQTT_Init+0x36>
    {
        LogError( ( "Invalid parameter: getTimeFunction is NULL" ) );
        status = MQTTBadParameter;
 80014f2:	2301      	movs	r3, #1
 80014f4:	75fb      	strb	r3, [r7, #23]
 80014f6:	e033      	b.n	8001560 <MQTT_Init+0x9e>
    }
    else if( userCallback == NULL )
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d102      	bne.n	8001504 <MQTT_Init+0x42>
    {
        LogError( ( "Invalid parameter: userCallback is NULL" ) );
        status = MQTTBadParameter;
 80014fe:	2301      	movs	r3, #1
 8001500:	75fb      	strb	r3, [r7, #23]
 8001502:	e02d      	b.n	8001560 <MQTT_Init+0x9e>
    }
    else if( pTransportInterface->recv == NULL )
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d102      	bne.n	8001512 <MQTT_Init+0x50>
    {
        LogError( ( "Invalid parameter: pTransportInterface->recv is NULL" ) );
        status = MQTTBadParameter;
 800150c:	2301      	movs	r3, #1
 800150e:	75fb      	strb	r3, [r7, #23]
 8001510:	e026      	b.n	8001560 <MQTT_Init+0x9e>
    }
    else if( pTransportInterface->send == NULL )
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d102      	bne.n	8001520 <MQTT_Init+0x5e>
    {
        LogError( ( "Invalid parameter: pTransportInterface->send is NULL" ) );
        status = MQTTBadParameter;
 800151a:	2301      	movs	r3, #1
 800151c:	75fb      	strb	r3, [r7, #23]
 800151e:	e01f      	b.n	8001560 <MQTT_Init+0x9e>
    }
    else
    {
        ( void ) memset( pContext, 0x00, sizeof( MQTTContext_t ) );
 8001520:	2280      	movs	r2, #128	; 0x80
 8001522:	2100      	movs	r1, #0
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f00b fbb7 	bl	800cc98 <memset>

        pContext->connectStatus = MQTTNotConnected;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
        pContext->transportInterface = *pTransportInterface;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	68ba      	ldr	r2, [r7, #8]
 8001536:	3350      	adds	r3, #80	; 0x50
 8001538:	ca07      	ldmia	r2, {r0, r1, r2}
 800153a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        pContext->getTime = getTimeFunction;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	669a      	str	r2, [r3, #104]	; 0x68
        pContext->appCallback = userCallback;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	66da      	str	r2, [r3, #108]	; 0x6c
        pContext->networkBuffer = *pNetworkBuffer;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6a3a      	ldr	r2, [r7, #32]
 800154e:	335c      	adds	r3, #92	; 0x5c
 8001550:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001554:	e883 0003 	stmia.w	r3, {r0, r1}

        /* Zero is not a valid packet ID per MQTT spec. Start from 1. */
        pContext->nextPacketId = 1;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2201      	movs	r2, #1
 800155c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    }

    return status;
 8001560:	7dfb      	ldrb	r3, [r7, #23]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <MQTT_Connect>:
MQTTStatus_t MQTT_Connect( MQTTContext_t * pContext,
                           const MQTTConnectInfo_t * pConnectInfo,
                           const MQTTPublishInfo_t * pWillInfo,
                           uint32_t timeoutMs,
                           bool * pSessionPresent )
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b08e      	sub	sp, #56	; 0x38
 800156e:	af02      	add	r7, sp, #8
 8001570:	60f8      	str	r0, [r7, #12]
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	603b      	str	r3, [r7, #0]
    size_t remainingLength = 0UL, packetSize = 0UL;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
 800157c:	2300      	movs	r3, #0
 800157e:	623b      	str	r3, [r7, #32]
    int32_t bytesSent;
    MQTTStatus_t status = MQTTSuccess;
 8001580:	2300      	movs	r3, #0
 8001582:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    MQTTPacketInfo_t incomingPacket = { 0 };
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]

    incomingPacket.type = ( uint8_t ) 0;
 8001592:	2300      	movs	r3, #0
 8001594:	753b      	strb	r3, [r7, #20]

    if( ( pContext == NULL ) || ( pConnectInfo == NULL ) || ( pSessionPresent == NULL ) )
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d005      	beq.n	80015a8 <MQTT_Connect+0x3e>
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d002      	beq.n	80015a8 <MQTT_Connect+0x3e>
 80015a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <MQTT_Connect+0x44>
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pConnectInfo=%p, pSessionPresent=%p.",
                    ( void * ) pContext,
                    ( void * ) pConnectInfo,
                    ( void * ) pSessionPresent ) );
        status = MQTTBadParameter;
 80015a8:	2301      	movs	r3, #1
 80015aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 80015ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10a      	bne.n	80015cc <MQTT_Connect+0x62>
    {
        /* Get MQTT connect packet size and remaining length. */
        status = MQTT_GetConnectPacketSize( pConnectInfo,
 80015b6:	f107 0320 	add.w	r3, r7, #32
 80015ba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	68b8      	ldr	r0, [r7, #8]
 80015c2:	f000 ff87 	bl	80024d4 <MQTT_GetConnectPacketSize>
 80015c6:	4603      	mov	r3, r0
 80015c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        LogDebug( ( "CONNECT packet size is %lu and remaining length is %lu.",
                    ( unsigned long ) packetSize,
                    ( unsigned long ) remainingLength ) );
    }

    if( status == MQTTSuccess )
 80015cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d109      	bne.n	80015e8 <MQTT_Connect+0x7e>
    {
        status = MQTT_SerializeConnect( pConnectInfo,
 80015d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
                                        pWillInfo,
                                        remainingLength,
                                        &( pContext->networkBuffer ) );
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	335c      	adds	r3, #92	; 0x5c
        status = MQTT_SerializeConnect( pConnectInfo,
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	68b8      	ldr	r0, [r7, #8]
 80015de:	f000 ffe5 	bl	80025ac <MQTT_SerializeConnect>
 80015e2:	4603      	mov	r3, r0
 80015e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 80015e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d10f      	bne.n	8001610 <MQTT_Connect+0xa6>
    {
        bytesSent = sendPacket( pContext,
                                pContext->networkBuffer.pBuffer,
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        bytesSent = sendPacket( pContext,
 80015f4:	6a3a      	ldr	r2, [r7, #32]
 80015f6:	4619      	mov	r1, r3
 80015f8:	68f8      	ldr	r0, [r7, #12]
 80015fa:	f7fe ffc3 	bl	8000584 <sendPacket>
 80015fe:	62b8      	str	r0, [r7, #40]	; 0x28
                                packetSize );

        if( bytesSent < ( int32_t ) packetSize )
 8001600:	6a3b      	ldr	r3, [r7, #32]
 8001602:	461a      	mov	r2, r3
 8001604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001606:	4293      	cmp	r3, r2
 8001608:	da02      	bge.n	8001610 <MQTT_Connect+0xa6>
        {
            LogError( ( "Transport send failed for CONNECT packet." ) );
            status = MQTTSendFailed;
 800160a:	2303      	movs	r3, #3
 800160c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        ( long int ) bytesSent ) );
        }
    }

    /* Read CONNACK from transport layer. */
    if( status == MQTTSuccess )
 8001610:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10d      	bne.n	8001634 <MQTT_Connect+0xca>
    {
        status = receiveConnack( pContext,
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	781a      	ldrb	r2, [r3, #0]
 800161c:	f107 0114 	add.w	r1, r7, #20
 8001620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	460b      	mov	r3, r1
 8001626:	6839      	ldr	r1, [r7, #0]
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f7ff fdaf 	bl	800118c <receiveConnack>
 800162e:	4603      	mov	r3, r0
 8001630:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                 pConnectInfo->cleanSession,
                                 &incomingPacket,
                                 pSessionPresent );
    }

    if( status == MQTTSuccess )
 8001634:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001638:	2b00      	cmp	r3, #0
 800163a:	d108      	bne.n	800164e <MQTT_Connect+0xe4>
    {
        /* Resend PUBRELs when reestablishing a session, or clear records for new sessions. */
        status = handleSessionResumption( pContext, *pSessionPresent );
 800163c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4619      	mov	r1, r3
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f7ff fe62 	bl	800130c <handleSessionResumption>
 8001648:	4603      	mov	r3, r0
 800164a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800164e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10f      	bne.n	8001676 <MQTT_Connect+0x10c>
    {
        LogInfo( ( "MQTT connection established with the broker." ) );
        pContext->connectStatus = MQTTConnected;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
        /* Initialize keep-alive fields after a successful connection. */
        pContext->keepAliveIntervalSec = pConnectInfo->keepAliveSeconds;
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	885a      	ldrh	r2, [r3, #2]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        pContext->waitingForPingResp = false;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
        pContext->pingReqSendTimeMs = 0U;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2200      	movs	r2, #0
 8001674:	679a      	str	r2, [r3, #120]	; 0x78
    {
        LogError( ( "MQTT connection failed with status = %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 8001676:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800167a:	4618      	mov	r0, r3
 800167c:	3730      	adds	r7, #48	; 0x30
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <MQTT_Publish>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_Publish( MQTTContext_t * pContext,
                           const MQTTPublishInfo_t * pPublishInfo,
                           uint16_t packetId )
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b08a      	sub	sp, #40	; 0x28
 8001686:	af02      	add	r7, sp, #8
 8001688:	60f8      	str	r0, [r7, #12]
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	4613      	mov	r3, r2
 800168e:	80fb      	strh	r3, [r7, #6]
    size_t headerSize = 0UL;
 8001690:	2300      	movs	r3, #0
 8001692:	61bb      	str	r3, [r7, #24]
    MQTTPublishState_t publishStatus = MQTTStateNull;
 8001694:	2300      	movs	r3, #0
 8001696:	75fb      	strb	r3, [r7, #23]

    /* Validate arguments. */
    MQTTStatus_t status = validatePublishParams( pContext, pPublishInfo, packetId );
 8001698:	88fb      	ldrh	r3, [r7, #6]
 800169a:	461a      	mov	r2, r3
 800169c:	68b9      	ldr	r1, [r7, #8]
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f7ff fee2 	bl	8001468 <validatePublishParams>
 80016a4:	4603      	mov	r3, r0
 80016a6:	77fb      	strb	r3, [r7, #31]

    if( status == MQTTSuccess )
 80016a8:	7ffb      	ldrb	r3, [r7, #31]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d108      	bne.n	80016c0 <MQTT_Publish+0x3e>
    {
        /* Serialize PUBLISH packet. */
        status = serializePublish( pContext,
 80016ae:	f107 0318 	add.w	r3, r7, #24
 80016b2:	88fa      	ldrh	r2, [r7, #6]
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f7ff fe80 	bl	80013bc <serializePublish>
 80016bc:	4603      	mov	r3, r0
 80016be:	77fb      	strb	r3, [r7, #31]
                                   pPublishInfo,
                                   packetId,
                                   &headerSize );
    }

    if( ( status == MQTTSuccess ) && ( pPublishInfo->qos > MQTTQoS0 ) )
 80016c0:	7ffb      	ldrb	r3, [r7, #31]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d115      	bne.n	80016f2 <MQTT_Publish+0x70>
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d011      	beq.n	80016f2 <MQTT_Publish+0x70>
    {
        /* Reserve state for publish message. Only to be done for QoS1 or QoS2. */
        status = MQTT_ReserveState( pContext,
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	781a      	ldrb	r2, [r3, #0]
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	4619      	mov	r1, r3
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f001 fdd8 	bl	800328c <MQTT_ReserveState>
 80016dc:	4603      	mov	r3, r0
 80016de:	77fb      	strb	r3, [r7, #31]
                                    pPublishInfo->qos );

        /* State already exists for a duplicate packet.
         * If a state doesn't exist, it will be handled as a new publish in
         * state engine. */
        if( ( status == MQTTStateCollision ) && ( pPublishInfo->dup == true ) )
 80016e0:	7ffb      	ldrb	r3, [r7, #31]
 80016e2:	2b09      	cmp	r3, #9
 80016e4:	d105      	bne.n	80016f2 <MQTT_Publish+0x70>
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	789b      	ldrb	r3, [r3, #2]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MQTT_Publish+0x70>
        {
            status = MQTTSuccess;
 80016ee:	2300      	movs	r3, #0
 80016f0:	77fb      	strb	r3, [r7, #31]
        }
    }

    if( status == MQTTSuccess )
 80016f2:	7ffb      	ldrb	r3, [r7, #31]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d107      	bne.n	8001708 <MQTT_Publish+0x86>
    {
        /* Sends the serialized publish packet over network. */
        status = sendPublish( pContext,
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	461a      	mov	r2, r3
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f7ff fcca 	bl	8001098 <sendPublish>
 8001704:	4603      	mov	r3, r0
 8001706:	77fb      	strb	r3, [r7, #31]
                              pPublishInfo,
                              headerSize );
    }

    if( ( status == MQTTSuccess ) && ( pPublishInfo->qos > MQTTQoS0 ) )
 8001708:	7ffb      	ldrb	r3, [r7, #31]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d110      	bne.n	8001730 <MQTT_Publish+0xae>
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00c      	beq.n	8001730 <MQTT_Publish+0xae>
    {
        /* Update state machine after PUBLISH is sent.
         * Only to be done for QoS1 or QoS2. */
        status = MQTT_UpdateStatePublish( pContext,
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	781a      	ldrb	r2, [r3, #0]
 800171a:	88f9      	ldrh	r1, [r7, #6]
 800171c:	f107 0317 	add.w	r3, r7, #23
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	4613      	mov	r3, r2
 8001724:	2200      	movs	r2, #0
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	f001 fe07 	bl	800333a <MQTT_UpdateStatePublish>
 800172c:	4603      	mov	r3, r0
 800172e:	77fb      	strb	r3, [r7, #31]
    {
        LogError( ( "MQTT PUBLISH failed with status %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 8001730:	7ffb      	ldrb	r3, [r7, #31]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3720      	adds	r7, #32
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <MQTT_Ping>:

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_Ping( MQTTContext_t * pContext )
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
    int32_t bytesSent = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
    MQTTStatus_t status = MQTTSuccess;
 8001746:	2300      	movs	r3, #0
 8001748:	75fb      	strb	r3, [r7, #23]
    size_t packetSize = 0U;
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]

    if( pContext == NULL )
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <MQTT_Ping+0x1e>
    {
        LogError( ( "pContext is NULL." ) );
        status = MQTTBadParameter;
 8001754:	2301      	movs	r3, #1
 8001756:	75fb      	strb	r3, [r7, #23]
    }

    if( status == MQTTSuccess )
 8001758:	7dfb      	ldrb	r3, [r7, #23]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d106      	bne.n	800176c <MQTT_Ping+0x32>
    {
        /* Get MQTT PINGREQ packet size. */
        status = MQTT_GetPingreqPacketSize( &packetSize );
 800175e:	f107 030c 	add.w	r3, r7, #12
 8001762:	4618      	mov	r0, r3
 8001764:	f001 f84d 	bl	8002802 <MQTT_GetPingreqPacketSize>
 8001768:	4603      	mov	r3, r0
 800176a:	75fb      	strb	r3, [r7, #23]
        {
            LogError( ( "Failed to get the PINGREQ packet size." ) );
        }
    }

    if( status == MQTTSuccess )
 800176c:	7dfb      	ldrb	r3, [r7, #23]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d106      	bne.n	8001780 <MQTT_Ping+0x46>
    {
        /* Serialize MQTT PINGREQ. */
        status = MQTT_SerializePingreq( &( pContext->networkBuffer ) );
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	335c      	adds	r3, #92	; 0x5c
 8001776:	4618      	mov	r0, r3
 8001778:	f001 f859 	bl	800282e <MQTT_SerializePingreq>
 800177c:	4603      	mov	r3, r0
 800177e:	75fb      	strb	r3, [r7, #23]
    }

    if( status == MQTTSuccess )
 8001780:	7dfb      	ldrb	r3, [r7, #23]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d117      	bne.n	80017b6 <MQTT_Ping+0x7c>
    {
        /* Send the serialized PINGREQ packet to transport layer. */
        bytesSent = sendPacket( pContext,
                                pContext->networkBuffer.pBuffer,
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        bytesSent = sendPacket( pContext,
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	4619      	mov	r1, r3
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7fe fef8 	bl	8000584 <sendPacket>
 8001794:	6138      	str	r0, [r7, #16]
                                packetSize );

        /* It is an error to not send the entire PINGREQ packet. */
        if( bytesSent < ( int32_t ) packetSize )
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	461a      	mov	r2, r3
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	4293      	cmp	r3, r2
 800179e:	da02      	bge.n	80017a6 <MQTT_Ping+0x6c>
        {
            LogError( ( "Transport send failed for PINGREQ packet." ) );
            status = MQTTSendFailed;
 80017a0:	2303      	movs	r3, #3
 80017a2:	75fb      	strb	r3, [r7, #23]
 80017a4:	e007      	b.n	80017b6 <MQTT_Ping+0x7c>
        }
        else
        {
            pContext->pingReqSendTimeMs = pContext->lastPacketTime;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	679a      	str	r2, [r3, #120]	; 0x78
            pContext->waitingForPingResp = true;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            LogDebug( ( "Sent %ld bytes of PINGREQ packet.",
                        ( long int ) bytesSent ) );
        }
    }

    return status;
 80017b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <MQTT_ReceiveLoop>:

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ReceiveLoop( MQTTContext_t * pContext,
                               uint32_t timeoutMs )
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTBadParameter;
 80017ca:	2301      	movs	r3, #1
 80017cc:	75fb      	strb	r3, [r7, #23]
    uint32_t entryTimeMs = 0U, remainingTimeMs = timeoutMs, elapsedTimeMs = 0U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]

    if( pContext == NULL )
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d029      	beq.n	8001834 <MQTT_ReceiveLoop+0x74>
    {
        LogError( ( "Invalid input parameter: MQTT Context cannot be NULL." ) );
    }
    else if( pContext->getTime == NULL )
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d025      	beq.n	8001834 <MQTT_ReceiveLoop+0x74>
    {
        LogError( ( "Invalid input parameter: MQTT Context must have a valid getTime function." ) );
    }
    else if( pContext->networkBuffer.pBuffer == NULL )
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d021      	beq.n	8001834 <MQTT_ReceiveLoop+0x74>
    {
        LogError( ( "Invalid input parameter: MQTT context's networkBuffer must not be NULL." ) );
    }
    else
    {
        entryTimeMs = pContext->getTime();
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80017f4:	4798      	blx	r3
 80017f6:	6138      	str	r0, [r7, #16]
        status = MQTTSuccess;
 80017f8:	2300      	movs	r3, #0
 80017fa:	75fb      	strb	r3, [r7, #23]
    }

    while( status == MQTTSuccess )
 80017fc:	e01a      	b.n	8001834 <MQTT_ReceiveLoop+0x74>
    {
        status = receiveSingleIteration( pContext, remainingTimeMs, false );
 80017fe:	2200      	movs	r2, #0
 8001800:	68f9      	ldr	r1, [r7, #12]
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff fbd2 	bl	8000fac <receiveSingleIteration>
 8001808:	4603      	mov	r3, r0
 800180a:	75fb      	strb	r3, [r7, #23]

        /* We don't need to break here since the status is already checked in
         * the loop condition, and we do not want multiple breaks in a loop. */
        if( status != MQTTSuccess )
 800180c:	7dfb      	ldrb	r3, [r7, #23]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d110      	bne.n	8001834 <MQTT_ReceiveLoop+0x74>
        }
        else
        {
            /* Recalculate remaining time and check if loop should exit. This is
             * done at the end so the loop will run at least a single iteration. */
            elapsedTimeMs = calculateElapsedTime( pContext->getTime(), entryTimeMs );
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001816:	4798      	blx	r3
 8001818:	4603      	mov	r3, r0
 800181a:	6939      	ldr	r1, [r7, #16]
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe ff53 	bl	80006c8 <calculateElapsedTime>
 8001822:	60b8      	str	r0, [r7, #8]

            if( elapsedTimeMs >= timeoutMs )
 8001824:	68ba      	ldr	r2, [r7, #8]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d207      	bcs.n	800183c <MQTT_ReceiveLoop+0x7c>
            {
                break;
            }

            remainingTimeMs = timeoutMs - elapsedTimeMs;
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	60fb      	str	r3, [r7, #12]
    while( status == MQTTSuccess )
 8001834:	7dfb      	ldrb	r3, [r7, #23]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0e1      	beq.n	80017fe <MQTT_ReceiveLoop+0x3e>
 800183a:	e000      	b.n	800183e <MQTT_ReceiveLoop+0x7e>
                break;
 800183c:	bf00      	nop
        }
    }

    return status;
 800183e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <MQTT_GetPacketId>:

/*-----------------------------------------------------------*/

uint16_t MQTT_GetPacketId( MQTTContext_t * pContext )
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
    uint16_t packetId = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	81fb      	strh	r3, [r7, #14]

    if( pContext != NULL )
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d017      	beq.n	800188a <MQTT_GetPacketId+0x42>
    {
        packetId = pContext->nextPacketId;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8001860:	81fb      	strh	r3, [r7, #14]

        /* A packet ID of zero is not a valid packet ID. When the max ID
         * is reached the next one should start at 1. */
        if( pContext->nextPacketId == ( uint16_t ) UINT16_MAX )
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8001868:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800186c:	4293      	cmp	r3, r2
 800186e:	d104      	bne.n	800187a <MQTT_GetPacketId+0x32>
        {
            pContext->nextPacketId = 1;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 8001878:	e007      	b.n	800188a <MQTT_GetPacketId+0x42>
        }
        else
        {
            pContext->nextPacketId++;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8001880:	3301      	adds	r3, #1
 8001882:	b29a      	uxth	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
        }
    }

    return packetId;
 800188a:	89fb      	ldrh	r3, [r7, #14]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <remainingLengthEncodedSize>:
static MQTTStatus_t deserializePingresp( const MQTTPacketInfo_t * pPingresp );

/*-----------------------------------------------------------*/

static size_t remainingLengthEncodedSize( size_t length )
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

    /* Determine how many bytes are needed to encode length.
     * The values below are taken from the MQTT 3.1.1 spec. */

    /* 1 byte is needed to encode lengths between 0 and 127. */
    if( length < 128U )
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b7f      	cmp	r3, #127	; 0x7f
 80018a4:	d802      	bhi.n	80018ac <remainingLengthEncodedSize+0x14>
    {
        encodedSize = 1U;
 80018a6:	2301      	movs	r3, #1
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	e00f      	b.n	80018cc <remainingLengthEncodedSize+0x34>
    }
    /* 2 bytes are needed to encode lengths between 128 and 16,383. */
    else if( length < 16384U )
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018b2:	d202      	bcs.n	80018ba <remainingLengthEncodedSize+0x22>
    {
        encodedSize = 2U;
 80018b4:	2302      	movs	r3, #2
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	e008      	b.n	80018cc <remainingLengthEncodedSize+0x34>
    }
    /* 3 bytes are needed to encode lengths between 16,384 and 2,097,151. */
    else if( length < 2097152U )
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018c0:	d202      	bcs.n	80018c8 <remainingLengthEncodedSize+0x30>
    {
        encodedSize = 3U;
 80018c2:	2303      	movs	r3, #3
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	e001      	b.n	80018cc <remainingLengthEncodedSize+0x34>
    }
    /* 4 bytes are needed to encode lengths between 2,097,152 and 268,435,455. */
    else
    {
        encodedSize = 4U;
 80018c8:	2304      	movs	r3, #4
 80018ca:	60fb      	str	r3, [r7, #12]

    LogDebug( ( "Encoded size for length %lu is %lu bytes.",
                ( unsigned long ) length,
                ( unsigned long ) encodedSize ) );

    return encodedSize;
 80018cc:	68fb      	ldr	r3, [r7, #12]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <encodeRemainingLength>:

/*-----------------------------------------------------------*/

static uint8_t * encodeRemainingLength( uint8_t * pDestination,
                                        size_t length )
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
    uint8_t lengthByte;
    uint8_t * pLengthEnd = NULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
    size_t remainingLength = length;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	60fb      	str	r3, [r7, #12]

    assert( pDestination != NULL );
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d106      	bne.n	8001902 <encodeRemainingLength+0x26>
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <encodeRemainingLength+0x64>)
 80018f6:	4a13      	ldr	r2, [pc, #76]	; (8001944 <encodeRemainingLength+0x68>)
 80018f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80018fc:	4812      	ldr	r0, [pc, #72]	; (8001948 <encodeRemainingLength+0x6c>)
 80018fe:	f00b f963 	bl	800cbc8 <__assert_func>

    pLengthEnd = pDestination;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	613b      	str	r3, [r7, #16]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        lengthByte = ( uint8_t ) ( remainingLength % 128U );
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800190e:	75fb      	strb	r3, [r7, #23]
        remainingLength = remainingLength / 128U;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	09db      	lsrs	r3, r3, #7
 8001914:	60fb      	str	r3, [r7, #12]

        /* Set the high bit of this byte, indicating that there's more data. */
        if( remainingLength > 0U )
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <encodeRemainingLength+0x48>
        {
            UINT8_SET_BIT( lengthByte, 7 );
 800191c:	7dfb      	ldrb	r3, [r7, #23]
 800191e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001922:	75fb      	strb	r3, [r7, #23]
        }

        /* Output a single encoded byte. */
        *pLengthEnd = lengthByte;
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	7dfa      	ldrb	r2, [r7, #23]
 8001928:	701a      	strb	r2, [r3, #0]
        pLengthEnd++;
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	3301      	adds	r3, #1
 800192e:	613b      	str	r3, [r7, #16]
    } while( remainingLength > 0U );
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1e7      	bne.n	8001906 <encodeRemainingLength+0x2a>

    return pLengthEnd;
 8001936:	693b      	ldr	r3, [r7, #16]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	0800e6c0 	.word	0x0800e6c0
 8001944:	0800f2fc 	.word	0x0800f2fc
 8001948:	0800e6d8 	.word	0x0800e6d8

0800194c <encodeString>:
/*-----------------------------------------------------------*/

static uint8_t * encodeString( uint8_t * pDestination,
                               const char * pSource,
                               uint16_t sourceLength )
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	4613      	mov	r3, r2
 8001958:	80fb      	strh	r3, [r7, #6]
    uint8_t * pBuffer = NULL;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]

    /* Typecast const char * typed source buffer to const uint8_t *.
     * This is to use same type buffers in memcpy. */
    const uint8_t * pSourceBuffer = ( const uint8_t * ) pSource;
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	613b      	str	r3, [r7, #16]

    assert( pDestination != NULL );
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d106      	bne.n	8001976 <encodeString+0x2a>
 8001968:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <encodeString+0x74>)
 800196a:	4a16      	ldr	r2, [pc, #88]	; (80019c4 <encodeString+0x78>)
 800196c:	f240 11fd 	movw	r1, #509	; 0x1fd
 8001970:	4815      	ldr	r0, [pc, #84]	; (80019c8 <encodeString+0x7c>)
 8001972:	f00b f929 	bl	800cbc8 <__assert_func>

    pBuffer = pDestination;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	617b      	str	r3, [r7, #20]

    /* The first byte of a UTF-8 string is the high byte of the string length. */
    *pBuffer = UINT16_HIGH_BYTE( sourceLength );
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	0a1b      	lsrs	r3, r3, #8
 800197e:	b29b      	uxth	r3, r3
 8001980:	b2da      	uxtb	r2, r3
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3301      	adds	r3, #1
 800198a:	617b      	str	r3, [r7, #20]

    /* The second byte of a UTF-8 string is the low byte of the string length. */
    *pBuffer = UINT16_LOW_BYTE( sourceLength );
 800198c:	88fb      	ldrh	r3, [r7, #6]
 800198e:	b2da      	uxtb	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	3301      	adds	r3, #1
 8001998:	617b      	str	r3, [r7, #20]

    /* Copy the string into pBuffer. */
    if( pSourceBuffer != NULL )
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <encodeString+0x60>
    {
        ( void ) memcpy( pBuffer, pSourceBuffer, sourceLength );
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	461a      	mov	r2, r3
 80019a4:	6939      	ldr	r1, [r7, #16]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f00b f968 	bl	800cc7c <memcpy>
    }

    /* Return the pointer to the end of the encoded string. */
    pBuffer += sourceLength;
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	4413      	add	r3, r2
 80019b2:	617b      	str	r3, [r7, #20]

    return pBuffer;
 80019b4:	697b      	ldr	r3, [r7, #20]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	0800e6c0 	.word	0x0800e6c0
 80019c4:	0800f314 	.word	0x0800f314
 80019c8:	0800e6d8 	.word	0x0800e6d8

080019cc <calculatePublishPacketSize>:
/*-----------------------------------------------------------*/

static bool calculatePublishPacketSize( const MQTTPublishInfo_t * pPublishInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
    bool status = true;
 80019d8:	2301      	movs	r3, #1
 80019da:	77fb      	strb	r3, [r7, #31]
    size_t packetSize = 0, payloadLimit = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	61bb      	str	r3, [r7, #24]
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]

    assert( pPublishInfo != NULL );
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d106      	bne.n	80019f8 <calculatePublishPacketSize+0x2c>
 80019ea:	4b2e      	ldr	r3, [pc, #184]	; (8001aa4 <calculatePublishPacketSize+0xd8>)
 80019ec:	4a2e      	ldr	r2, [pc, #184]	; (8001aa8 <calculatePublishPacketSize+0xdc>)
 80019ee:	f240 211e 	movw	r1, #542	; 0x21e
 80019f2:	482e      	ldr	r0, [pc, #184]	; (8001aac <calculatePublishPacketSize+0xe0>)
 80019f4:	f00b f8e8 	bl	800cbc8 <__assert_func>
    assert( pRemainingLength != NULL );
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d106      	bne.n	8001a0c <calculatePublishPacketSize+0x40>
 80019fe:	4b2c      	ldr	r3, [pc, #176]	; (8001ab0 <calculatePublishPacketSize+0xe4>)
 8001a00:	4a29      	ldr	r2, [pc, #164]	; (8001aa8 <calculatePublishPacketSize+0xdc>)
 8001a02:	f240 211f 	movw	r1, #543	; 0x21f
 8001a06:	4829      	ldr	r0, [pc, #164]	; (8001aac <calculatePublishPacketSize+0xe0>)
 8001a08:	f00b f8de 	bl	800cbc8 <__assert_func>
    assert( pPacketSize != NULL );
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d106      	bne.n	8001a20 <calculatePublishPacketSize+0x54>
 8001a12:	4b28      	ldr	r3, [pc, #160]	; (8001ab4 <calculatePublishPacketSize+0xe8>)
 8001a14:	4a24      	ldr	r2, [pc, #144]	; (8001aa8 <calculatePublishPacketSize+0xdc>)
 8001a16:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001a1a:	4824      	ldr	r0, [pc, #144]	; (8001aac <calculatePublishPacketSize+0xe0>)
 8001a1c:	f00b f8d4 	bl	800cbc8 <__assert_func>

    /* The variable header of a PUBLISH packet always contains the topic name.
     * The first 2 bytes of UTF-8 string contains length of the string.
     */
    packetSize += pPublishInfo->topicNameLength + sizeof( uint16_t );
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	891b      	ldrh	r3, [r3, #8]
 8001a24:	461a      	mov	r2, r3
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	4413      	add	r3, r2
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	61bb      	str	r3, [r7, #24]

    /* The variable header of a QoS 1 or 2 PUBLISH packet contains a 2-byte
     * packet identifier. */
    if( pPublishInfo->qos > MQTTQoS0 )
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d002      	beq.n	8001a3c <calculatePublishPacketSize+0x70>
    {
        packetSize += sizeof( uint16_t );
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	3302      	adds	r3, #2
 8001a3a:	61bb      	str	r3, [r7, #24]
    }

    /* Calculate the maximum allowed size of the payload for the given parameters.
     * This calculation excludes the "Remaining length" encoding, whose size is not
     * yet known. */
    payloadLimit = MQTT_MAX_REMAINING_LENGTH - packetSize - 1U;
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <calculatePublishPacketSize+0xec>)
 8001a40:	1a9b      	subs	r3, r3, r2
 8001a42:	617b      	str	r3, [r7, #20]

    /* Ensure that the given payload fits within the calculated limit. */
    if( pPublishInfo->payloadLength > payloadLimit )
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d202      	bcs.n	8001a54 <calculatePublishPacketSize+0x88>
                    "%lu so as not to exceed the maximum "
                    "remaining length of MQTT 3.1.1 packet( %lu ).",
                    ( unsigned long ) pPublishInfo->payloadLength,
                    ( unsigned long ) payloadLimit,
                    MQTT_MAX_REMAINING_LENGTH ) );
        status = false;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	77fb      	strb	r3, [r7, #31]
 8001a52:	e021      	b.n	8001a98 <calculatePublishPacketSize+0xcc>
    }
    else
    {
        /* Add the length of the PUBLISH payload. At this point, the "Remaining length"
         * has been calculated. */
        packetSize += pPublishInfo->payloadLength;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]

        /* Now that the "Remaining length" is known, recalculate the payload limit
         * based on the size of its encoding. */
        payloadLimit -= remainingLengthEncodedSize( packetSize );
 8001a5e:	69b8      	ldr	r0, [r7, #24]
 8001a60:	f7ff ff1a 	bl	8001898 <remainingLengthEncodedSize>
 8001a64:	4602      	mov	r2, r0
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	1a9b      	subs	r3, r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]

        /* Check that the given payload fits within the size allowed by MQTT spec. */
        if( pPublishInfo->payloadLength > payloadLimit )
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d202      	bcs.n	8001a7c <calculatePublishPacketSize+0xb0>
                        "%lu so as not to exceed the maximum "
                        "remaining length of MQTT 3.1.1 packet( %lu ).",
                        ( unsigned long ) pPublishInfo->payloadLength,
                        ( unsigned long ) payloadLimit,
                        MQTT_MAX_REMAINING_LENGTH ) );
            status = false;
 8001a76:	2300      	movs	r3, #0
 8001a78:	77fb      	strb	r3, [r7, #31]
 8001a7a:	e00d      	b.n	8001a98 <calculatePublishPacketSize+0xcc>
        }
        else
        {
            /* Set the "Remaining length" output parameter and calculate the full
             * size of the PUBLISH packet. */
            *pRemainingLength = packetSize;
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	601a      	str	r2, [r3, #0]

            packetSize += 1U + remainingLengthEncodedSize( packetSize );
 8001a82:	69b8      	ldr	r0, [r7, #24]
 8001a84:	f7ff ff08 	bl	8001898 <remainingLengthEncodedSize>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4413      	add	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
            *pPacketSize = packetSize;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	601a      	str	r2, [r3, #0]
    }

    LogDebug( ( "PUBLISH packet remaining length=%lu and packet size=%lu.",
                ( unsigned long ) *pRemainingLength,
                ( unsigned long ) *pPacketSize ) );
    return status;
 8001a98:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3720      	adds	r7, #32
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	0800e6fc 	.word	0x0800e6fc
 8001aa8:	0800f324 	.word	0x0800f324
 8001aac:	0800e6d8 	.word	0x0800e6d8
 8001ab0:	0800e714 	.word	0x0800e714
 8001ab4:	0800e730 	.word	0x0800e730
 8001ab8:	0ffffffe 	.word	0x0ffffffe

08001abc <serializePublishCommon>:
static void serializePublishCommon( const MQTTPublishInfo_t * pPublishInfo,
                                    size_t remainingLength,
                                    uint16_t packetIdentifier,
                                    const MQTTFixedBuffer_t * pFixedBuffer,
                                    bool serializePayload )
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	80fb      	strh	r3, [r7, #6]
    uint8_t * pIndex = NULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61fb      	str	r3, [r7, #28]
    const uint8_t * pPayloadBuffer = NULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]

    /* The first byte of a PUBLISH packet contains the packet type and flags. */
    uint8_t publishFlags = MQTT_PACKET_TYPE_PUBLISH;
 8001ad4:	2330      	movs	r3, #48	; 0x30
 8001ad6:	76fb      	strb	r3, [r7, #27]

    assert( pPublishInfo != NULL );
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d106      	bne.n	8001aec <serializePublishCommon+0x30>
 8001ade:	4b57      	ldr	r3, [pc, #348]	; (8001c3c <serializePublishCommon+0x180>)
 8001ae0:	4a57      	ldr	r2, [pc, #348]	; (8001c40 <serializePublishCommon+0x184>)
 8001ae2:	f240 2172 	movw	r1, #626	; 0x272
 8001ae6:	4857      	ldr	r0, [pc, #348]	; (8001c44 <serializePublishCommon+0x188>)
 8001ae8:	f00b f86e 	bl	800cbc8 <__assert_func>
    assert( pFixedBuffer != NULL );
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d106      	bne.n	8001b00 <serializePublishCommon+0x44>
 8001af2:	4b55      	ldr	r3, [pc, #340]	; (8001c48 <serializePublishCommon+0x18c>)
 8001af4:	4a52      	ldr	r2, [pc, #328]	; (8001c40 <serializePublishCommon+0x184>)
 8001af6:	f240 2173 	movw	r1, #627	; 0x273
 8001afa:	4852      	ldr	r0, [pc, #328]	; (8001c44 <serializePublishCommon+0x188>)
 8001afc:	f00b f864 	bl	800cbc8 <__assert_func>
    assert( pFixedBuffer->pBuffer != NULL );
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d106      	bne.n	8001b16 <serializePublishCommon+0x5a>
 8001b08:	4b50      	ldr	r3, [pc, #320]	; (8001c4c <serializePublishCommon+0x190>)
 8001b0a:	4a4d      	ldr	r2, [pc, #308]	; (8001c40 <serializePublishCommon+0x184>)
 8001b0c:	f44f 711d 	mov.w	r1, #628	; 0x274
 8001b10:	484c      	ldr	r0, [pc, #304]	; (8001c44 <serializePublishCommon+0x188>)
 8001b12:	f00b f859 	bl	800cbc8 <__assert_func>
    /* Packet Id should be non zero for Qos 1 and Qos 2. */
    assert( ( pPublishInfo->qos == MQTTQoS0 ) || ( packetIdentifier != 0U ) );
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d009      	beq.n	8001b32 <serializePublishCommon+0x76>
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d106      	bne.n	8001b32 <serializePublishCommon+0x76>
 8001b24:	4b4a      	ldr	r3, [pc, #296]	; (8001c50 <serializePublishCommon+0x194>)
 8001b26:	4a46      	ldr	r2, [pc, #280]	; (8001c40 <serializePublishCommon+0x184>)
 8001b28:	f240 2176 	movw	r1, #630	; 0x276
 8001b2c:	4845      	ldr	r0, [pc, #276]	; (8001c44 <serializePublishCommon+0x188>)
 8001b2e:	f00b f84b 	bl	800cbc8 <__assert_func>
    /* Duplicate flag should be set only for Qos 1 or Qos 2. */
    assert( ( pPublishInfo->dup != true ) || ( pPublishInfo->qos != MQTTQoS0 ) );
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	789b      	ldrb	r3, [r3, #2]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00a      	beq.n	8001b50 <serializePublishCommon+0x94>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d106      	bne.n	8001b50 <serializePublishCommon+0x94>
 8001b42:	4b44      	ldr	r3, [pc, #272]	; (8001c54 <serializePublishCommon+0x198>)
 8001b44:	4a3e      	ldr	r2, [pc, #248]	; (8001c40 <serializePublishCommon+0x184>)
 8001b46:	f44f 711e 	mov.w	r1, #632	; 0x278
 8001b4a:	483e      	ldr	r0, [pc, #248]	; (8001c44 <serializePublishCommon+0x188>)
 8001b4c:	f00b f83c 	bl	800cbc8 <__assert_func>

    /* Get the start address of the buffer. */
    pIndex = pFixedBuffer->pBuffer;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	61fb      	str	r3, [r7, #28]

    if( pPublishInfo->qos == MQTTQoS1 )
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d104      	bne.n	8001b68 <serializePublishCommon+0xac>
    {
        LogDebug( ( "Adding QoS as QoS1 in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 );
 8001b5e:	7efb      	ldrb	r3, [r7, #27]
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	76fb      	strb	r3, [r7, #27]
 8001b66:	e007      	b.n	8001b78 <serializePublishCommon+0xbc>
    }
    else if( pPublishInfo->qos == MQTTQoS2 )
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d103      	bne.n	8001b78 <serializePublishCommon+0xbc>
    {
        LogDebug( ( "Adding QoS as QoS2 in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS2 );
 8001b70:	7efb      	ldrb	r3, [r7, #27]
 8001b72:	f043 0304 	orr.w	r3, r3, #4
 8001b76:	76fb      	strb	r3, [r7, #27]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    if( pPublishInfo->retain == true )
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	785b      	ldrb	r3, [r3, #1]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <serializePublishCommon+0xcc>
    {
        LogDebug( ( "Adding retain bit in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_RETAIN );
 8001b80:	7efb      	ldrb	r3, [r7, #27]
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	76fb      	strb	r3, [r7, #27]
    }

    if( pPublishInfo->dup == true )
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	789b      	ldrb	r3, [r3, #2]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <serializePublishCommon+0xdc>
    {
        LogDebug( ( "Adding dup bit in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_DUP );
 8001b90:	7efb      	ldrb	r3, [r7, #27]
 8001b92:	f043 0308 	orr.w	r3, r3, #8
 8001b96:	76fb      	strb	r3, [r7, #27]
    }

    *pIndex = publishFlags;
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	7efa      	ldrb	r2, [r7, #27]
 8001b9c:	701a      	strb	r2, [r3, #0]
    pIndex++;
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]

    /* The "Remaining length" is encoded from the second byte. */
    pIndex = encodeRemainingLength( pIndex, remainingLength );
 8001ba4:	68b9      	ldr	r1, [r7, #8]
 8001ba6:	69f8      	ldr	r0, [r7, #28]
 8001ba8:	f7ff fe98 	bl	80018dc <encodeRemainingLength>
 8001bac:	61f8      	str	r0, [r7, #28]

    /* The topic name is placed after the "Remaining length". */
    pIndex = encodeString( pIndex,
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6859      	ldr	r1, [r3, #4]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	891b      	ldrh	r3, [r3, #8]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	69f8      	ldr	r0, [r7, #28]
 8001bba:	f7ff fec7 	bl	800194c <encodeString>
 8001bbe:	61f8      	str	r0, [r7, #28]
                           pPublishInfo->pTopicName,
                           pPublishInfo->topicNameLength );

    /* A packet identifier is required for QoS 1 and 2 messages. */
    if( pPublishInfo->qos > MQTTQoS0 )
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00d      	beq.n	8001be4 <serializePublishCommon+0x128>
    {
        LogDebug( ( "Adding packet Id in PUBLISH packet." ) );
        /* Place the packet identifier into the PUBLISH packet. */
        *pIndex = UINT16_HIGH_BYTE( packetIdentifier );
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	0a1b      	lsrs	r3, r3, #8
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	701a      	strb	r2, [r3, #0]
        *( pIndex + 1 ) = UINT16_LOW_BYTE( packetIdentifier );
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	88fa      	ldrh	r2, [r7, #6]
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	701a      	strb	r2, [r3, #0]
        pIndex += 2;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3302      	adds	r3, #2
 8001be2:	61fb      	str	r3, [r7, #28]

    /* The payload is placed after the packet identifier.
     * Payload is copied over only if required by the flag serializePayload.
     * This will help reduce an unnecessary copy of the payload into the buffer.
     */
    if( ( pPublishInfo->payloadLength > 0U ) &&
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d012      	beq.n	8001c12 <serializePublishCommon+0x156>
 8001bec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00e      	beq.n	8001c12 <serializePublishCommon+0x156>
        LogDebug( ( "Copying PUBLISH payload of length =%lu to buffer",
                    ( unsigned long ) pPublishInfo->payloadLength ) );

        /* Typecast const void * typed payload buffer to const uint8_t *.
         * This is to use same type buffers in memcpy. */
        pPayloadBuffer = ( const uint8_t * ) pPublishInfo->pPayload;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	617b      	str	r3, [r7, #20]

        ( void ) memcpy( pIndex, pPayloadBuffer, pPublishInfo->payloadLength );
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	6979      	ldr	r1, [r7, #20]
 8001c02:	69f8      	ldr	r0, [r7, #28]
 8001c04:	f00b f83a 	bl	800cc7c <memcpy>
        pIndex += pPublishInfo->payloadLength;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	69fa      	ldr	r2, [r7, #28]
 8001c0e:	4413      	add	r3, r2
 8001c10:	61fb      	str	r3, [r7, #28]
    }

    /* Ensure that the difference between the end and beginning of the buffer
     * is less than the buffer size. */
    assert( ( ( size_t ) ( pIndex - pFixedBuffer->pBuffer ) ) <= pFixedBuffer->size );
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d906      	bls.n	8001c32 <serializePublishCommon+0x176>
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <serializePublishCommon+0x19c>)
 8001c26:	4a06      	ldr	r2, [pc, #24]	; (8001c40 <serializePublishCommon+0x184>)
 8001c28:	f240 21c1 	movw	r1, #705	; 0x2c1
 8001c2c:	4805      	ldr	r0, [pc, #20]	; (8001c44 <serializePublishCommon+0x188>)
 8001c2e:	f00a ffcb 	bl	800cbc8 <__assert_func>
}
 8001c32:	bf00      	nop
 8001c34:	3720      	adds	r7, #32
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	0800e6fc 	.word	0x0800e6fc
 8001c40:	0800f340 	.word	0x0800f340
 8001c44:	0800e6d8 	.word	0x0800e6d8
 8001c48:	0800e744 	.word	0x0800e744
 8001c4c:	0800e75c 	.word	0x0800e75c
 8001c50:	0800e77c 	.word	0x0800e77c
 8001c54:	0800e7bc 	.word	0x0800e7bc
 8001c58:	0800e800 	.word	0x0800e800

08001c5c <getRemainingLength>:

static size_t getRemainingLength( TransportRecv_t recvFunc,
                                  NetworkContext_t * pNetworkContext )
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
    size_t remainingLength = 0, multiplier = 1, bytesDecoded = 0, expectedSize = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	61bb      	str	r3, [r7, #24]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
    uint8_t encodedByte = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	72fb      	strb	r3, [r7, #11]
    int32_t bytesReceived = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        if( multiplier > 2097152U ) /* 128 ^ 3 */
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c84:	d903      	bls.n	8001c8e <getRemainingLength+0x32>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 8001c86:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c8a:	61fb      	str	r3, [r7, #28]
 8001c8c:	e01c      	b.n	8001cc8 <getRemainingLength+0x6c>
        }
        else
        {
            bytesReceived = recvFunc( pNetworkContext, &encodedByte, 1U );
 8001c8e:	f107 010b 	add.w	r1, r7, #11
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	6838      	ldr	r0, [r7, #0]
 8001c98:	4798      	blx	r3
 8001c9a:	60f8      	str	r0, [r7, #12]

            if( bytesReceived == 1 )
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d10f      	bne.n	8001cc2 <getRemainingLength+0x66>
            {
                remainingLength += ( ( size_t ) encodedByte & 0x7FU ) * multiplier;
 8001ca2:	7afb      	ldrb	r3, [r7, #11]
 8001ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	fb02 f303 	mul.w	r3, r2, r3
 8001cae:	69fa      	ldr	r2, [r7, #28]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	61fb      	str	r3, [r7, #28]
                multiplier *= 128U;
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	01db      	lsls	r3, r3, #7
 8001cb8:	61bb      	str	r3, [r7, #24]
                bytesDecoded++;
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	e002      	b.n	8001cc8 <getRemainingLength+0x6c>
            }
            else
            {
                remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 8001cc2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001cc6:	61fb      	str	r3, [r7, #28]
            }
        }

        if( remainingLength == MQTT_REMAINING_LENGTH_INVALID )
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001cce:	d004      	beq.n	8001cda <getRemainingLength+0x7e>
        {
            break;
        }
    } while( ( encodedByte & 0x80U ) != 0U );
 8001cd0:	7afb      	ldrb	r3, [r7, #11]
 8001cd2:	b25b      	sxtb	r3, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	dbd2      	blt.n	8001c7e <getRemainingLength+0x22>
 8001cd8:	e000      	b.n	8001cdc <getRemainingLength+0x80>
            break;
 8001cda:	bf00      	nop

    /* Check that the decoded remaining length conforms to the MQTT specification. */
    if( remainingLength != MQTT_REMAINING_LENGTH_INVALID )
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ce2:	d00a      	beq.n	8001cfa <getRemainingLength+0x9e>
    {
        expectedSize = remainingLengthEncodedSize( remainingLength );
 8001ce4:	69f8      	ldr	r0, [r7, #28]
 8001ce6:	f7ff fdd7 	bl	8001898 <remainingLengthEncodedSize>
 8001cea:	6138      	str	r0, [r7, #16]

        if( bytesDecoded != expectedSize )
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d002      	beq.n	8001cfa <getRemainingLength+0x9e>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 8001cf4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001cf8:	61fb      	str	r3, [r7, #28]
        }
    }

    return remainingLength;
 8001cfa:	69fb      	ldr	r3, [r7, #28]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3720      	adds	r7, #32
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <incomingPacketValid>:

/*-----------------------------------------------------------*/

static bool incomingPacketValid( uint8_t packetType )
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
    bool status = false;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	73fb      	strb	r3, [r7, #15]

    /* Check packet type. Mask out lower bits to ignore flags. */
    switch( packetType & 0xF0U )
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d18:	2bd0      	cmp	r3, #208	; 0xd0
 8001d1a:	d01d      	beq.n	8001d58 <incomingPacketValid+0x54>
 8001d1c:	2bd0      	cmp	r3, #208	; 0xd0
 8001d1e:	d826      	bhi.n	8001d6e <incomingPacketValid+0x6a>
 8001d20:	2bb0      	cmp	r3, #176	; 0xb0
 8001d22:	d019      	beq.n	8001d58 <incomingPacketValid+0x54>
 8001d24:	2bb0      	cmp	r3, #176	; 0xb0
 8001d26:	d822      	bhi.n	8001d6e <incomingPacketValid+0x6a>
 8001d28:	2b90      	cmp	r3, #144	; 0x90
 8001d2a:	d015      	beq.n	8001d58 <incomingPacketValid+0x54>
 8001d2c:	2b90      	cmp	r3, #144	; 0x90
 8001d2e:	d81e      	bhi.n	8001d6e <incomingPacketValid+0x6a>
 8001d30:	2b70      	cmp	r3, #112	; 0x70
 8001d32:	d011      	beq.n	8001d58 <incomingPacketValid+0x54>
 8001d34:	2b70      	cmp	r3, #112	; 0x70
 8001d36:	d81a      	bhi.n	8001d6e <incomingPacketValid+0x6a>
 8001d38:	2b60      	cmp	r3, #96	; 0x60
 8001d3a:	d010      	beq.n	8001d5e <incomingPacketValid+0x5a>
 8001d3c:	2b60      	cmp	r3, #96	; 0x60
 8001d3e:	d816      	bhi.n	8001d6e <incomingPacketValid+0x6a>
 8001d40:	2b50      	cmp	r3, #80	; 0x50
 8001d42:	d009      	beq.n	8001d58 <incomingPacketValid+0x54>
 8001d44:	2b50      	cmp	r3, #80	; 0x50
 8001d46:	d812      	bhi.n	8001d6e <incomingPacketValid+0x6a>
 8001d48:	2b40      	cmp	r3, #64	; 0x40
 8001d4a:	d005      	beq.n	8001d58 <incomingPacketValid+0x54>
 8001d4c:	2b40      	cmp	r3, #64	; 0x40
 8001d4e:	d80e      	bhi.n	8001d6e <incomingPacketValid+0x6a>
 8001d50:	2b20      	cmp	r3, #32
 8001d52:	d001      	beq.n	8001d58 <incomingPacketValid+0x54>
 8001d54:	2b30      	cmp	r3, #48	; 0x30
 8001d56:	d10a      	bne.n	8001d6e <incomingPacketValid+0x6a>
        case MQTT_PACKET_TYPE_PUBREC:
        case MQTT_PACKET_TYPE_PUBCOMP:
        case MQTT_PACKET_TYPE_SUBACK:
        case MQTT_PACKET_TYPE_UNSUBACK:
        case MQTT_PACKET_TYPE_PINGRESP:
            status = true;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	73fb      	strb	r3, [r7, #15]
            break;
 8001d5c:	e00a      	b.n	8001d74 <incomingPacketValid+0x70>

        case ( MQTT_PACKET_TYPE_PUBREL & 0xF0U ):

            /* The second bit of a PUBREL must be set. */
            if( ( packetType & 0x02U ) > 0U )
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d004      	beq.n	8001d72 <incomingPacketValid+0x6e>
            {
                status = true;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	73fb      	strb	r3, [r7, #15]
            }

            break;
 8001d6c:	e001      	b.n	8001d72 <incomingPacketValid+0x6e>

        /* Any other packet type is invalid. */
        default:
            LogWarn( ( "Incoming packet invalid: Packet type=%u.",
                       ( unsigned int ) packetType ) );
            break;
 8001d6e:	bf00      	nop
 8001d70:	e000      	b.n	8001d74 <incomingPacketValid+0x70>
            break;
 8001d72:	bf00      	nop
    }

    return status;
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <checkPublishRemainingLength>:
/*-----------------------------------------------------------*/

static MQTTStatus_t checkPublishRemainingLength( size_t remainingLength,
                                                 MQTTQoS_t qos,
                                                 size_t qos0Minimum )
{
 8001d82:	b480      	push	{r7}
 8001d84:	b087      	sub	sp, #28
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	60f8      	str	r0, [r7, #12]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	607a      	str	r2, [r7, #4]
 8001d8e:	72fb      	strb	r3, [r7, #11]
    MQTTStatus_t status = MQTTSuccess;
 8001d90:	2300      	movs	r3, #0
 8001d92:	75fb      	strb	r3, [r7, #23]

    /* Sanity checks for "Remaining length". */
    if( qos == MQTTQoS0 )
 8001d94:	7afb      	ldrb	r3, [r7, #11]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d106      	bne.n	8001da8 <checkPublishRemainingLength+0x26>
    {
        /* Check that the "Remaining length" is greater than the minimum. */
        if( remainingLength < qos0Minimum )
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d209      	bcs.n	8001db6 <checkPublishRemainingLength+0x34>
        {
            LogDebug( ( "QoS 0 PUBLISH cannot have a remaining length less than %lu.",
                        ( unsigned long ) qos0Minimum ) );

            status = MQTTBadResponse;
 8001da2:	2305      	movs	r3, #5
 8001da4:	75fb      	strb	r3, [r7, #23]
 8001da6:	e006      	b.n	8001db6 <checkPublishRemainingLength+0x34>
    else
    {
        /* Check that the "Remaining length" is greater than the minimum. For
         * QoS 1 or 2, this will be two bytes greater than for QoS 0 due to the
         * packet identifier. */
        if( remainingLength < ( qos0Minimum + 2U ) )
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3302      	adds	r3, #2
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d201      	bcs.n	8001db6 <checkPublishRemainingLength+0x34>
        {
            LogDebug( ( "QoS 1 or 2 PUBLISH cannot have a remaining length less than %lu.",
                        ( unsigned long ) ( qos0Minimum + 2U ) ) );

            status = MQTTBadResponse;
 8001db2:	2305      	movs	r3, #5
 8001db4:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 8001db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	371c      	adds	r7, #28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <processPublishFlags>:

/*-----------------------------------------------------------*/

static MQTTStatus_t processPublishFlags( uint8_t publishFlags,
                                         MQTTPublishInfo_t * pPublishInfo )
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTSuccess;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	73fb      	strb	r3, [r7, #15]

    assert( pPublishInfo != NULL );
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d106      	bne.n	8001de8 <processPublishFlags+0x24>
 8001dda:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <processPublishFlags+0x98>)
 8001ddc:	4a20      	ldr	r2, [pc, #128]	; (8001e60 <processPublishFlags+0x9c>)
 8001dde:	f240 314b 	movw	r1, #843	; 0x34b
 8001de2:	4820      	ldr	r0, [pc, #128]	; (8001e64 <processPublishFlags+0xa0>)
 8001de4:	f00a fef0 	bl	800cbc8 <__assert_func>

    /* Check for QoS 2. */
    if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS2 ) )
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00b      	beq.n	8001e0a <processPublishFlags+0x46>
    {
        /* PUBLISH packet is invalid if both QoS 1 and QoS 2 bits are set. */
        if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 ) )
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <processPublishFlags+0x3e>
        {
            LogDebug( ( "Bad QoS: 3." ) );

            status = MQTTBadResponse;
 8001dfc:	2305      	movs	r3, #5
 8001dfe:	73fb      	strb	r3, [r7, #15]
 8001e00:	e00f      	b.n	8001e22 <processPublishFlags+0x5e>
        }
        else
        {
            pPublishInfo->qos = MQTTQoS2;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	2202      	movs	r2, #2
 8001e06:	701a      	strb	r2, [r3, #0]
 8001e08:	e00b      	b.n	8001e22 <processPublishFlags+0x5e>
        }
    }
    /* Check for QoS 1. */
    else if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 ) )
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <processPublishFlags+0x58>
    {
        pPublishInfo->qos = MQTTQoS1;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]
 8001e1a:	e002      	b.n	8001e22 <processPublishFlags+0x5e>
    }
    /* If the PUBLISH isn't QoS 1 or 2, then it's QoS 0. */
    else
    {
        pPublishInfo->qos = MQTTQoS0;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	701a      	strb	r2, [r3, #0]
    }

    if( status == MQTTSuccess )
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d114      	bne.n	8001e52 <processPublishFlags+0x8e>
    {
        LogDebug( ( "QoS is %d.", ( int ) pPublishInfo->qos ) );

        /* Parse the Retain bit. */
        pPublishInfo->retain = ( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_RETAIN ) ) ? true : false;
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	bf14      	ite	ne
 8001e32:	2301      	movne	r3, #1
 8001e34:	2300      	moveq	r3, #0
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	705a      	strb	r2, [r3, #1]

        LogDebug( ( "Retain bit is %d.", ( int ) pPublishInfo->retain ) );

        /* Parse the DUP bit. */
        pPublishInfo->dup = ( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_DUP ) ) ? true : false;
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	08db      	lsrs	r3, r3, #3
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	bf14      	ite	ne
 8001e48:	2301      	movne	r3, #1
 8001e4a:	2300      	moveq	r3, #0
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	709a      	strb	r2, [r3, #2]

        LogDebug( ( "DUP bit is %d.", ( int ) pPublishInfo->dup ) );
    }

    return status;
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	0800e6fc 	.word	0x0800e6fc
 8001e60:	0800f358 	.word	0x0800f358
 8001e64:	0800e6d8 	.word	0x0800e6d8

08001e68 <logConnackResponse>:

/*-----------------------------------------------------------*/

static void logConnackResponse( uint8_t responseCode )
{
 8001e68:	b5b0      	push	{r4, r5, r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
    const char * const pConnackResponses[ 6 ] =
 8001e72:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <logConnackResponse+0x3c>)
 8001e74:	f107 0408 	add.w	r4, r7, #8
 8001e78:	461d      	mov	r5, r3
 8001e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e82:	e884 0003 	stmia.w	r4, {r0, r1}

    /* Avoid unused parameter warning when assert and logs are disabled. */
    ( void ) responseCode;
    ( void ) pConnackResponses;

    assert( responseCode <= 5 );
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	2b05      	cmp	r3, #5
 8001e8a:	d906      	bls.n	8001e9a <logConnackResponse+0x32>
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <logConnackResponse+0x40>)
 8001e8e:	4a07      	ldr	r2, [pc, #28]	; (8001eac <logConnackResponse+0x44>)
 8001e90:	f240 318b 	movw	r1, #907	; 0x38b
 8001e94:	4806      	ldr	r0, [pc, #24]	; (8001eb0 <logConnackResponse+0x48>)
 8001e96:	f00a fe97 	bl	800cbc8 <__assert_func>
    else
    {
        /* Log an error based on the CONNACK response code. */
        LogError( ( "%s", pConnackResponses[ responseCode ] ) );
    }
}
 8001e9a:	bf00      	nop
 8001e9c:	3720      	adds	r7, #32
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	0800e85c 	.word	0x0800e85c
 8001ea8:	0800e848 	.word	0x0800e848
 8001eac:	0800f36c 	.word	0x0800f36c
 8001eb0:	0800e6d8 	.word	0x0800e6d8

08001eb4 <deserializeConnack>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeConnack( const MQTTPacketInfo_t * pConnack,
                                        bool * pSessionPresent )
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	73fb      	strb	r3, [r7, #15]
    const uint8_t * pRemainingData = NULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60bb      	str	r3, [r7, #8]

    assert( pConnack != NULL );
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d106      	bne.n	8001eda <deserializeConnack+0x26>
 8001ecc:	4b2a      	ldr	r3, [pc, #168]	; (8001f78 <deserializeConnack+0xc4>)
 8001ece:	4a2b      	ldr	r2, [pc, #172]	; (8001f7c <deserializeConnack+0xc8>)
 8001ed0:	f240 31a1 	movw	r1, #929	; 0x3a1
 8001ed4:	482a      	ldr	r0, [pc, #168]	; (8001f80 <deserializeConnack+0xcc>)
 8001ed6:	f00a fe77 	bl	800cbc8 <__assert_func>
    assert( pSessionPresent != NULL );
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d106      	bne.n	8001eee <deserializeConnack+0x3a>
 8001ee0:	4b28      	ldr	r3, [pc, #160]	; (8001f84 <deserializeConnack+0xd0>)
 8001ee2:	4a26      	ldr	r2, [pc, #152]	; (8001f7c <deserializeConnack+0xc8>)
 8001ee4:	f240 31a2 	movw	r1, #930	; 0x3a2
 8001ee8:	4825      	ldr	r0, [pc, #148]	; (8001f80 <deserializeConnack+0xcc>)
 8001eea:	f00a fe6d 	bl	800cbc8 <__assert_func>
    pRemainingData = pConnack->pRemainingData;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	60bb      	str	r3, [r7, #8]

    /* According to MQTT 3.1.1, the second byte of CONNACK must specify a
     * "Remaining length" of 2. */
    if( pConnack->remainingLength != MQTT_PACKET_CONNACK_REMAINING_LENGTH )
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d002      	beq.n	8001f02 <deserializeConnack+0x4e>
    {
        LogError( ( "CONNACK does not have remaining length of %u.",
                    ( unsigned int ) MQTT_PACKET_CONNACK_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 8001efc:	2305      	movs	r3, #5
 8001efe:	73fb      	strb	r3, [r7, #15]
 8001f00:	e01d      	b.n	8001f3e <deserializeConnack+0x8a>
    }

    /* Check the reserved bits in CONNACK. The high 7 bits of the second byte
     * in CONNACK must be 0. */
    else if( ( pRemainingData[ 0 ] | 0x01U ) != 0x01U )
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d002      	beq.n	8001f16 <deserializeConnack+0x62>
    {
        LogError( ( "Reserved bits in CONNACK incorrect." ) );

        status = MQTTBadResponse;
 8001f10:	2305      	movs	r3, #5
 8001f12:	73fb      	strb	r3, [r7, #15]
 8001f14:	e013      	b.n	8001f3e <deserializeConnack+0x8a>
    }
    else
    {
        /* Determine if the "Session Present" bit is set. This is the lowest bit of
         * the second byte in CONNACK. */
        if( ( pRemainingData[ 0 ] & MQTT_PACKET_CONNACK_SESSION_PRESENT_MASK )
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00a      	beq.n	8001f38 <deserializeConnack+0x84>
            == MQTT_PACKET_CONNACK_SESSION_PRESENT_MASK )
        {
            LogInfo( ( "CONNACK session present bit set." ) );
            *pSessionPresent = true;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	2201      	movs	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]

            /* MQTT 3.1.1 specifies that the fourth byte in CONNACK must be 0 if the
             * "Session Present" bit is set. */
            if( pRemainingData[ 1 ] != 0U )
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d005      	beq.n	8001f3e <deserializeConnack+0x8a>
            {
                status = MQTTBadResponse;
 8001f32:	2305      	movs	r3, #5
 8001f34:	73fb      	strb	r3, [r7, #15]
 8001f36:	e002      	b.n	8001f3e <deserializeConnack+0x8a>
            }
        }
        else
        {
            LogInfo( ( "CONNACK session present bit not set." ) );
            *pSessionPresent = false;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
        }
    }

    if( status == MQTTSuccess )
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d114      	bne.n	8001f6e <deserializeConnack+0xba>
    {
        /* In MQTT 3.1.1, only values 0 through 5 are valid CONNACK response codes. */
        if( pRemainingData[ 1 ] > 5U )
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	3301      	adds	r3, #1
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b05      	cmp	r3, #5
 8001f4c:	d902      	bls.n	8001f54 <deserializeConnack+0xa0>
        {
            LogError( ( "CONNACK response %u is invalid.",
                        ( unsigned int ) pRemainingData[ 1 ] ) );

            status = MQTTBadResponse;
 8001f4e:	2305      	movs	r3, #5
 8001f50:	73fb      	strb	r3, [r7, #15]
 8001f52:	e00c      	b.n	8001f6e <deserializeConnack+0xba>
        }
        else
        {
            /* Print the appropriate message for the CONNACK response code if logs are
             * enabled. */
            logConnackResponse( pRemainingData[ 1 ] );
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	3301      	adds	r3, #1
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff ff84 	bl	8001e68 <logConnackResponse>

            /* A nonzero CONNACK response code means the connection was refused. */
            if( pRemainingData[ 1 ] > 0U )
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	3301      	adds	r3, #1
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <deserializeConnack+0xba>
            {
                status = MQTTServerRefused;
 8001f6a:	2306      	movs	r3, #6
 8001f6c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return status;
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	0800e874 	.word	0x0800e874
 8001f7c:	0800f380 	.word	0x0800f380
 8001f80:	0800e6d8 	.word	0x0800e6d8
 8001f84:	0800e888 	.word	0x0800e888

08001f88 <readSubackStatus>:

/*-----------------------------------------------------------*/

static MQTTStatus_t readSubackStatus( size_t statusCount,
                                      const uint8_t * pStatusStart )
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 8001f92:	2300      	movs	r3, #0
 8001f94:	75fb      	strb	r3, [r7, #23]
    uint8_t subscriptionStatus = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	73fb      	strb	r3, [r7, #15]
    size_t i = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]

    assert( pStatusStart != NULL );
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d106      	bne.n	8001fb2 <readSubackStatus+0x2a>
 8001fa4:	4b17      	ldr	r3, [pc, #92]	; (8002004 <readSubackStatus+0x7c>)
 8001fa6:	4a18      	ldr	r2, [pc, #96]	; (8002008 <readSubackStatus+0x80>)
 8001fa8:	f240 4141 	movw	r1, #1089	; 0x441
 8001fac:	4817      	ldr	r0, [pc, #92]	; (800200c <readSubackStatus+0x84>)
 8001fae:	f00a fe0b 	bl	800cbc8 <__assert_func>

    /* Iterate through each status byte in the SUBACK packet. */
    for( i = 0; i < statusCount; i++ )
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	e019      	b.n	8001fec <readSubackStatus+0x64>
    {
        /* Read a single status byte in SUBACK. */
        subscriptionStatus = pStatusStart[ i ];
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	73fb      	strb	r3, [r7, #15]

        /* MQTT 3.1.1 defines the following values as status codes. */
        switch( subscriptionStatus )
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	dc02      	bgt.n	8001fce <readSubackStatus+0x46>
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	da08      	bge.n	8001fde <readSubackStatus+0x56>
 8001fcc:	e004      	b.n	8001fd8 <readSubackStatus+0x50>
 8001fce:	2b80      	cmp	r3, #128	; 0x80
 8001fd0:	d102      	bne.n	8001fd8 <readSubackStatus+0x50>
            case 0x80:

                LogWarn( ( "Topic filter %lu refused.", ( unsigned long ) i ) );

                /* Application should remove subscription from the list */
                status = MQTTServerRefused;
 8001fd2:	2306      	movs	r3, #6
 8001fd4:	75fb      	strb	r3, [r7, #23]

                break;
 8001fd6:	e003      	b.n	8001fe0 <readSubackStatus+0x58>

            default:
                LogDebug( ( "Bad SUBSCRIBE status %u.",
                            ( unsigned int ) subscriptionStatus ) );

                status = MQTTBadResponse;
 8001fd8:	2305      	movs	r3, #5
 8001fda:	75fb      	strb	r3, [r7, #23]

                break;
 8001fdc:	e000      	b.n	8001fe0 <readSubackStatus+0x58>
                break;
 8001fde:	bf00      	nop
        }

        /* Stop parsing the subscription statuses if a bad response was received. */
        if( status == MQTTBadResponse )
 8001fe0:	7dfb      	ldrb	r3, [r7, #23]
 8001fe2:	2b05      	cmp	r3, #5
 8001fe4:	d007      	beq.n	8001ff6 <readSubackStatus+0x6e>
    for( i = 0; i < statusCount; i++ )
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d3e1      	bcc.n	8001fb8 <readSubackStatus+0x30>
 8001ff4:	e000      	b.n	8001ff8 <readSubackStatus+0x70>
        {
            break;
 8001ff6:	bf00      	nop
        }
    }

    return status;
 8001ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	0800e8d4 	.word	0x0800e8d4
 8002008:	0800f394 	.word	0x0800f394
 800200c:	0800e6d8 	.word	0x0800e6d8

08002010 <deserializeSuback>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeSuback( const MQTTPacketInfo_t * pSuback,
                                       uint16_t * pPacketIdentifier )
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800201a:	2300      	movs	r3, #0
 800201c:	75fb      	strb	r3, [r7, #23]
    size_t remainingLength;
    const uint8_t * pVariableHeader = NULL;
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]

    assert( pSuback != NULL );
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d106      	bne.n	8002036 <deserializeSuback+0x26>
 8002028:	4b1c      	ldr	r3, [pc, #112]	; (800209c <deserializeSuback+0x8c>)
 800202a:	4a1d      	ldr	r2, [pc, #116]	; (80020a0 <deserializeSuback+0x90>)
 800202c:	f240 417a 	movw	r1, #1146	; 0x47a
 8002030:	481c      	ldr	r0, [pc, #112]	; (80020a4 <deserializeSuback+0x94>)
 8002032:	f00a fdc9 	bl	800cbc8 <__assert_func>
    assert( pPacketIdentifier != NULL );
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d106      	bne.n	800204a <deserializeSuback+0x3a>
 800203c:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <deserializeSuback+0x98>)
 800203e:	4a18      	ldr	r2, [pc, #96]	; (80020a0 <deserializeSuback+0x90>)
 8002040:	f240 417b 	movw	r1, #1147	; 0x47b
 8002044:	4817      	ldr	r0, [pc, #92]	; (80020a4 <deserializeSuback+0x94>)
 8002046:	f00a fdbf 	bl	800cbc8 <__assert_func>

    remainingLength = pSuback->remainingLength;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	60fb      	str	r3, [r7, #12]
    pVariableHeader = pSuback->pRemainingData;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	613b      	str	r3, [r7, #16]

    /* A SUBACK must have a remaining length of at least 3 to accommodate the
     * packet identifier and at least 1 return code. */
    if( remainingLength < 3U )
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2b02      	cmp	r3, #2
 800205a:	d802      	bhi.n	8002062 <deserializeSuback+0x52>
    {
        LogDebug( ( "SUBACK cannot have a remaining length less than 3." ) );
        status = MQTTBadResponse;
 800205c:	2305      	movs	r3, #5
 800205e:	75fb      	strb	r3, [r7, #23]
 8002060:	e016      	b.n	8002090 <deserializeSuback+0x80>
    }
    else
    {
        /* Extract the packet identifier (first 2 bytes of variable header) from SUBACK. */
        *pPacketIdentifier = UINT16_DECODE( pVariableHeader );
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	b21a      	sxth	r2, r3
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	3301      	adds	r3, #1
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	b21b      	sxth	r3, r3
 8002072:	4313      	orrs	r3, r2
 8002074:	b21b      	sxth	r3, r3
 8002076:	b29a      	uxth	r2, r3
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	801a      	strh	r2, [r3, #0]

        LogDebug( ( "Packet identifier %hu.",
                    ( unsigned short ) *pPacketIdentifier ) );

        status = readSubackStatus( remainingLength - sizeof( uint16_t ),
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	1e9a      	subs	r2, r3, #2
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	3302      	adds	r3, #2
 8002084:	4619      	mov	r1, r3
 8002086:	4610      	mov	r0, r2
 8002088:	f7ff ff7e 	bl	8001f88 <readSubackStatus>
 800208c:	4603      	mov	r3, r0
 800208e:	75fb      	strb	r3, [r7, #23]
                                   pVariableHeader + sizeof( uint16_t ) );
    }

    return status;
 8002090:	7dfb      	ldrb	r3, [r7, #23]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	0800e8ec 	.word	0x0800e8ec
 80020a0:	0800f3a8 	.word	0x0800f3a8
 80020a4:	0800e6d8 	.word	0x0800e6d8
 80020a8:	0800e8fc 	.word	0x0800e8fc

080020ac <deserializePublish>:
/*-----------------------------------------------------------*/

static MQTTStatus_t deserializePublish( const MQTTPacketInfo_t * pIncomingPacket,
                                        uint16_t * pPacketId,
                                        MQTTPublishInfo_t * pPublishInfo )
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b088      	sub	sp, #32
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 80020b8:	2300      	movs	r3, #0
 80020ba:	77fb      	strb	r3, [r7, #31]
    const uint8_t * pVariableHeader, * pPacketIdentifierHigh = NULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	61bb      	str	r3, [r7, #24]

    assert( pIncomingPacket != NULL );
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d106      	bne.n	80020d4 <deserializePublish+0x28>
 80020c6:	4b53      	ldr	r3, [pc, #332]	; (8002214 <deserializePublish+0x168>)
 80020c8:	4a53      	ldr	r2, [pc, #332]	; (8002218 <deserializePublish+0x16c>)
 80020ca:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
 80020ce:	4853      	ldr	r0, [pc, #332]	; (800221c <deserializePublish+0x170>)
 80020d0:	f00a fd7a 	bl	800cbc8 <__assert_func>
    assert( pPacketId != NULL );
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d106      	bne.n	80020e8 <deserializePublish+0x3c>
 80020da:	4b51      	ldr	r3, [pc, #324]	; (8002220 <deserializePublish+0x174>)
 80020dc:	4a4e      	ldr	r2, [pc, #312]	; (8002218 <deserializePublish+0x16c>)
 80020de:	f240 41d9 	movw	r1, #1241	; 0x4d9
 80020e2:	484e      	ldr	r0, [pc, #312]	; (800221c <deserializePublish+0x170>)
 80020e4:	f00a fd70 	bl	800cbc8 <__assert_func>
    assert( pPublishInfo != NULL );
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d106      	bne.n	80020fc <deserializePublish+0x50>
 80020ee:	4b4d      	ldr	r3, [pc, #308]	; (8002224 <deserializePublish+0x178>)
 80020f0:	4a49      	ldr	r2, [pc, #292]	; (8002218 <deserializePublish+0x16c>)
 80020f2:	f240 41da 	movw	r1, #1242	; 0x4da
 80020f6:	4849      	ldr	r0, [pc, #292]	; (800221c <deserializePublish+0x170>)
 80020f8:	f00a fd66 	bl	800cbc8 <__assert_func>
    assert( pIncomingPacket->pRemainingData != NULL );
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d106      	bne.n	8002112 <deserializePublish+0x66>
 8002104:	4b48      	ldr	r3, [pc, #288]	; (8002228 <deserializePublish+0x17c>)
 8002106:	4a44      	ldr	r2, [pc, #272]	; (8002218 <deserializePublish+0x16c>)
 8002108:	f240 41db 	movw	r1, #1243	; 0x4db
 800210c:	4843      	ldr	r0, [pc, #268]	; (800221c <deserializePublish+0x170>)
 800210e:	f00a fd5b 	bl	800cbc8 <__assert_func>

    pVariableHeader = pIncomingPacket->pRemainingData;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	617b      	str	r3, [r7, #20]
    /* The flags are the lower 4 bits of the first byte in PUBLISH. */
    status = processPublishFlags( ( pIncomingPacket->type & 0x0FU ), pPublishInfo );
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	f003 030f 	and.w	r3, r3, #15
 8002120:	b2db      	uxtb	r3, r3
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fe4d 	bl	8001dc4 <processPublishFlags>
 800212a:	4603      	mov	r3, r0
 800212c:	77fb      	strb	r3, [r7, #31]

    if( status == MQTTSuccess )
 800212e:	7ffb      	ldrb	r3, [r7, #31]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d109      	bne.n	8002148 <deserializePublish+0x9c>
        /* Sanity checks for "Remaining length". A QoS 0 PUBLISH  must have a remaining
         * length of at least 3 to accommodate topic name length (2 bytes) and topic
         * name (at least 1 byte). A QoS 1 or 2 PUBLISH must have a remaining length of
         * at least 5 for the packet identifier in addition to the topic name length and
         * topic name. */
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6898      	ldr	r0, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2203      	movs	r2, #3
 800213e:	4619      	mov	r1, r3
 8002140:	f7ff fe1f 	bl	8001d82 <checkPublishRemainingLength>
 8002144:	4603      	mov	r3, r0
 8002146:	77fb      	strb	r3, [r7, #31]
                                              pPublishInfo->qos,
                                              MQTT_MIN_PUBLISH_REMAINING_LENGTH_QOS0 );
    }

    if( status == MQTTSuccess )
 8002148:	7ffb      	ldrb	r3, [r7, #31]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d118      	bne.n	8002180 <deserializePublish+0xd4>
    {
        /* Extract the topic name starting from the first byte of the variable header.
         * The topic name string starts at byte 3 in the variable header. */
        pPublishInfo->topicNameLength = UINT16_DECODE( pVariableHeader );
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	021b      	lsls	r3, r3, #8
 8002154:	b21a      	sxth	r2, r3
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	3301      	adds	r3, #1
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	b21b      	sxth	r3, r3
 800215e:	4313      	orrs	r3, r2
 8002160:	b21b      	sxth	r3, r3
 8002162:	b29a      	uxth	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	811a      	strh	r2, [r3, #8]

        /* Sanity checks for topic name length and "Remaining length". The remaining
         * length must be at least as large as the variable length header. */
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6898      	ldr	r0, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	7819      	ldrb	r1, [r3, #0]
                                              pPublishInfo->qos,
                                              pPublishInfo->topicNameLength + sizeof( uint16_t ) );
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	891b      	ldrh	r3, [r3, #8]
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 8002174:	3302      	adds	r3, #2
 8002176:	461a      	mov	r2, r3
 8002178:	f7ff fe03 	bl	8001d82 <checkPublishRemainingLength>
 800217c:	4603      	mov	r3, r0
 800217e:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 8002180:	7ffb      	ldrb	r3, [r7, #31]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d123      	bne.n	80021ce <deserializePublish+0x122>
    {
        /* Parse the topic. */
        pPublishInfo->pTopicName = ( const char * ) ( pVariableHeader + sizeof( uint16_t ) );
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	1c9a      	adds	r2, r3, #2
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	605a      	str	r2, [r3, #4]
        LogDebug( ( "Topic name length: %hu.", ( unsigned short ) pPublishInfo->topicNameLength ) );

        /* Extract the packet identifier for QoS 1 or 2 PUBLISH packets. Packet
         * identifier starts immediately after the topic name. */
        pPacketIdentifierHigh = ( const uint8_t * ) ( pPublishInfo->pTopicName + pPublishInfo->topicNameLength );
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	8912      	ldrh	r2, [r2, #8]
 8002196:	4413      	add	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]

        if( pPublishInfo->qos > MQTTQoS0 )
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d015      	beq.n	80021ce <deserializePublish+0x122>
        {
            *pPacketId = UINT16_DECODE( pPacketIdentifierHigh );
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	b21a      	sxth	r2, r3
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	3301      	adds	r3, #1
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	b21b      	sxth	r3, r3
 80021b2:	4313      	orrs	r3, r2
 80021b4:	b21b      	sxth	r3, r3
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	801a      	strh	r2, [r3, #0]

            LogDebug( ( "Packet identifier %hu.",
                        ( unsigned short ) *pPacketId ) );

            /* Advance pointer two bytes to start of payload as in the QoS 0 case. */
            pPacketIdentifierHigh += sizeof( uint16_t );
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	3302      	adds	r3, #2
 80021c0:	61bb      	str	r3, [r7, #24]

            /* Packet identifier cannot be 0. */
            if( *pPacketId == 0U )
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <deserializePublish+0x122>
            {
                status = MQTTBadResponse;
 80021ca:	2305      	movs	r3, #5
 80021cc:	77fb      	strb	r3, [r7, #31]
            }
        }
    }

    if( status == MQTTSuccess )
 80021ce:	7ffb      	ldrb	r3, [r7, #31]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d119      	bne.n	8002208 <deserializePublish+0x15c>
    {
        /* Calculate the length of the payload. QoS 1 or 2 PUBLISH packets contain
         * a packet identifier, but QoS 0 PUBLISH packets do not. */
        pPublishInfo->payloadLength = pIncomingPacket->remainingLength - pPublishInfo->topicNameLength - sizeof( uint16_t );
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	8912      	ldrh	r2, [r2, #8]
 80021dc:	1a9b      	subs	r3, r3, r2
 80021de:	1e9a      	subs	r2, r3, #2
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	611a      	str	r2, [r3, #16]

        if( pPublishInfo->qos != MQTTQoS0 )
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d004      	beq.n	80021f6 <deserializePublish+0x14a>
        {
            /* Two more bytes for the packet identifier. */
            pPublishInfo->payloadLength -= sizeof( uint16_t );
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	1e9a      	subs	r2, r3, #2
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	611a      	str	r2, [r3, #16]
        }

        /* Set payload if it exists. */
        pPublishInfo->pPayload = ( pPublishInfo->payloadLength != 0U ) ? pPacketIdentifierHigh : NULL;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <deserializePublish+0x156>
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	e000      	b.n	8002204 <deserializePublish+0x158>
 8002202:	2300      	movs	r3, #0
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	60d3      	str	r3, [r2, #12]

        LogDebug( ( "Payload length %lu.",
                    ( unsigned long ) pPublishInfo->payloadLength ) );
    }

    return status;
 8002208:	7ffb      	ldrb	r3, [r7, #31]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3720      	adds	r7, #32
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	0800e918 	.word	0x0800e918
 8002218:	0800f3bc 	.word	0x0800f3bc
 800221c:	0800e6d8 	.word	0x0800e6d8
 8002220:	0800e930 	.word	0x0800e930
 8002224:	0800e6fc 	.word	0x0800e6fc
 8002228:	0800e944 	.word	0x0800e944

0800222c <deserializeSimpleAck>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeSimpleAck( const MQTTPacketInfo_t * pAck,
                                          uint16_t * pPacketIdentifier )
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 8002236:	2300      	movs	r3, #0
 8002238:	73fb      	strb	r3, [r7, #15]

    assert( pAck != NULL );
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d106      	bne.n	800224e <deserializeSimpleAck+0x22>
 8002240:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <deserializeSimpleAck+0x78>)
 8002242:	4a19      	ldr	r2, [pc, #100]	; (80022a8 <deserializeSimpleAck+0x7c>)
 8002244:	f240 5133 	movw	r1, #1331	; 0x533
 8002248:	4818      	ldr	r0, [pc, #96]	; (80022ac <deserializeSimpleAck+0x80>)
 800224a:	f00a fcbd 	bl	800cbc8 <__assert_func>
    assert( pPacketIdentifier != NULL );
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d106      	bne.n	8002262 <deserializeSimpleAck+0x36>
 8002254:	4b16      	ldr	r3, [pc, #88]	; (80022b0 <deserializeSimpleAck+0x84>)
 8002256:	4a14      	ldr	r2, [pc, #80]	; (80022a8 <deserializeSimpleAck+0x7c>)
 8002258:	f240 5134 	movw	r1, #1332	; 0x534
 800225c:	4813      	ldr	r0, [pc, #76]	; (80022ac <deserializeSimpleAck+0x80>)
 800225e:	f00a fcb3 	bl	800cbc8 <__assert_func>

    /* Check that the "Remaining length" of the received ACK is 2. */
    if( pAck->remainingLength != MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH )
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d002      	beq.n	8002270 <deserializeSimpleAck+0x44>
    {
        LogError( ( "ACK does not have remaining length of %u.",
                    ( unsigned int ) MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800226a:	2305      	movs	r3, #5
 800226c:	73fb      	strb	r3, [r7, #15]
 800226e:	e014      	b.n	800229a <deserializeSimpleAck+0x6e>
    }
    else
    {
        /* Extract the packet identifier (third and fourth bytes) from ACK. */
        *pPacketIdentifier = UINT16_DECODE( pAck->pRemainingData );
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	b21a      	sxth	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	3301      	adds	r3, #1
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	b21b      	sxth	r3, r3
 8002284:	4313      	orrs	r3, r2
 8002286:	b21b      	sxth	r3, r3
 8002288:	b29a      	uxth	r2, r3
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	801a      	strh	r2, [r3, #0]

        LogDebug( ( "Packet identifier %hu.",
                    ( unsigned short ) *pPacketIdentifier ) );

        /* Packet identifier cannot be 0. */
        if( *pPacketIdentifier == 0U )
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <deserializeSimpleAck+0x6e>
        {
            status = MQTTBadResponse;
 8002296:	2305      	movs	r3, #5
 8002298:	73fb      	strb	r3, [r7, #15]
        }
    }

    return status;
 800229a:	7bfb      	ldrb	r3, [r7, #15]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	0800e96c 	.word	0x0800e96c
 80022a8:	0800f3d0 	.word	0x0800f3d0
 80022ac:	0800e6d8 	.word	0x0800e6d8
 80022b0:	0800e8fc 	.word	0x0800e8fc

080022b4 <deserializePingresp>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializePingresp( const MQTTPacketInfo_t * pPingresp )
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 80022bc:	2300      	movs	r3, #0
 80022be:	73fb      	strb	r3, [r7, #15]

    assert( pPingresp != NULL );
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d106      	bne.n	80022d4 <deserializePingresp+0x20>
 80022c6:	4b09      	ldr	r3, [pc, #36]	; (80022ec <deserializePingresp+0x38>)
 80022c8:	4a09      	ldr	r2, [pc, #36]	; (80022f0 <deserializePingresp+0x3c>)
 80022ca:	f240 5156 	movw	r1, #1366	; 0x556
 80022ce:	4809      	ldr	r0, [pc, #36]	; (80022f4 <deserializePingresp+0x40>)
 80022d0:	f00a fc7a 	bl	800cbc8 <__assert_func>

    /* Check the "Remaining length" (second byte) of the received PINGRESP is 0. */
    if( pPingresp->remainingLength != MQTT_PACKET_PINGRESP_REMAINING_LENGTH )
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <deserializePingresp+0x2c>
    {
        LogError( ( "PINGRESP does not have remaining length of %u.",
                    MQTT_PACKET_PINGRESP_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 80022dc:	2305      	movs	r3, #5
 80022de:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	0800e97c 	.word	0x0800e97c
 80022f0:	0800f3e8 	.word	0x0800f3e8
 80022f4:	0800e6d8 	.word	0x0800e6d8

080022f8 <serializeConnectPacket>:

static void serializeConnectPacket( const MQTTConnectInfo_t * pConnectInfo,
                                    const MQTTPublishInfo_t * pWillInfo,
                                    size_t remainingLength,
                                    const MQTTFixedBuffer_t * pFixedBuffer )
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
 8002304:	603b      	str	r3, [r7, #0]
    uint8_t connectFlags = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	75fb      	strb	r3, [r7, #23]
    uint8_t * pIndex = NULL;
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]

    assert( pConnectInfo != NULL );
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d106      	bne.n	8002322 <serializeConnectPacket+0x2a>
 8002314:	4b68      	ldr	r3, [pc, #416]	; (80024b8 <serializeConnectPacket+0x1c0>)
 8002316:	4a69      	ldr	r2, [pc, #420]	; (80024bc <serializeConnectPacket+0x1c4>)
 8002318:	f240 516e 	movw	r1, #1390	; 0x56e
 800231c:	4868      	ldr	r0, [pc, #416]	; (80024c0 <serializeConnectPacket+0x1c8>)
 800231e:	f00a fc53 	bl	800cbc8 <__assert_func>
    assert( pFixedBuffer != NULL );
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d106      	bne.n	8002336 <serializeConnectPacket+0x3e>
 8002328:	4b66      	ldr	r3, [pc, #408]	; (80024c4 <serializeConnectPacket+0x1cc>)
 800232a:	4a64      	ldr	r2, [pc, #400]	; (80024bc <serializeConnectPacket+0x1c4>)
 800232c:	f240 516f 	movw	r1, #1391	; 0x56f
 8002330:	4863      	ldr	r0, [pc, #396]	; (80024c0 <serializeConnectPacket+0x1c8>)
 8002332:	f00a fc49 	bl	800cbc8 <__assert_func>
    assert( pFixedBuffer->pBuffer != NULL );
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d106      	bne.n	800234c <serializeConnectPacket+0x54>
 800233e:	4b62      	ldr	r3, [pc, #392]	; (80024c8 <serializeConnectPacket+0x1d0>)
 8002340:	4a5e      	ldr	r2, [pc, #376]	; (80024bc <serializeConnectPacket+0x1c4>)
 8002342:	f44f 61ae 	mov.w	r1, #1392	; 0x570
 8002346:	485e      	ldr	r0, [pc, #376]	; (80024c0 <serializeConnectPacket+0x1c8>)
 8002348:	f00a fc3e 	bl	800cbc8 <__assert_func>

    pIndex = pFixedBuffer->pBuffer;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	613b      	str	r3, [r7, #16]
    /* The first byte in the CONNECT packet is the control packet type. */
    *pIndex = MQTT_PACKET_TYPE_CONNECT;
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	2210      	movs	r2, #16
 8002356:	701a      	strb	r2, [r3, #0]
    pIndex++;
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	3301      	adds	r3, #1
 800235c:	613b      	str	r3, [r7, #16]

    /* The remaining length of the CONNECT packet is encoded starting from the
     * second byte. The remaining length does not include the length of the fixed
     * header or the encoding of the remaining length. */
    pIndex = encodeRemainingLength( pIndex, remainingLength );
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	6938      	ldr	r0, [r7, #16]
 8002362:	f7ff fabb 	bl	80018dc <encodeRemainingLength>
 8002366:	6138      	str	r0, [r7, #16]

    /* The string "MQTT" is placed at the beginning of the CONNECT packet's variable
     * header. This string is 4 bytes long. */
    pIndex = encodeString( pIndex, "MQTT", 4 );
 8002368:	2204      	movs	r2, #4
 800236a:	4958      	ldr	r1, [pc, #352]	; (80024cc <serializeConnectPacket+0x1d4>)
 800236c:	6938      	ldr	r0, [r7, #16]
 800236e:	f7ff faed 	bl	800194c <encodeString>
 8002372:	6138      	str	r0, [r7, #16]

    /* The MQTT protocol version is the second field of the variable header. */
    *pIndex = MQTT_VERSION_3_1_1;
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	2204      	movs	r2, #4
 8002378:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	3301      	adds	r3, #1
 800237e:	613b      	str	r3, [r7, #16]

    /* Set the clean session flag if needed. */
    if( pConnectInfo->cleanSession == true )
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <serializeConnectPacket+0x98>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_CLEAN );
 8002388:	7dfb      	ldrb	r3, [r7, #23]
 800238a:	f043 0302 	orr.w	r3, r3, #2
 800238e:	75fb      	strb	r3, [r7, #23]
    }

    /* Set the flags for username and password if provided. */
    if( pConnectInfo->pUserName != NULL )
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <serializeConnectPacket+0xa8>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_USERNAME );
 8002398:	7dfb      	ldrb	r3, [r7, #23]
 800239a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800239e:	75fb      	strb	r3, [r7, #23]
    }

    if( pConnectInfo->pPassword != NULL )
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <serializeConnectPacket+0xb8>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_PASSWORD );
 80023a8:	7dfb      	ldrb	r3, [r7, #23]
 80023aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023ae:	75fb      	strb	r3, [r7, #23]
    }

    /* Set will flag if a Last Will and Testament is provided. */
    if( pWillInfo != NULL )
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d01c      	beq.n	80023f0 <serializeConnectPacket+0xf8>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL );
 80023b6:	7dfb      	ldrb	r3, [r7, #23]
 80023b8:	f043 0304 	orr.w	r3, r3, #4
 80023bc:	75fb      	strb	r3, [r7, #23]

        /* Flags only need to be changed for Will QoS 1 or 2. */
        if( pWillInfo->qos == MQTTQoS1 )
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d104      	bne.n	80023d0 <serializeConnectPacket+0xd8>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_QOS1 );
 80023c6:	7dfb      	ldrb	r3, [r7, #23]
 80023c8:	f043 0308 	orr.w	r3, r3, #8
 80023cc:	75fb      	strb	r3, [r7, #23]
 80023ce:	e007      	b.n	80023e0 <serializeConnectPacket+0xe8>
        }
        else if( pWillInfo->qos == MQTTQoS2 )
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d103      	bne.n	80023e0 <serializeConnectPacket+0xe8>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_QOS2 );
 80023d8:	7dfb      	ldrb	r3, [r7, #23]
 80023da:	f043 0310 	orr.w	r3, r3, #16
 80023de:	75fb      	strb	r3, [r7, #23]
        else
        {
            /* Empty else MISRA 15.7 */
        }

        if( pWillInfo->retain == true )
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	785b      	ldrb	r3, [r3, #1]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <serializeConnectPacket+0xf8>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_RETAIN );
 80023e8:	7dfb      	ldrb	r3, [r7, #23]
 80023ea:	f043 0320 	orr.w	r3, r3, #32
 80023ee:	75fb      	strb	r3, [r7, #23]
        }
    }

    *pIndex = connectFlags;
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	7dfa      	ldrb	r2, [r7, #23]
 80023f4:	701a      	strb	r2, [r3, #0]
    pIndex++;
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	3301      	adds	r3, #1
 80023fa:	613b      	str	r3, [r7, #16]

    /* Write the 2 bytes of the keep alive interval into the CONNECT packet. */
    *pIndex = UINT16_HIGH_BYTE( pConnectInfo->keepAliveSeconds );
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	885b      	ldrh	r3, [r3, #2]
 8002400:	0a1b      	lsrs	r3, r3, #8
 8002402:	b29b      	uxth	r3, r3
 8002404:	b2da      	uxtb	r2, r3
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	701a      	strb	r2, [r3, #0]
    *( pIndex + 1 ) = UINT16_LOW_BYTE( pConnectInfo->keepAliveSeconds );
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	885a      	ldrh	r2, [r3, #2]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	3301      	adds	r3, #1
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]
    pIndex += 2;
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	3302      	adds	r3, #2
 800241a:	613b      	str	r3, [r7, #16]

    /* Write the client identifier into the CONNECT packet. */
    pIndex = encodeString( pIndex,
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6859      	ldr	r1, [r3, #4]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	891b      	ldrh	r3, [r3, #8]
 8002424:	461a      	mov	r2, r3
 8002426:	6938      	ldr	r0, [r7, #16]
 8002428:	f7ff fa90 	bl	800194c <encodeString>
 800242c:	6138      	str	r0, [r7, #16]
                           pConnectInfo->pClientIdentifier,
                           pConnectInfo->clientIdentifierLength );

    /* Write the will topic name and message into the CONNECT packet if provided. */
    if( pWillInfo != NULL )
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d012      	beq.n	800245a <serializeConnectPacket+0x162>
    {
        pIndex = encodeString( pIndex,
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	6859      	ldr	r1, [r3, #4]
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	891b      	ldrh	r3, [r3, #8]
 800243c:	461a      	mov	r2, r3
 800243e:	6938      	ldr	r0, [r7, #16]
 8002440:	f7ff fa84 	bl	800194c <encodeString>
 8002444:	6138      	str	r0, [r7, #16]
                               pWillInfo->pTopicName,
                               pWillInfo->topicNameLength );

        pIndex = encodeString( pIndex,
                               pWillInfo->pPayload,
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	68d9      	ldr	r1, [r3, #12]
                               ( uint16_t ) pWillInfo->payloadLength );
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	691b      	ldr	r3, [r3, #16]
        pIndex = encodeString( pIndex,
 800244e:	b29b      	uxth	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	6938      	ldr	r0, [r7, #16]
 8002454:	f7ff fa7a 	bl	800194c <encodeString>
 8002458:	6138      	str	r0, [r7, #16]
    }

    /* Encode the user name if provided. */
    if( pConnectInfo->pUserName != NULL )
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d008      	beq.n	8002474 <serializeConnectPacket+0x17c>
    {
        pIndex = encodeString( pIndex, pConnectInfo->pUserName, pConnectInfo->userNameLength );
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	68d9      	ldr	r1, [r3, #12]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8a1b      	ldrh	r3, [r3, #16]
 800246a:	461a      	mov	r2, r3
 800246c:	6938      	ldr	r0, [r7, #16]
 800246e:	f7ff fa6d 	bl	800194c <encodeString>
 8002472:	6138      	str	r0, [r7, #16]
    }

    /* Encode the password if provided. */
    if( pConnectInfo->pPassword != NULL )
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <serializeConnectPacket+0x196>
    {
        pIndex = encodeString( pIndex, pConnectInfo->pPassword, pConnectInfo->passwordLength );
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6959      	ldr	r1, [r3, #20]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8b1b      	ldrh	r3, [r3, #24]
 8002484:	461a      	mov	r2, r3
 8002486:	6938      	ldr	r0, [r7, #16]
 8002488:	f7ff fa60 	bl	800194c <encodeString>
 800248c:	6138      	str	r0, [r7, #16]
    LogDebug( ( "Length of serialized CONNECT packet is %lu.",
                ( ( unsigned long ) ( pIndex - pFixedBuffer->pBuffer ) ) ) );

    /* Ensure that the difference between the end and beginning of the buffer
     * is less than the buffer size. */
    assert( ( ( size_t ) ( pIndex - pFixedBuffer->pBuffer ) ) <= pFixedBuffer->size );
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	461a      	mov	r2, r3
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	429a      	cmp	r2, r3
 800249e:	d906      	bls.n	80024ae <serializeConnectPacket+0x1b6>
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <serializeConnectPacket+0x1d8>)
 80024a2:	4a06      	ldr	r2, [pc, #24]	; (80024bc <serializeConnectPacket+0x1c4>)
 80024a4:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
 80024a8:	4805      	ldr	r0, [pc, #20]	; (80024c0 <serializeConnectPacket+0x1c8>)
 80024aa:	f00a fb8d 	bl	800cbc8 <__assert_func>
}
 80024ae:	bf00      	nop
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	0800e990 	.word	0x0800e990
 80024bc:	0800f3fc 	.word	0x0800f3fc
 80024c0:	0800e6d8 	.word	0x0800e6d8
 80024c4:	0800e744 	.word	0x0800e744
 80024c8:	0800e75c 	.word	0x0800e75c
 80024cc:	0800e9a8 	.word	0x0800e9a8
 80024d0:	0800e800 	.word	0x0800e800

080024d4 <MQTT_GetConnectPacketSize>:

MQTTStatus_t MQTT_GetConnectPacketSize( const MQTTConnectInfo_t * pConnectInfo,
                                        const MQTTPublishInfo_t * pWillInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 80024e2:	2300      	movs	r3, #0
 80024e4:	77fb      	strb	r3, [r7, #31]
    size_t remainingLength;

    /* The CONNECT packet will always include a 10-byte variable header. */
    size_t connectPacketSize = MQTT_PACKET_CONNECT_HEADER_SIZE;
 80024e6:	230a      	movs	r3, #10
 80024e8:	61bb      	str	r3, [r7, #24]

    /* Validate arguments. */
    if( ( pConnectInfo == NULL ) || ( pRemainingLength == NULL ) ||
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <MQTT_GetConnectPacketSize+0x28>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <MQTT_GetConnectPacketSize+0x28>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d102      	bne.n	8002502 <MQTT_GetConnectPacketSize+0x2e>
        LogError( ( "Argument cannot be NULL: pConnectInfo=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pConnectInfo,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 80024fc:	2301      	movs	r3, #1
 80024fe:	77fb      	strb	r3, [r7, #31]
 8002500:	e04f      	b.n	80025a2 <MQTT_GetConnectPacketSize+0xce>
    }
    else if( ( pConnectInfo->clientIdentifierLength == 0U ) || ( pConnectInfo->pClientIdentifier == NULL ) )
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	891b      	ldrh	r3, [r3, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <MQTT_GetConnectPacketSize+0x3e>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d102      	bne.n	8002518 <MQTT_GetConnectPacketSize+0x44>
    {
        LogError( ( "Mqtt_GetConnectPacketSize() client identifier must be set." ) );
        status = MQTTBadParameter;
 8002512:	2301      	movs	r3, #1
 8002514:	77fb      	strb	r3, [r7, #31]
 8002516:	e044      	b.n	80025a2 <MQTT_GetConnectPacketSize+0xce>
    }
    else if( ( pWillInfo != NULL ) && ( pWillInfo->payloadLength > ( size_t ) UINT16_MAX ) )
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d007      	beq.n	800252e <MQTT_GetConnectPacketSize+0x5a>
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002526:	d302      	bcc.n	800252e <MQTT_GetConnectPacketSize+0x5a>
         * packet will never be larger than 327699 bytes. */
        LogError( ( "The Will Message length must not exceed %d. "
                    "pWillInfo->payloadLength=%lu.",
                    UINT16_MAX,
                    ( unsigned long ) pWillInfo->payloadLength ) );
        status = MQTTBadParameter;
 8002528:	2301      	movs	r3, #1
 800252a:	77fb      	strb	r3, [r7, #31]
 800252c:	e039      	b.n	80025a2 <MQTT_GetConnectPacketSize+0xce>
    }
    else
    {
        /* Add the length of the client identifier. */
        connectPacketSize += pConnectInfo->clientIdentifierLength + sizeof( uint16_t );
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	891b      	ldrh	r3, [r3, #8]
 8002532:	461a      	mov	r2, r3
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	4413      	add	r3, r2
 8002538:	3302      	adds	r3, #2
 800253a:	61bb      	str	r3, [r7, #24]

        /* Add the lengths of the will message and topic name if provided. */
        if( pWillInfo != NULL )
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d009      	beq.n	8002556 <MQTT_GetConnectPacketSize+0x82>
        {
            connectPacketSize += pWillInfo->topicNameLength + sizeof( uint16_t ) +
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	891b      	ldrh	r3, [r3, #8]
 8002546:	461a      	mov	r2, r3
                                 pWillInfo->payloadLength + sizeof( uint16_t );
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	691b      	ldr	r3, [r3, #16]
            connectPacketSize += pWillInfo->topicNameLength + sizeof( uint16_t ) +
 800254c:	441a      	add	r2, r3
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	4413      	add	r3, r2
 8002552:	3304      	adds	r3, #4
 8002554:	61bb      	str	r3, [r7, #24]
        }

        /* Add the lengths of the user name and password if provided. */
        if( pConnectInfo->pUserName != NULL )
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d006      	beq.n	800256c <MQTT_GetConnectPacketSize+0x98>
        {
            connectPacketSize += pConnectInfo->userNameLength + sizeof( uint16_t );
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8a1b      	ldrh	r3, [r3, #16]
 8002562:	461a      	mov	r2, r3
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	4413      	add	r3, r2
 8002568:	3302      	adds	r3, #2
 800256a:	61bb      	str	r3, [r7, #24]
        }

        if( pConnectInfo->pPassword != NULL )
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d006      	beq.n	8002582 <MQTT_GetConnectPacketSize+0xae>
        {
            connectPacketSize += pConnectInfo->passwordLength + sizeof( uint16_t );
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8b1b      	ldrh	r3, [r3, #24]
 8002578:	461a      	mov	r2, r3
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	4413      	add	r3, r2
 800257e:	3302      	adds	r3, #2
 8002580:	61bb      	str	r3, [r7, #24]
        }

        /* At this point, the "Remaining Length" field of the MQTT CONNECT packet has
         * been calculated. */
        remainingLength = connectPacketSize;
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	617b      	str	r3, [r7, #20]

        /* Calculate the full size of the MQTT CONNECT packet by adding the size of
         * the "Remaining Length" field plus 1 byte for the "Packet Type" field. */
        connectPacketSize += 1U + remainingLengthEncodedSize( connectPacketSize );
 8002586:	69b8      	ldr	r0, [r7, #24]
 8002588:	f7ff f986 	bl	8001898 <remainingLengthEncodedSize>
 800258c:	4603      	mov	r3, r0
 800258e:	3301      	adds	r3, #1
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4413      	add	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
         * (maximum username length) 65535 + (encoded length) 2 +
         * (maximum password length) 65535 + (encoded length) 2 +
         * (packet type field length) 1 +
         * (CONNECT packet encoded length) 3 = 327699 */

        *pRemainingLength = remainingLength;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	601a      	str	r2, [r3, #0]
        *pPacketSize = connectPacketSize;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	601a      	str	r2, [r3, #0]
        LogDebug( ( "CONNECT packet remaining length=%lu and packet size=%lu.",
                    ( unsigned long ) *pRemainingLength,
                    ( unsigned long ) *pPacketSize ) );
    }

    return status;
 80025a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3720      	adds	r7, #32
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <MQTT_SerializeConnect>:

MQTTStatus_t MQTT_SerializeConnect( const MQTTConnectInfo_t * pConnectInfo,
                                    const MQTTPublishInfo_t * pWillInfo,
                                    size_t remainingLength,
                                    const MQTTFixedBuffer_t * pFixedBuffer )
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 80025ba:	2300      	movs	r3, #0
 80025bc:	75fb      	strb	r3, [r7, #23]
    size_t connectPacketSize = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	613b      	str	r3, [r7, #16]

    /* Validate arguments. */
    if( ( pConnectInfo == NULL ) || ( pFixedBuffer == NULL ) )
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <MQTT_SerializeConnect+0x22>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d102      	bne.n	80025d4 <MQTT_SerializeConnect+0x28>
    {
        LogError( ( "Argument cannot be NULL: pConnectInfo=%p, "
                    "pFixedBuffer=%p.",
                    ( void * ) pConnectInfo,
                    ( void * ) pFixedBuffer ) );
        status = MQTTBadParameter;
 80025ce:	2301      	movs	r3, #1
 80025d0:	75fb      	strb	r3, [r7, #23]
 80025d2:	e026      	b.n	8002622 <MQTT_SerializeConnect+0x76>
    }
    /* A buffer must be configured for serialization. */
    else if( pFixedBuffer->pBuffer == NULL )
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d102      	bne.n	80025e2 <MQTT_SerializeConnect+0x36>
    {
        LogError( ( "Argument cannot be NULL: pFixedBuffer->pBuffer is NULL." ) );
        status = MQTTBadParameter;
 80025dc:	2301      	movs	r3, #1
 80025de:	75fb      	strb	r3, [r7, #23]
 80025e0:	e01f      	b.n	8002622 <MQTT_SerializeConnect+0x76>
    }
    else if( ( pWillInfo != NULL ) && ( pWillInfo->pTopicName == NULL ) )
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d006      	beq.n	80025f6 <MQTT_SerializeConnect+0x4a>
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d102      	bne.n	80025f6 <MQTT_SerializeConnect+0x4a>
    {
        LogError( ( "pWillInfo->pTopicName cannot be NULL if Will is present." ) );
        status = MQTTBadParameter;
 80025f0:	2301      	movs	r3, #1
 80025f2:	75fb      	strb	r3, [r7, #23]
 80025f4:	e015      	b.n	8002622 <MQTT_SerializeConnect+0x76>
    else
    {
        /* Calculate CONNECT packet size. Overflow in in this addition is not checked
         * because it is part of the API contract to call Mqtt_GetConnectPacketSize()
         * before this function. */
        connectPacketSize = remainingLength + remainingLengthEncodedSize( remainingLength ) + 1U;
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff f94e 	bl	8001898 <remainingLengthEncodedSize>
 80025fc:	4602      	mov	r2, r0
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4413      	add	r3, r2
 8002602:	3301      	adds	r3, #1
 8002604:	613b      	str	r3, [r7, #16]

        /* Check that the full packet size fits within the given buffer. */
        if( connectPacketSize > pFixedBuffer->size )
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	429a      	cmp	r2, r3
 800260e:	d902      	bls.n	8002616 <MQTT_SerializeConnect+0x6a>
        {
            LogError( ( "Buffer size of %lu is not sufficient to hold "
                        "serialized CONNECT packet of size of %lu.",
                        ( unsigned long ) pFixedBuffer->size,
                        ( unsigned long ) connectPacketSize ) );
            status = MQTTNoMemory;
 8002610:	2302      	movs	r3, #2
 8002612:	75fb      	strb	r3, [r7, #23]
 8002614:	e005      	b.n	8002622 <MQTT_SerializeConnect+0x76>
        }
        else
        {
            serializeConnectPacket( pConnectInfo,
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	68b9      	ldr	r1, [r7, #8]
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f7ff fe6b 	bl	80022f8 <serializeConnectPacket>
                                    remainingLength,
                                    pFixedBuffer );
        }
    }

    return status;
 8002622:	7dfb      	ldrb	r3, [r7, #23]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <MQTT_GetPublishPacketSize>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetPublishPacketSize( const MQTTPublishInfo_t * pPublishInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 8002638:	2300      	movs	r3, #0
 800263a:	75fb      	strb	r3, [r7, #23]

    if( ( pPublishInfo == NULL ) || ( pRemainingLength == NULL ) || ( pPacketSize == NULL ) )
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d005      	beq.n	800264e <MQTT_GetPublishPacketSize+0x22>
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <MQTT_GetPublishPacketSize+0x22>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d102      	bne.n	8002654 <MQTT_GetPublishPacketSize+0x28>
        LogError( ( "Argument cannot be NULL: pPublishInfo=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pPublishInfo,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800264e:	2301      	movs	r3, #1
 8002650:	75fb      	strb	r3, [r7, #23]
 8002652:	e017      	b.n	8002684 <MQTT_GetPublishPacketSize+0x58>
    }
    else if( ( pPublishInfo->pTopicName == NULL ) || ( pPublishInfo->topicNameLength == 0U ) )
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <MQTT_GetPublishPacketSize+0x38>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	891b      	ldrh	r3, [r3, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d102      	bne.n	800266a <MQTT_GetPublishPacketSize+0x3e>
    {
        LogError( ( "Invalid topic name for PUBLISH: pTopicName=%p, "
                    "topicNameLength=%hu.",
                    ( void * ) pPublishInfo->pTopicName,
                    ( unsigned short ) pPublishInfo->topicNameLength ) );
        status = MQTTBadParameter;
 8002664:	2301      	movs	r3, #1
 8002666:	75fb      	strb	r3, [r7, #23]
 8002668:	e00c      	b.n	8002684 <MQTT_GetPublishPacketSize+0x58>
    }
    else
    {
        /* Calculate the "Remaining length" field and total packet size. If it exceeds
         * what is allowed in the MQTT standard, return an error. */
        if( calculatePublishPacketSize( pPublishInfo, pRemainingLength, pPacketSize ) == false )
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f7ff f9ac 	bl	80019cc <calculatePublishPacketSize>
 8002674:	4603      	mov	r3, r0
 8002676:	f083 0301 	eor.w	r3, r3, #1
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MQTT_GetPublishPacketSize+0x58>
        {
            LogError( ( "PUBLISH packet remaining length exceeds %lu, which is the "
                        "maximum size allowed by MQTT 3.1.1.",
                        MQTT_MAX_REMAINING_LENGTH ) );
            status = MQTTBadParameter;
 8002680:	2301      	movs	r3, #1
 8002682:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 8002684:	7dfb      	ldrb	r3, [r7, #23]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <MQTT_SerializePublishHeader>:
MQTTStatus_t MQTT_SerializePublishHeader( const MQTTPublishInfo_t * pPublishInfo,
                                          uint16_t packetId,
                                          size_t remainingLength,
                                          const MQTTFixedBuffer_t * pFixedBuffer,
                                          size_t * pHeaderSize )
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b088      	sub	sp, #32
 8002692:	af02      	add	r7, sp, #8
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	607a      	str	r2, [r7, #4]
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	460b      	mov	r3, r1
 800269c:	817b      	strh	r3, [r7, #10]
    MQTTStatus_t status = MQTTSuccess;
 800269e:	2300      	movs	r3, #0
 80026a0:	75fb      	strb	r3, [r7, #23]
    size_t packetSize = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	613b      	str	r3, [r7, #16]

    if( ( pFixedBuffer == NULL ) || ( pPublishInfo == NULL ) ||
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <MQTT_SerializePublishHeader+0x2a>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <MQTT_SerializePublishHeader+0x2a>
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d102      	bne.n	80026be <MQTT_SerializePublishHeader+0x30>
        LogError( ( "Argument cannot be NULL: pFixedBuffer=%p, "
                    "pPublishInfo=%p, pHeaderSize=%p.",
                    ( void * ) pFixedBuffer,
                    ( void * ) pPublishInfo,
                    ( void * ) pHeaderSize ) );
        status = MQTTBadParameter;
 80026b8:	2301      	movs	r3, #1
 80026ba:	75fb      	strb	r3, [r7, #23]
 80026bc:	e031      	b.n	8002722 <MQTT_SerializePublishHeader+0x94>
    }
    /* A buffer must be configured for serialization. */
    else if( pFixedBuffer->pBuffer == NULL )
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d102      	bne.n	80026cc <MQTT_SerializePublishHeader+0x3e>
    {
        LogError( ( "Argument cannot be NULL: pFixedBuffer->pBuffer is NULL." ) );
        status = MQTTBadParameter;
 80026c6:	2301      	movs	r3, #1
 80026c8:	75fb      	strb	r3, [r7, #23]
 80026ca:	e02a      	b.n	8002722 <MQTT_SerializePublishHeader+0x94>
    }
    else if( ( pPublishInfo->pTopicName == NULL ) || ( pPublishInfo->topicNameLength == 0U ) )
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <MQTT_SerializePublishHeader+0x4e>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	891b      	ldrh	r3, [r3, #8]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d102      	bne.n	80026e2 <MQTT_SerializePublishHeader+0x54>
    {
        LogError( ( "Invalid topic name for publish: pTopicName=%p, "
                    "topicNameLength=%hu.",
                    ( void * ) pPublishInfo->pTopicName,
                    ( unsigned short ) pPublishInfo->topicNameLength ) );
        status = MQTTBadParameter;
 80026dc:	2301      	movs	r3, #1
 80026de:	75fb      	strb	r3, [r7, #23]
 80026e0:	e01f      	b.n	8002722 <MQTT_SerializePublishHeader+0x94>
    }
    else if( ( pPublishInfo->qos != MQTTQoS0 ) && ( packetId == 0U ) )
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d005      	beq.n	80026f6 <MQTT_SerializePublishHeader+0x68>
 80026ea:	897b      	ldrh	r3, [r7, #10]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d102      	bne.n	80026f6 <MQTT_SerializePublishHeader+0x68>
    {
        LogError( ( "Packet Id is 0 for publish with QoS=%hu.",
                    ( unsigned short ) pPublishInfo->qos ) );
        status = MQTTBadParameter;
 80026f0:	2301      	movs	r3, #1
 80026f2:	75fb      	strb	r3, [r7, #23]
 80026f4:	e015      	b.n	8002722 <MQTT_SerializePublishHeader+0x94>
    }
    else if( ( pPublishInfo->dup == true ) && ( pPublishInfo->qos == MQTTQoS0 ) )
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	789b      	ldrb	r3, [r3, #2]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d006      	beq.n	800270c <MQTT_SerializePublishHeader+0x7e>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d102      	bne.n	800270c <MQTT_SerializePublishHeader+0x7e>
    {
        LogError( ( "Duplicate flag is set for PUBLISH with Qos 0." ) );
        status = MQTTBadParameter;
 8002706:	2301      	movs	r3, #1
 8002708:	75fb      	strb	r3, [r7, #23]
 800270a:	e00a      	b.n	8002722 <MQTT_SerializePublishHeader+0x94>
        /* Length of serialized packet = First byte
         *                               + Length of encoded remaining length
         *                               + Remaining length
         *                               - Payload Length.
         */
        packetSize = 1U + remainingLengthEncodedSize( remainingLength )
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff f8c3 	bl	8001898 <remainingLengthEncodedSize>
 8002712:	4602      	mov	r2, r0
                     + remainingLength
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	441a      	add	r2, r3
                     - pPublishInfo->payloadLength;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	1ad3      	subs	r3, r2, r3
        packetSize = 1U + remainingLengthEncodedSize( remainingLength )
 800271e:	3301      	adds	r3, #1
 8002720:	613b      	str	r3, [r7, #16]
    }

    if( ( status == MQTTSuccess ) && ( packetSize > pFixedBuffer->size ) )
 8002722:	7dfb      	ldrb	r3, [r7, #23]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d106      	bne.n	8002736 <MQTT_SerializePublishHeader+0xa8>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	429a      	cmp	r2, r3
 8002730:	d901      	bls.n	8002736 <MQTT_SerializePublishHeader+0xa8>
    {
        LogError( ( "Buffer size of %lu is not sufficient to hold "
                    "serialized PUBLISH header packet of size of %lu.",
                    ( unsigned long ) pFixedBuffer->size,
                    ( unsigned long ) ( packetSize - pPublishInfo->payloadLength ) ) );
        status = MQTTNoMemory;
 8002732:	2302      	movs	r3, #2
 8002734:	75fb      	strb	r3, [r7, #23]
    }

    if( status == MQTTSuccess )
 8002736:	7dfb      	ldrb	r3, [r7, #23]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10a      	bne.n	8002752 <MQTT_SerializePublishHeader+0xc4>
    {
        /* Serialize publish without copying the payload. */
        serializePublishCommon( pPublishInfo,
 800273c:	897a      	ldrh	r2, [r7, #10]
 800273e:	2300      	movs	r3, #0
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f7ff f9b8 	bl	8001abc <serializePublishCommon>
                                packetId,
                                pFixedBuffer,
                                false );

        /* Header size is the same as calculated packet size. */
        *pHeaderSize = packetSize;
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	601a      	str	r2, [r3, #0]
    }

    return status;
 8002752:	7dfb      	ldrb	r3, [r7, #23]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <MQTT_SerializeAck>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_SerializeAck( const MQTTFixedBuffer_t * pFixedBuffer,
                                uint8_t packetType,
                                uint16_t packetId )
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	460b      	mov	r3, r1
 8002766:	70fb      	strb	r3, [r7, #3]
 8002768:	4613      	mov	r3, r2
 800276a:	803b      	strh	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800276c:	2300      	movs	r3, #0
 800276e:	73fb      	strb	r3, [r7, #15]

    if( pFixedBuffer == NULL )
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d102      	bne.n	800277c <MQTT_SerializeAck+0x20>
    {
        LogError( ( "Provided buffer is NULL." ) );
        status = MQTTBadParameter;
 8002776:	2301      	movs	r3, #1
 8002778:	73fb      	strb	r3, [r7, #15]
 800277a:	e03b      	b.n	80027f4 <MQTT_SerializeAck+0x98>
    }
    else if( pFixedBuffer->pBuffer == NULL )
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d102      	bne.n	800278a <MQTT_SerializeAck+0x2e>
    {
        LogError( ( "pFixedBuffer->pBuffer cannot be NULL." ) );
        status = MQTTBadParameter;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
 8002788:	e034      	b.n	80027f4 <MQTT_SerializeAck+0x98>
    }
    /* The buffer must be able to fit 4 bytes for the packet. */
    else if( pFixedBuffer->size < MQTT_PUBLISH_ACK_PACKET_SIZE )
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b03      	cmp	r3, #3
 8002790:	d802      	bhi.n	8002798 <MQTT_SerializeAck+0x3c>
    {
        LogError( ( "Insufficient memory for packet." ) );
        status = MQTTNoMemory;
 8002792:	2302      	movs	r3, #2
 8002794:	73fb      	strb	r3, [r7, #15]
 8002796:	e02d      	b.n	80027f4 <MQTT_SerializeAck+0x98>
    }
    else if( packetId == 0U )
 8002798:	883b      	ldrh	r3, [r7, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d102      	bne.n	80027a4 <MQTT_SerializeAck+0x48>
    {
        LogError( ( "Packet ID cannot be 0." ) );
        status = MQTTBadParameter;
 800279e:	2301      	movs	r3, #1
 80027a0:	73fb      	strb	r3, [r7, #15]
 80027a2:	e027      	b.n	80027f4 <MQTT_SerializeAck+0x98>
    }
    else
    {
        switch( packetType )
 80027a4:	78fb      	ldrb	r3, [r7, #3]
 80027a6:	2b70      	cmp	r3, #112	; 0x70
 80027a8:	d009      	beq.n	80027be <MQTT_SerializeAck+0x62>
 80027aa:	2b70      	cmp	r3, #112	; 0x70
 80027ac:	dc1f      	bgt.n	80027ee <MQTT_SerializeAck+0x92>
 80027ae:	2b62      	cmp	r3, #98	; 0x62
 80027b0:	d005      	beq.n	80027be <MQTT_SerializeAck+0x62>
 80027b2:	2b62      	cmp	r3, #98	; 0x62
 80027b4:	dc1b      	bgt.n	80027ee <MQTT_SerializeAck+0x92>
 80027b6:	2b40      	cmp	r3, #64	; 0x40
 80027b8:	d001      	beq.n	80027be <MQTT_SerializeAck+0x62>
 80027ba:	2b50      	cmp	r3, #80	; 0x50
 80027bc:	d117      	bne.n	80027ee <MQTT_SerializeAck+0x92>
            /* Only publish acks are serialized by the client. */
            case MQTT_PACKET_TYPE_PUBACK:
            case MQTT_PACKET_TYPE_PUBREC:
            case MQTT_PACKET_TYPE_PUBREL:
            case MQTT_PACKET_TYPE_PUBCOMP:
                pFixedBuffer->pBuffer[ 0 ] = packetType;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	78fa      	ldrb	r2, [r7, #3]
 80027c4:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 1 ] = MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	3301      	adds	r3, #1
 80027cc:	2202      	movs	r2, #2
 80027ce:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 2 ] = UINT16_HIGH_BYTE( packetId );
 80027d0:	883b      	ldrh	r3, [r7, #0]
 80027d2:	0a1b      	lsrs	r3, r3, #8
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	3302      	adds	r3, #2
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 3 ] = UINT16_LOW_BYTE( packetId );
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	3303      	adds	r3, #3
 80027e6:	883a      	ldrh	r2, [r7, #0]
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	701a      	strb	r2, [r3, #0]
                break;
 80027ec:	e002      	b.n	80027f4 <MQTT_SerializeAck+0x98>

            default:
                LogError( ( "Packet type is not a publish ACK: Packet type=%02x",
                            ( unsigned int ) packetType ) );
                status = MQTTBadParameter;
 80027ee:	2301      	movs	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
                break;
 80027f2:	bf00      	nop
        }
    }

    return status;
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <MQTT_GetPingreqPacketSize>:
}

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetPingreqPacketSize( size_t * pPacketSize )
{
 8002802:	b480      	push	{r7}
 8002804:	b085      	sub	sp, #20
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800280a:	2300      	movs	r3, #0
 800280c:	73fb      	strb	r3, [r7, #15]

    if( pPacketSize == NULL )
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d102      	bne.n	800281a <MQTT_GetPingreqPacketSize+0x18>
    {
        LogError( ( "pPacketSize is NULL." ) );
        status = MQTTBadParameter;
 8002814:	2301      	movs	r3, #1
 8002816:	73fb      	strb	r3, [r7, #15]
 8002818:	e002      	b.n	8002820 <MQTT_GetPingreqPacketSize+0x1e>
    }
    else
    {
        /* MQTT PINGREQ packets always have the same size. */
        *pPacketSize = MQTT_PACKET_PINGREQ_SIZE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2202      	movs	r2, #2
 800281e:	601a      	str	r2, [r3, #0]
    }

    return status;
 8002820:	7bfb      	ldrb	r3, [r7, #15]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <MQTT_SerializePingreq>:

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_SerializePingreq( const MQTTFixedBuffer_t * pFixedBuffer )
{
 800282e:	b480      	push	{r7}
 8002830:	b085      	sub	sp, #20
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 8002836:	2300      	movs	r3, #0
 8002838:	73fb      	strb	r3, [r7, #15]

    if( pFixedBuffer == NULL )
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d102      	bne.n	8002846 <MQTT_SerializePingreq+0x18>
    {
        LogError( ( "pFixedBuffer is NULL." ) );
        status = MQTTBadParameter;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
 8002844:	e005      	b.n	8002852 <MQTT_SerializePingreq+0x24>
    }
    else if( pFixedBuffer->pBuffer == NULL )
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <MQTT_SerializePingreq+0x24>
    {
        LogError( ( "pFixedBuffer->pBuffer cannot be NULL." ) );
        status = MQTTBadParameter;
 800284e:	2301      	movs	r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    if( status == MQTTSuccess )
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d105      	bne.n	8002864 <MQTT_SerializePingreq+0x36>
    {
        if( pFixedBuffer->size < MQTT_PACKET_PINGREQ_SIZE )
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d801      	bhi.n	8002864 <MQTT_SerializePingreq+0x36>
        {
            LogError( ( "Buffer size of %lu is not sufficient to hold "
                        "serialized PINGREQ packet of size of %lu.",
                        ( unsigned long ) pFixedBuffer->size,
                        MQTT_PACKET_PINGREQ_SIZE ) );
            status = MQTTNoMemory;
 8002860:	2302      	movs	r3, #2
 8002862:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( status == MQTTSuccess )
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d108      	bne.n	800287c <MQTT_SerializePingreq+0x4e>
    {
        /* Ping request packets are always the same. */
        pFixedBuffer->pBuffer[ 0 ] = MQTT_PACKET_TYPE_PINGREQ;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	22c0      	movs	r2, #192	; 0xc0
 8002870:	701a      	strb	r2, [r3, #0]
        pFixedBuffer->pBuffer[ 1 ] = 0x00;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	3301      	adds	r3, #1
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]
    }

    return status;
 800287c:	7bfb      	ldrb	r3, [r7, #15]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <MQTT_DeserializePublish>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_DeserializePublish( const MQTTPacketInfo_t * pIncomingPacket,
                                      uint16_t * pPacketId,
                                      MQTTPublishInfo_t * pPublishInfo )
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b086      	sub	sp, #24
 800288e:	af00      	add	r7, sp, #0
 8002890:	60f8      	str	r0, [r7, #12]
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 8002896:	2300      	movs	r3, #0
 8002898:	75fb      	strb	r3, [r7, #23]

    if( ( pIncomingPacket == NULL ) || ( pPacketId == NULL ) || ( pPublishInfo == NULL ) )
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <MQTT_DeserializePublish+0x22>
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <MQTT_DeserializePublish+0x22>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d102      	bne.n	80028b2 <MQTT_DeserializePublish+0x28>
        LogError( ( "Argument cannot be NULL: pIncomingPacket=%p, "
                    "pPacketId=%p, pPublishInfo=%p",
                    ( void * ) pIncomingPacket,
                    ( void * ) pPacketId,
                    ( void * ) pPublishInfo ) );
        status = MQTTBadParameter;
 80028ac:	2301      	movs	r3, #1
 80028ae:	75fb      	strb	r3, [r7, #23]
 80028b0:	e016      	b.n	80028e0 <MQTT_DeserializePublish+0x56>
    }
    else if( ( pIncomingPacket->type & 0xF0U ) != MQTT_PACKET_TYPE_PUBLISH )
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028ba:	2b30      	cmp	r3, #48	; 0x30
 80028bc:	d002      	beq.n	80028c4 <MQTT_DeserializePublish+0x3a>
    {
        LogError( ( "Packet is not publish. Packet type: %02x.",
                    ( unsigned int ) pIncomingPacket->type ) );
        status = MQTTBadParameter;
 80028be:	2301      	movs	r3, #1
 80028c0:	75fb      	strb	r3, [r7, #23]
 80028c2:	e00d      	b.n	80028e0 <MQTT_DeserializePublish+0x56>
    }
    else if( pIncomingPacket->pRemainingData == NULL )
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d102      	bne.n	80028d2 <MQTT_DeserializePublish+0x48>
    {
        LogError( ( "Argument cannot be NULL: "
                    "pIncomingPacket->pRemainingData is NULL." ) );
        status = MQTTBadParameter;
 80028cc:	2301      	movs	r3, #1
 80028ce:	75fb      	strb	r3, [r7, #23]
 80028d0:	e006      	b.n	80028e0 <MQTT_DeserializePublish+0x56>
    }
    else
    {
        status = deserializePublish( pIncomingPacket, pPacketId, pPublishInfo );
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	68b9      	ldr	r1, [r7, #8]
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f7ff fbe8 	bl	80020ac <deserializePublish>
 80028dc:	4603      	mov	r3, r0
 80028de:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 80028e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <MQTT_DeserializeAck>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_DeserializeAck( const MQTTPacketInfo_t * pIncomingPacket,
                                  uint16_t * pPacketId,
                                  bool * pSessionPresent )
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b086      	sub	sp, #24
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 80028f6:	2300      	movs	r3, #0
 80028f8:	75fb      	strb	r3, [r7, #23]

    if( pIncomingPacket == NULL )
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d102      	bne.n	8002906 <MQTT_DeserializeAck+0x1c>
    {
        LogError( ( "pIncomingPacket cannot be NULL." ) );
        status = MQTTBadParameter;
 8002900:	2301      	movs	r3, #1
 8002902:	75fb      	strb	r3, [r7, #23]
 8002904:	e05f      	b.n	80029c6 <MQTT_DeserializeAck+0xdc>
    }

    /* Pointer for packet identifier cannot be NULL for packets other than
     * CONNACK and PINGRESP. */
    else if( ( pPacketId == NULL ) &&
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10a      	bne.n	8002922 <MQTT_DeserializeAck+0x38>
             ( ( pIncomingPacket->type != MQTT_PACKET_TYPE_CONNACK ) &&
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	781b      	ldrb	r3, [r3, #0]
    else if( ( pPacketId == NULL ) &&
 8002910:	2b20      	cmp	r3, #32
 8002912:	d006      	beq.n	8002922 <MQTT_DeserializeAck+0x38>
               ( pIncomingPacket->type != MQTT_PACKET_TYPE_PINGRESP ) ) )
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	781b      	ldrb	r3, [r3, #0]
             ( ( pIncomingPacket->type != MQTT_PACKET_TYPE_CONNACK ) &&
 8002918:	2bd0      	cmp	r3, #208	; 0xd0
 800291a:	d002      	beq.n	8002922 <MQTT_DeserializeAck+0x38>
    {
        LogError( ( "pPacketId cannot be NULL for packet type %02x.",
                    ( unsigned int ) pIncomingPacket->type ) );
        status = MQTTBadParameter;
 800291c:	2301      	movs	r3, #1
 800291e:	75fb      	strb	r3, [r7, #23]
 8002920:	e051      	b.n	80029c6 <MQTT_DeserializeAck+0xdc>
    }
    /* Pointer for session present cannot be NULL for CONNACK. */
    else if( ( pSessionPresent == NULL ) &&
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d106      	bne.n	8002936 <MQTT_DeserializeAck+0x4c>
             ( pIncomingPacket->type == MQTT_PACKET_TYPE_CONNACK ) )
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	781b      	ldrb	r3, [r3, #0]
    else if( ( pSessionPresent == NULL ) &&
 800292c:	2b20      	cmp	r3, #32
 800292e:	d102      	bne.n	8002936 <MQTT_DeserializeAck+0x4c>
    {
        LogError( ( "pSessionPresent cannot be NULL for CONNACK packet." ) );
        status = MQTTBadParameter;
 8002930:	2301      	movs	r3, #1
 8002932:	75fb      	strb	r3, [r7, #23]
 8002934:	e047      	b.n	80029c6 <MQTT_DeserializeAck+0xdc>
    }

    /* Pointer for remaining data cannot be NULL for packets other
     * than PINGRESP. */
    else if( ( pIncomingPacket->pRemainingData == NULL ) &&
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <MQTT_DeserializeAck+0x62>
             ( pIncomingPacket->type != MQTT_PACKET_TYPE_PINGRESP ) )
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	781b      	ldrb	r3, [r3, #0]
    else if( ( pIncomingPacket->pRemainingData == NULL ) &&
 8002942:	2bd0      	cmp	r3, #208	; 0xd0
 8002944:	d002      	beq.n	800294c <MQTT_DeserializeAck+0x62>
    {
        LogError( ( "Remaining data of incoming packet is NULL." ) );
        status = MQTTBadParameter;
 8002946:	2301      	movs	r3, #1
 8002948:	75fb      	strb	r3, [r7, #23]
 800294a:	e03c      	b.n	80029c6 <MQTT_DeserializeAck+0xdc>
    }
    else
    {
        /* Make sure response packet is a valid ack. */
        switch( pIncomingPacket->type )
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2bd0      	cmp	r3, #208	; 0xd0
 8002952:	d028      	beq.n	80029a6 <MQTT_DeserializeAck+0xbc>
 8002954:	2bd0      	cmp	r3, #208	; 0xd0
 8002956:	dc33      	bgt.n	80029c0 <MQTT_DeserializeAck+0xd6>
 8002958:	2bb0      	cmp	r3, #176	; 0xb0
 800295a:	d02a      	beq.n	80029b2 <MQTT_DeserializeAck+0xc8>
 800295c:	2bb0      	cmp	r3, #176	; 0xb0
 800295e:	dc2f      	bgt.n	80029c0 <MQTT_DeserializeAck+0xd6>
 8002960:	2b90      	cmp	r3, #144	; 0x90
 8002962:	d019      	beq.n	8002998 <MQTT_DeserializeAck+0xae>
 8002964:	2b90      	cmp	r3, #144	; 0x90
 8002966:	dc2b      	bgt.n	80029c0 <MQTT_DeserializeAck+0xd6>
 8002968:	2b70      	cmp	r3, #112	; 0x70
 800296a:	d022      	beq.n	80029b2 <MQTT_DeserializeAck+0xc8>
 800296c:	2b70      	cmp	r3, #112	; 0x70
 800296e:	dc27      	bgt.n	80029c0 <MQTT_DeserializeAck+0xd6>
 8002970:	2b62      	cmp	r3, #98	; 0x62
 8002972:	d01e      	beq.n	80029b2 <MQTT_DeserializeAck+0xc8>
 8002974:	2b62      	cmp	r3, #98	; 0x62
 8002976:	dc23      	bgt.n	80029c0 <MQTT_DeserializeAck+0xd6>
 8002978:	2b50      	cmp	r3, #80	; 0x50
 800297a:	d01a      	beq.n	80029b2 <MQTT_DeserializeAck+0xc8>
 800297c:	2b50      	cmp	r3, #80	; 0x50
 800297e:	dc1f      	bgt.n	80029c0 <MQTT_DeserializeAck+0xd6>
 8002980:	2b20      	cmp	r3, #32
 8002982:	d002      	beq.n	800298a <MQTT_DeserializeAck+0xa0>
 8002984:	2b40      	cmp	r3, #64	; 0x40
 8002986:	d014      	beq.n	80029b2 <MQTT_DeserializeAck+0xc8>
 8002988:	e01a      	b.n	80029c0 <MQTT_DeserializeAck+0xd6>
        {
            case MQTT_PACKET_TYPE_CONNACK:
                status = deserializeConnack( pIncomingPacket, pSessionPresent );
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f7ff fa91 	bl	8001eb4 <deserializeConnack>
 8002992:	4603      	mov	r3, r0
 8002994:	75fb      	strb	r3, [r7, #23]
                break;
 8002996:	e016      	b.n	80029c6 <MQTT_DeserializeAck+0xdc>

            case MQTT_PACKET_TYPE_SUBACK:
                status = deserializeSuback( pIncomingPacket, pPacketId );
 8002998:	68b9      	ldr	r1, [r7, #8]
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f7ff fb38 	bl	8002010 <deserializeSuback>
 80029a0:	4603      	mov	r3, r0
 80029a2:	75fb      	strb	r3, [r7, #23]
                break;
 80029a4:	e00f      	b.n	80029c6 <MQTT_DeserializeAck+0xdc>

            case MQTT_PACKET_TYPE_PINGRESP:
                status = deserializePingresp( pIncomingPacket );
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f7ff fc84 	bl	80022b4 <deserializePingresp>
 80029ac:	4603      	mov	r3, r0
 80029ae:	75fb      	strb	r3, [r7, #23]
                break;
 80029b0:	e009      	b.n	80029c6 <MQTT_DeserializeAck+0xdc>
            case MQTT_PACKET_TYPE_UNSUBACK:
            case MQTT_PACKET_TYPE_PUBACK:
            case MQTT_PACKET_TYPE_PUBREC:
            case MQTT_PACKET_TYPE_PUBREL:
            case MQTT_PACKET_TYPE_PUBCOMP:
                status = deserializeSimpleAck( pIncomingPacket, pPacketId );
 80029b2:	68b9      	ldr	r1, [r7, #8]
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f7ff fc39 	bl	800222c <deserializeSimpleAck>
 80029ba:	4603      	mov	r3, r0
 80029bc:	75fb      	strb	r3, [r7, #23]
                break;
 80029be:	e002      	b.n	80029c6 <MQTT_DeserializeAck+0xdc>

            /* Any other packet type is invalid. */
            default:
                LogError( ( "IotMqtt_DeserializeResponse() called with unknown packet type:(%02x).",
                            ( unsigned int ) pIncomingPacket->type ) );
                status = MQTTBadResponse;
 80029c0:	2305      	movs	r3, #5
 80029c2:	75fb      	strb	r3, [r7, #23]
                break;
 80029c4:	bf00      	nop
        }
    }

    return status;
 80029c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <MQTT_GetIncomingPacketTypeAndLength>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetIncomingPacketTypeAndLength( TransportRecv_t readFunc,
                                                  NetworkContext_t * pNetworkContext,
                                                  MQTTPacketInfo_t * pIncomingPacket )
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 80029dc:	2300      	movs	r3, #0
 80029de:	75fb      	strb	r3, [r7, #23]
    int32_t bytesReceived = 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	613b      	str	r3, [r7, #16]

    if( pIncomingPacket == NULL )
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d102      	bne.n	80029f0 <MQTT_GetIncomingPacketTypeAndLength+0x20>
    {
        LogError( ( "Invalid parameter: pIncomingPacket is NULL." ) );
        status = MQTTBadParameter;
 80029ea:	2301      	movs	r3, #1
 80029ec:	75fb      	strb	r3, [r7, #23]
 80029ee:	e005      	b.n	80029fc <MQTT_GetIncomingPacketTypeAndLength+0x2c>
    }
    else
    {
        /* Read a single byte. */
        bytesReceived = readFunc( pNetworkContext,
                                  &( pIncomingPacket->type ),
 80029f0:	6879      	ldr	r1, [r7, #4]
        bytesReceived = readFunc( pNetworkContext,
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	68b8      	ldr	r0, [r7, #8]
 80029f8:	4798      	blx	r3
 80029fa:	6138      	str	r0, [r7, #16]
                                  1U );
    }

    if( bytesReceived == 1 )
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d119      	bne.n	8002a36 <MQTT_GetIncomingPacketTypeAndLength+0x66>
    {
        /* Check validity. */
        if( incomingPacketValid( pIncomingPacket->type ) == true )
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff f97c 	bl	8001d04 <incomingPacketValid>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00e      	beq.n	8002a30 <MQTT_GetIncomingPacketTypeAndLength+0x60>
        {
            pIncomingPacket->remainingLength = getRemainingLength( readFunc,
 8002a12:	68b9      	ldr	r1, [r7, #8]
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f7ff f921 	bl	8001c5c <getRemainingLength>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
                                                                   pNetworkContext );

            if( pIncomingPacket->remainingLength == MQTT_REMAINING_LENGTH_INVALID )
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a28:	d113      	bne.n	8002a52 <MQTT_GetIncomingPacketTypeAndLength+0x82>
            {
                status = MQTTBadResponse;
 8002a2a:	2305      	movs	r3, #5
 8002a2c:	75fb      	strb	r3, [r7, #23]
 8002a2e:	e010      	b.n	8002a52 <MQTT_GetIncomingPacketTypeAndLength+0x82>
        }
        else
        {
            LogError( ( "Incoming packet invalid: Packet type=%u.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 8002a30:	2305      	movs	r3, #5
 8002a32:	75fb      	strb	r3, [r7, #23]
 8002a34:	e00d      	b.n	8002a52 <MQTT_GetIncomingPacketTypeAndLength+0x82>
        }
    }
    else if( ( status != MQTTBadParameter ) && ( bytesReceived == 0 ) )
 8002a36:	7dfb      	ldrb	r3, [r7, #23]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d005      	beq.n	8002a48 <MQTT_GetIncomingPacketTypeAndLength+0x78>
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d102      	bne.n	8002a48 <MQTT_GetIncomingPacketTypeAndLength+0x78>
    {
        LogDebug( ( "No data was received from the transport." ) );
        status = MQTTNoDataAvailable;
 8002a42:	2307      	movs	r3, #7
 8002a44:	75fb      	strb	r3, [r7, #23]
 8002a46:	e004      	b.n	8002a52 <MQTT_GetIncomingPacketTypeAndLength+0x82>
    }

    /* If the input packet was valid, then any other number of bytes received is
     * a failure. */
    else if( status != MQTTBadParameter )
 8002a48:	7dfb      	ldrb	r3, [r7, #23]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d001      	beq.n	8002a52 <MQTT_GetIncomingPacketTypeAndLength+0x82>
    {
        LogError( ( "A single byte was not read from the transport: "
                    "transportStatus=%ld.",
                    ( long int ) bytesReceived ) );
        status = MQTTRecvFailed;
 8002a4e:	2304      	movs	r3, #4
 8002a50:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    return status;
 8002a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <validateTransitionPublish>:

static bool validateTransitionPublish( MQTTPublishState_t currentState,
                                       MQTTPublishState_t newState,
                                       MQTTStateOperation_t opType,
                                       MQTTQoS_t qos )
{
 8002a5c:	b490      	push	{r4, r7}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4604      	mov	r4, r0
 8002a64:	4608      	mov	r0, r1
 8002a66:	4611      	mov	r1, r2
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4623      	mov	r3, r4
 8002a6c:	71fb      	strb	r3, [r7, #7]
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71bb      	strb	r3, [r7, #6]
 8002a72:	460b      	mov	r3, r1
 8002a74:	717b      	strb	r3, [r7, #5]
 8002a76:	4613      	mov	r3, r2
 8002a78:	713b      	strb	r3, [r7, #4]
    bool isValid = false;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	73fb      	strb	r3, [r7, #15]

    switch( currentState )
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	2b07      	cmp	r3, #7
 8002a82:	d848      	bhi.n	8002b16 <validateTransitionPublish+0xba>
 8002a84:	a201      	add	r2, pc, #4	; (adr r2, 8002a8c <validateTransitionPublish+0x30>)
 8002a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8a:	bf00      	nop
 8002a8c:	08002aad 	.word	0x08002aad
 8002a90:	08002ad1 	.word	0x08002ad1
 8002a94:	08002b17 	.word	0x08002b17
 8002a98:	08002b17 	.word	0x08002b17
 8002a9c:	08002b17 	.word	0x08002b17
 8002aa0:	08002b17 	.word	0x08002b17
 8002aa4:	08002afb 	.word	0x08002afb
 8002aa8:	08002b09 	.word	0x08002b09
    {
        case MQTTStateNull:

            /* Transitions from null occur when storing a new entry into the record. */
            if( opType == MQTT_RECEIVE )
 8002aac:	797b      	ldrb	r3, [r7, #5]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d133      	bne.n	8002b1a <validateTransitionPublish+0xbe>
            {
                isValid = ( ( newState == MQTTPubAckSend ) || ( newState == MQTTPubRecSend ) ) ? true : false;
 8002ab2:	79bb      	ldrb	r3, [r7, #6]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d002      	beq.n	8002abe <validateTransitionPublish+0x62>
 8002ab8:	79bb      	ldrb	r3, [r7, #6]
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	d101      	bne.n	8002ac2 <validateTransitionPublish+0x66>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <validateTransitionPublish+0x68>
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	73fb      	strb	r3, [r7, #15]
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	73fb      	strb	r3, [r7, #15]
            }

            break;
 8002ace:	e024      	b.n	8002b1a <validateTransitionPublish+0xbe>

        case MQTTPublishSend:

            /* Outgoing publish. All such publishes start in this state due to
             * the reserve operation. */
            switch( qos )
 8002ad0:	793b      	ldrb	r3, [r7, #4]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d002      	beq.n	8002adc <validateTransitionPublish+0x80>
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d007      	beq.n	8002aea <validateTransitionPublish+0x8e>
                    isValid = ( newState == MQTTPubRecPending ) ? true : false;
                    break;

                default:
                    /* QoS 0 is checked before calling this function. */
                    break;
 8002ada:	e00d      	b.n	8002af8 <validateTransitionPublish+0x9c>
                    isValid = ( newState == MQTTPubAckPending ) ? true : false;
 8002adc:	79bb      	ldrb	r3, [r7, #6]
 8002ade:	2b06      	cmp	r3, #6
 8002ae0:	bf0c      	ite	eq
 8002ae2:	2301      	moveq	r3, #1
 8002ae4:	2300      	movne	r3, #0
 8002ae6:	73fb      	strb	r3, [r7, #15]
                    break;
 8002ae8:	e006      	b.n	8002af8 <validateTransitionPublish+0x9c>
                    isValid = ( newState == MQTTPubRecPending ) ? true : false;
 8002aea:	79bb      	ldrb	r3, [r7, #6]
 8002aec:	2b07      	cmp	r3, #7
 8002aee:	bf0c      	ite	eq
 8002af0:	2301      	moveq	r3, #1
 8002af2:	2300      	movne	r3, #0
 8002af4:	73fb      	strb	r3, [r7, #15]
                    break;
 8002af6:	bf00      	nop
            }

            break;
 8002af8:	e010      	b.n	8002b1c <validateTransitionPublish+0xc0>
         * reestablished. */
        case MQTTPubAckPending:

            /* When a session is reestablished, outgoing QoS1 publishes in state
             * #MQTTPubAckPending can be resent. The state remains the same. */
            isValid = ( newState == MQTTPubAckPending ) ? true : false;
 8002afa:	79bb      	ldrb	r3, [r7, #6]
 8002afc:	2b06      	cmp	r3, #6
 8002afe:	bf0c      	ite	eq
 8002b00:	2301      	moveq	r3, #1
 8002b02:	2300      	movne	r3, #0
 8002b04:	73fb      	strb	r3, [r7, #15]

            break;
 8002b06:	e009      	b.n	8002b1c <validateTransitionPublish+0xc0>

        case MQTTPubRecPending:

            /* When a session is reestablished, outgoing QoS2 publishes in state
             * #MQTTPubRecPending can be resent. The state remains the same. */
            isValid = ( newState == MQTTPubRecPending ) ? true : false;
 8002b08:	79bb      	ldrb	r3, [r7, #6]
 8002b0a:	2b07      	cmp	r3, #7
 8002b0c:	bf0c      	ite	eq
 8002b0e:	2301      	moveq	r3, #1
 8002b10:	2300      	movne	r3, #0
 8002b12:	73fb      	strb	r3, [r7, #15]

            break;
 8002b14:	e002      	b.n	8002b1c <validateTransitionPublish+0xc0>

        default:
            /* For a PUBLISH, we should not start from any other state. */
            break;
 8002b16:	bf00      	nop
 8002b18:	e000      	b.n	8002b1c <validateTransitionPublish+0xc0>
            break;
 8002b1a:	bf00      	nop
    }

    return isValid;
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc90      	pop	{r4, r7}
 8002b26:	4770      	bx	lr

08002b28 <validateTransitionAck>:

/*-----------------------------------------------------------*/

static bool validateTransitionAck( MQTTPublishState_t currentState,
                                   MQTTPublishState_t newState )
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	460a      	mov	r2, r1
 8002b32:	71fb      	strb	r3, [r7, #7]
 8002b34:	4613      	mov	r3, r2
 8002b36:	71bb      	strb	r3, [r7, #6]
    bool isValid = false;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	73fb      	strb	r3, [r7, #15]

    switch( currentState )
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	3b02      	subs	r3, #2
 8002b40:	2b07      	cmp	r3, #7
 8002b42:	d85c      	bhi.n	8002bfe <validateTransitionAck+0xd6>
 8002b44:	a201      	add	r2, pc, #4	; (adr r2, 8002b4c <validateTransitionAck+0x24>)
 8002b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4a:	bf00      	nop
 8002b4c:	08002b6d 	.word	0x08002b6d
 8002b50:	08002b7b 	.word	0x08002b7b
 8002b54:	08002bd3 	.word	0x08002bd3
 8002b58:	08002ba7 	.word	0x08002ba7
 8002b5c:	08002b6d 	.word	0x08002b6d
 8002b60:	08002bc5 	.word	0x08002bc5
 8002b64:	08002b89 	.word	0x08002b89
 8002b68:	08002be1 	.word	0x08002be1
    {
        case MQTTPubAckSend:
        /* Incoming publish, QoS 1. */
        case MQTTPubAckPending:
            /* Outgoing publish, QoS 1. */
            isValid = ( newState == MQTTPublishDone ) ? true : false;
 8002b6c:	79bb      	ldrb	r3, [r7, #6]
 8002b6e:	2b0a      	cmp	r3, #10
 8002b70:	bf0c      	ite	eq
 8002b72:	2301      	moveq	r3, #1
 8002b74:	2300      	movne	r3, #0
 8002b76:	73fb      	strb	r3, [r7, #15]
            break;
 8002b78:	e042      	b.n	8002c00 <validateTransitionAck+0xd8>

        case MQTTPubRecSend:
            /* Incoming publish, QoS 2. */
            isValid = ( newState == MQTTPubRelPending ) ? true : false;
 8002b7a:	79bb      	ldrb	r3, [r7, #6]
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	bf0c      	ite	eq
 8002b80:	2301      	moveq	r3, #1
 8002b82:	2300      	movne	r3, #0
 8002b84:	73fb      	strb	r3, [r7, #15]
            break;
 8002b86:	e03b      	b.n	8002c00 <validateTransitionAck+0xd8>
             *    6. Publish is received when publish record state is in
             *       MQTTPubRelPending.
             *    7. Sending out a PUBREC will result in this transition
             *       to the same state. */
            isValid = ( ( newState == MQTTPubCompSend ) ||
                        ( newState == MQTTPubRelPending ) ) ? true : false;
 8002b88:	79bb      	ldrb	r3, [r7, #6]
 8002b8a:	2b05      	cmp	r3, #5
 8002b8c:	d002      	beq.n	8002b94 <validateTransitionAck+0x6c>
 8002b8e:	79bb      	ldrb	r3, [r7, #6]
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d101      	bne.n	8002b98 <validateTransitionAck+0x70>
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <validateTransitionAck+0x72>
 8002b98:	2300      	movs	r3, #0
            isValid = ( ( newState == MQTTPubCompSend ) ||
 8002b9a:	73fb      	strb	r3, [r7, #15]
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
            break;
 8002ba4:	e02c      	b.n	8002c00 <validateTransitionAck+0xd8>
             *    2. Reestablished an MQTT session.
             *    3. MQTT broker resent the un-acked PUBREL.
             *    4. Receiving the PUBREL again will result in this transition
             *       to the same state. */
            isValid = ( ( newState == MQTTPublishDone ) ||
                        ( newState == MQTTPubCompSend ) ) ? true : false;
 8002ba6:	79bb      	ldrb	r3, [r7, #6]
 8002ba8:	2b0a      	cmp	r3, #10
 8002baa:	d002      	beq.n	8002bb2 <validateTransitionAck+0x8a>
 8002bac:	79bb      	ldrb	r3, [r7, #6]
 8002bae:	2b05      	cmp	r3, #5
 8002bb0:	d101      	bne.n	8002bb6 <validateTransitionAck+0x8e>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <validateTransitionAck+0x90>
 8002bb6:	2300      	movs	r3, #0
            isValid = ( ( newState == MQTTPublishDone ) ||
 8002bb8:	73fb      	strb	r3, [r7, #15]
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	73fb      	strb	r3, [r7, #15]
            break;
 8002bc2:	e01d      	b.n	8002c00 <validateTransitionAck+0xd8>

        case MQTTPubRecPending:
            /* Outgoing publish, Qos 2. */
            isValid = ( newState == MQTTPubRelSend ) ? true : false;
 8002bc4:	79bb      	ldrb	r3, [r7, #6]
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	bf0c      	ite	eq
 8002bca:	2301      	moveq	r3, #1
 8002bcc:	2300      	movne	r3, #0
 8002bce:	73fb      	strb	r3, [r7, #15]
            break;
 8002bd0:	e016      	b.n	8002c00 <validateTransitionAck+0xd8>

        case MQTTPubRelSend:
            /* Outgoing publish, Qos 2. */
            isValid = ( newState == MQTTPubCompPending ) ? true : false;
 8002bd2:	79bb      	ldrb	r3, [r7, #6]
 8002bd4:	2b09      	cmp	r3, #9
 8002bd6:	bf0c      	ite	eq
 8002bd8:	2301      	moveq	r3, #1
 8002bda:	2300      	movne	r3, #0
 8002bdc:	73fb      	strb	r3, [r7, #15]
            break;
 8002bde:	e00f      	b.n	8002c00 <validateTransitionAck+0xd8>
             *       for an outgoing PUBREL.
             *    2. An MQTT session is reestablished.
             *    3. Resending the un-acked PUBREL results in this transition
             *       to the same state. */
            isValid = ( ( newState == MQTTPublishDone ) ||
                        ( newState == MQTTPubCompPending ) ) ? true : false;
 8002be0:	79bb      	ldrb	r3, [r7, #6]
 8002be2:	2b0a      	cmp	r3, #10
 8002be4:	d002      	beq.n	8002bec <validateTransitionAck+0xc4>
 8002be6:	79bb      	ldrb	r3, [r7, #6]
 8002be8:	2b09      	cmp	r3, #9
 8002bea:	d101      	bne.n	8002bf0 <validateTransitionAck+0xc8>
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <validateTransitionAck+0xca>
 8002bf0:	2300      	movs	r3, #0
            isValid = ( ( newState == MQTTPublishDone ) ||
 8002bf2:	73fb      	strb	r3, [r7, #15]
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
            break;
 8002bfc:	e000      	b.n	8002c00 <validateTransitionAck+0xd8>
        /* If an ack was sent/received we shouldn't have been in this state. */
        case MQTTStateNull:
        /* If an ack was sent/received the record should exist. */
        default:
            /* Invalid. */
            break;
 8002bfe:	bf00      	nop
    }

    return isValid;
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop

08002c10 <isPublishOutgoing>:

/*-----------------------------------------------------------*/

static bool isPublishOutgoing( MQTTPubAckType_t packetType,
                               MQTTStateOperation_t opType )
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	460a      	mov	r2, r1
 8002c1a:	71fb      	strb	r3, [r7, #7]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	71bb      	strb	r3, [r7, #6]
    bool isOutgoing = false;
 8002c20:	2300      	movs	r3, #0
 8002c22:	73fb      	strb	r3, [r7, #15]

    switch( packetType )
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d009      	beq.n	8002c3e <isPublishOutgoing+0x2e>
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	dc15      	bgt.n	8002c5a <isPublishOutgoing+0x4a>
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	dc02      	bgt.n	8002c38 <isPublishOutgoing+0x28>
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	da03      	bge.n	8002c3e <isPublishOutgoing+0x2e>
            isOutgoing = ( opType == MQTT_SEND ) ? true : false;
            break;

        default:
            /* No other ack type. */
            break;
 8002c36:	e010      	b.n	8002c5a <isPublishOutgoing+0x4a>
    switch( packetType )
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d007      	beq.n	8002c4c <isPublishOutgoing+0x3c>
            break;
 8002c3c:	e00d      	b.n	8002c5a <isPublishOutgoing+0x4a>
            isOutgoing = ( opType == MQTT_RECEIVE ) ? true : false;
 8002c3e:	79bb      	ldrb	r3, [r7, #6]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	bf0c      	ite	eq
 8002c44:	2301      	moveq	r3, #1
 8002c46:	2300      	movne	r3, #0
 8002c48:	73fb      	strb	r3, [r7, #15]
            break;
 8002c4a:	e007      	b.n	8002c5c <isPublishOutgoing+0x4c>
            isOutgoing = ( opType == MQTT_SEND ) ? true : false;
 8002c4c:	79bb      	ldrb	r3, [r7, #6]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	bf0c      	ite	eq
 8002c52:	2301      	moveq	r3, #1
 8002c54:	2300      	movne	r3, #0
 8002c56:	73fb      	strb	r3, [r7, #15]
            break;
 8002c58:	e000      	b.n	8002c5c <isPublishOutgoing+0x4c>
            break;
 8002c5a:	bf00      	nop
    }

    return isOutgoing;
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <findInRecord>:
static size_t findInRecord( const MQTTPubAckInfo_t * records,
                            size_t recordCount,
                            uint16_t packetId,
                            MQTTQoS_t * pQos,
                            MQTTPublishState_t * pCurrentState )
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	80fb      	strh	r3, [r7, #6]
    size_t index = 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]

    assert( packetId != MQTT_PACKET_ID_INVALID );
 8002c80:	88fb      	ldrh	r3, [r7, #6]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d106      	bne.n	8002c94 <findInRecord+0x28>
 8002c86:	4b18      	ldr	r3, [pc, #96]	; (8002ce8 <findInRecord+0x7c>)
 8002c88:	4a18      	ldr	r2, [pc, #96]	; (8002cec <findInRecord+0x80>)
 8002c8a:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8002c8e:	4818      	ldr	r0, [pc, #96]	; (8002cf0 <findInRecord+0x84>)
 8002c90:	f009 ff9a 	bl	800cbc8 <__assert_func>

    *pCurrentState = MQTTStateNull;
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	2200      	movs	r2, #0
 8002c98:	701a      	strb	r2, [r3, #0]

    for( index = 0; index < recordCount; index++ )
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]
 8002c9e:	e019      	b.n	8002cd4 <findInRecord+0x68>
    {
        if( records[ index ].packetId == packetId )
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	881b      	ldrh	r3, [r3, #0]
 8002caa:	88fa      	ldrh	r2, [r7, #6]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d10e      	bne.n	8002cce <findInRecord+0x62>
        {
            *pQos = records[ index ].qos;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	789a      	ldrb	r2, [r3, #2]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	701a      	strb	r2, [r3, #0]
            *pCurrentState = records[ index ].publishState;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	78da      	ldrb	r2, [r3, #3]
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	701a      	strb	r2, [r3, #0]
            break;
 8002ccc:	e006      	b.n	8002cdc <findInRecord+0x70>
    for( index = 0; index < recordCount; index++ )
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d3e1      	bcc.n	8002ca0 <findInRecord+0x34>
        }
    }

    return index;
 8002cdc:	697b      	ldr	r3, [r7, #20]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	0800e9b0 	.word	0x0800e9b0
 8002cec:	0800f414 	.word	0x0800f414
 8002cf0:	0800e9d4 	.word	0x0800e9d4

08002cf4 <compactRecords>:

/*-----------------------------------------------------------*/

static void compactRecords( MQTTPubAckInfo_t * records,
                            size_t recordCount )
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
    size_t index = 0;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
    size_t emptyIndex = MQTT_STATE_ARRAY_MAX_COUNT;
 8002d02:	230a      	movs	r3, #10
 8002d04:	60bb      	str	r3, [r7, #8]

    assert( records != NULL );
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d140      	bne.n	8002d8e <compactRecords+0x9a>
 8002d0c:	4b24      	ldr	r3, [pc, #144]	; (8002da0 <compactRecords+0xac>)
 8002d0e:	4a25      	ldr	r2, [pc, #148]	; (8002da4 <compactRecords+0xb0>)
 8002d10:	f240 11c5 	movw	r1, #453	; 0x1c5
 8002d14:	4824      	ldr	r0, [pc, #144]	; (8002da8 <compactRecords+0xb4>)
 8002d16:	f009 ff57 	bl	800cbc8 <__assert_func>

    /* Find the empty spots and fill those with non empty values. */
    for( ; index < recordCount; index++ )
    {
        /* Find the first empty spot. */
        if( records[ index ].packetId == MQTT_PACKET_ID_INVALID )
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	4413      	add	r3, r2
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d105      	bne.n	8002d34 <compactRecords+0x40>
        {
            if( emptyIndex == MQTT_STATE_ARRAY_MAX_COUNT )
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2b0a      	cmp	r3, #10
 8002d2c:	d12c      	bne.n	8002d88 <compactRecords+0x94>
            {
                emptyIndex = index;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	e029      	b.n	8002d88 <compactRecords+0x94>
            }
        }
        else
        {
            if( emptyIndex != MQTT_STATE_ARRAY_MAX_COUNT )
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b0a      	cmp	r3, #10
 8002d38:	d026      	beq.n	8002d88 <compactRecords+0x94>
            {
                /* Copy over the contents at non empty index to empty index. */
                records[ emptyIndex ].packetId = records[ index ].packetId;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	441a      	add	r2, r3
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	440b      	add	r3, r1
 8002d4a:	8812      	ldrh	r2, [r2, #0]
 8002d4c:	801a      	strh	r2, [r3, #0]
                records[ emptyIndex ].qos = records[ index ].qos;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	441a      	add	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	440b      	add	r3, r1
 8002d5e:	7892      	ldrb	r2, [r2, #2]
 8002d60:	709a      	strb	r2, [r3, #2]
                records[ emptyIndex ].publishState = records[ index ].publishState;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	441a      	add	r2, r3
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	440b      	add	r3, r1
 8002d72:	78d2      	ldrb	r2, [r2, #3]
 8002d74:	70da      	strb	r2, [r3, #3]

                /* Mark the record at current non empty index as invalid. */
                records[ index ].packetId = MQTT_PACKET_ID_INVALID;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	2200      	movs	r2, #0
 8002d80:	801a      	strh	r2, [r3, #0]

                /* Advance the emptyIndex. */
                emptyIndex++;
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	3301      	adds	r3, #1
 8002d86:	60bb      	str	r3, [r7, #8]
    for( ; index < recordCount; index++ )
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d3c1      	bcc.n	8002d1a <compactRecords+0x26>
            }
        }
    }
}
 8002d96:	bf00      	nop
 8002d98:	bf00      	nop
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	0800e9f4 	.word	0x0800e9f4
 8002da4:	0800f424 	.word	0x0800f424
 8002da8:	0800e9d4 	.word	0x0800e9d4

08002dac <addRecord>:
static MQTTStatus_t addRecord( MQTTPubAckInfo_t * records,
                               size_t recordCount,
                               uint16_t packetId,
                               MQTTQoS_t qos,
                               MQTTPublishState_t publishState )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	4611      	mov	r1, r2
 8002db8:	461a      	mov	r2, r3
 8002dba:	460b      	mov	r3, r1
 8002dbc:	80fb      	strh	r3, [r7, #6]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	717b      	strb	r3, [r7, #5]
    MQTTStatus_t status = MQTTNoMemory;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	77fb      	strb	r3, [r7, #31]
    int32_t index = 0;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61bb      	str	r3, [r7, #24]
    size_t availableIndex = recordCount;
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	617b      	str	r3, [r7, #20]
    bool validEntryFound = false;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	74fb      	strb	r3, [r7, #19]

    assert( packetId != MQTT_PACKET_ID_INVALID );
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d106      	bne.n	8002de6 <addRecord+0x3a>
 8002dd8:	4b32      	ldr	r3, [pc, #200]	; (8002ea4 <addRecord+0xf8>)
 8002dda:	4a33      	ldr	r2, [pc, #204]	; (8002ea8 <addRecord+0xfc>)
 8002ddc:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8002de0:	4832      	ldr	r0, [pc, #200]	; (8002eac <addRecord+0x100>)
 8002de2:	f009 fef1 	bl	800cbc8 <__assert_func>
    assert( qos != MQTTQoS0 );
 8002de6:	797b      	ldrb	r3, [r7, #5]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d106      	bne.n	8002dfa <addRecord+0x4e>
 8002dec:	4b30      	ldr	r3, [pc, #192]	; (8002eb0 <addRecord+0x104>)
 8002dee:	4a2e      	ldr	r2, [pc, #184]	; (8002ea8 <addRecord+0xfc>)
 8002df0:	f240 11f3 	movw	r1, #499	; 0x1f3
 8002df4:	482d      	ldr	r0, [pc, #180]	; (8002eac <addRecord+0x100>)
 8002df6:	f009 fee7 	bl	800cbc8 <__assert_func>

    /* Check if we have to compact the records. This is known by checking if
     * the last spot in the array is filled. */
    if( records[ recordCount - 1U ].packetId != MQTT_PACKET_ID_INVALID )
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e00:	3b01      	subs	r3, #1
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4413      	add	r3, r2
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <addRecord+0x6a>
    {
        compactRecords( records, recordCount );
 8002e0e:	68b9      	ldr	r1, [r7, #8]
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f7ff ff6f 	bl	8002cf4 <compactRecords>

    /* Start from end so first available index will be populated.
     * Available index is always found after the last element in the records.
     * This is to make sure the relative order of the records in order to meet
     * the message ordering requirement of MQTT spec 3.1.1. */
    for( index = ( ( int32_t ) recordCount - 1 ); index >= 0; index-- )
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	61bb      	str	r3, [r7, #24]
 8002e1c:	e021      	b.n	8002e62 <addRecord+0xb6>
    {
        /* Available index is only found after packet at the highest index. */
        if( records[ index ].packetId == MQTT_PACKET_ID_INVALID )
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4413      	add	r3, r2
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d108      	bne.n	8002e3e <addRecord+0x92>
        {
            if( validEntryFound == false )
 8002e2c:	7cfb      	ldrb	r3, [r7, #19]
 8002e2e:	f083 0301 	eor.w	r3, r3, #1
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d011      	beq.n	8002e5c <addRecord+0xb0>
            {
                availableIndex = ( size_t ) index;
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	e00e      	b.n	8002e5c <addRecord+0xb0>
            }
        }
        else
        {
            /* A non-empty spot found in the records. */
            validEntryFound = true;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	74fb      	strb	r3, [r7, #19]

            if( records[ index ].packetId == packetId )
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4413      	add	r3, r2
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	88fa      	ldrh	r2, [r7, #6]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d104      	bne.n	8002e5c <addRecord+0xb0>
                /* Collision. */
                LogError( ( "Collision when adding PacketID=%u at index=%d.",
                            ( unsigned int ) packetId,
                            ( int ) index ) );

                status = MQTTStateCollision;
 8002e52:	2309      	movs	r3, #9
 8002e54:	77fb      	strb	r3, [r7, #31]
                availableIndex = recordCount;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	617b      	str	r3, [r7, #20]
                break;
 8002e5a:	e005      	b.n	8002e68 <addRecord+0xbc>
    for( index = ( ( int32_t ) recordCount - 1 ); index >= 0; index-- )
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	61bb      	str	r3, [r7, #24]
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	dada      	bge.n	8002e1e <addRecord+0x72>
            }
        }
    }

    if( availableIndex < recordCount )
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d214      	bcs.n	8002e9a <addRecord+0xee>
    {
        records[ availableIndex ].packetId = packetId;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	4413      	add	r3, r2
 8002e78:	88fa      	ldrh	r2, [r7, #6]
 8002e7a:	801a      	strh	r2, [r3, #0]
        records[ availableIndex ].qos = qos;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4413      	add	r3, r2
 8002e84:	797a      	ldrb	r2, [r7, #5]
 8002e86:	709a      	strb	r2, [r3, #2]
        records[ availableIndex ].publishState = publishState;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002e94:	70da      	strb	r2, [r3, #3]
        status = MQTTSuccess;
 8002e96:	2300      	movs	r3, #0
 8002e98:	77fb      	strb	r3, [r7, #31]
    }

    return status;
 8002e9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3720      	adds	r7, #32
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	0800e9b0 	.word	0x0800e9b0
 8002ea8:	0800f434 	.word	0x0800f434
 8002eac:	0800e9d4 	.word	0x0800e9d4
 8002eb0:	0800ea04 	.word	0x0800ea04

08002eb4 <updateRecord>:

static void updateRecord( MQTTPubAckInfo_t * records,
                          size_t recordIndex,
                          MQTTPublishState_t newState,
                          bool shouldDelete )
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	71fb      	strb	r3, [r7, #7]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	71bb      	strb	r3, [r7, #6]
    assert( records != NULL );
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d106      	bne.n	8002ede <updateRecord+0x2a>
 8002ed0:	4b0d      	ldr	r3, [pc, #52]	; (8002f08 <updateRecord+0x54>)
 8002ed2:	4a0e      	ldr	r2, [pc, #56]	; (8002f0c <updateRecord+0x58>)
 8002ed4:	f240 212f 	movw	r1, #559	; 0x22f
 8002ed8:	480d      	ldr	r0, [pc, #52]	; (8002f10 <updateRecord+0x5c>)
 8002eda:	f009 fe75 	bl	800cbc8 <__assert_func>

    if( shouldDelete == true )
 8002ede:	79bb      	ldrb	r3, [r7, #6]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d006      	beq.n	8002ef2 <updateRecord+0x3e>
    {
        /* Mark the record as invalid. */
        records[ recordIndex ].packetId = MQTT_PACKET_ID_INVALID;
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4413      	add	r3, r2
 8002eec:	2200      	movs	r2, #0
 8002eee:	801a      	strh	r2, [r3, #0]
    }
    else
    {
        records[ recordIndex ].publishState = newState;
    }
}
 8002ef0:	e005      	b.n	8002efe <updateRecord+0x4a>
        records[ recordIndex ].publishState = newState;
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4413      	add	r3, r2
 8002efa:	79fa      	ldrb	r2, [r7, #7]
 8002efc:	70da      	strb	r2, [r3, #3]
}
 8002efe:	bf00      	nop
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	0800e9f4 	.word	0x0800e9f4
 8002f0c:	0800f440 	.word	0x0800f440
 8002f10:	0800e9d4 	.word	0x0800e9d4

08002f14 <stateSelect>:
/*-----------------------------------------------------------*/

static uint16_t stateSelect( const MQTTContext_t * pMqttContext,
                             uint16_t searchStates,
                             MQTTStateCursor_t * pCursor )
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	817b      	strh	r3, [r7, #10]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 8002f22:	2300      	movs	r3, #0
 8002f24:	83fb      	strh	r3, [r7, #30]
    uint16_t outgoingStates = 0U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	83bb      	strh	r3, [r7, #28]
    const MQTTPubAckInfo_t * records = NULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61bb      	str	r3, [r7, #24]
    bool stateCheck = false;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	75fb      	strb	r3, [r7, #23]

    assert( pMqttContext != NULL );
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d106      	bne.n	8002f46 <stateSelect+0x32>
 8002f38:	4b41      	ldr	r3, [pc, #260]	; (8003040 <stateSelect+0x12c>)
 8002f3a:	4a42      	ldr	r2, [pc, #264]	; (8003044 <stateSelect+0x130>)
 8002f3c:	f240 2147 	movw	r1, #583	; 0x247
 8002f40:	4841      	ldr	r0, [pc, #260]	; (8003048 <stateSelect+0x134>)
 8002f42:	f009 fe41 	bl	800cbc8 <__assert_func>
    assert( searchStates != 0U );
 8002f46:	897b      	ldrh	r3, [r7, #10]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d106      	bne.n	8002f5a <stateSelect+0x46>
 8002f4c:	4b3f      	ldr	r3, [pc, #252]	; (800304c <stateSelect+0x138>)
 8002f4e:	4a3d      	ldr	r2, [pc, #244]	; (8003044 <stateSelect+0x130>)
 8002f50:	f44f 7112 	mov.w	r1, #584	; 0x248
 8002f54:	483c      	ldr	r0, [pc, #240]	; (8003048 <stateSelect+0x134>)
 8002f56:	f009 fe37 	bl	800cbc8 <__assert_func>
    assert( pCursor != NULL );
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d106      	bne.n	8002f6e <stateSelect+0x5a>
 8002f60:	4b3b      	ldr	r3, [pc, #236]	; (8003050 <stateSelect+0x13c>)
 8002f62:	4a38      	ldr	r2, [pc, #224]	; (8003044 <stateSelect+0x130>)
 8002f64:	f240 2149 	movw	r1, #585	; 0x249
 8002f68:	4837      	ldr	r0, [pc, #220]	; (8003048 <stateSelect+0x134>)
 8002f6a:	f009 fe2d 	bl	800cbc8 <__assert_func>

    /* Create a bit map with all the outgoing publish states. */
    UINT16_SET_BIT( outgoingStates, MQTTPublishSend );
 8002f6e:	8bbb      	ldrh	r3, [r7, #28]
 8002f70:	f043 0302 	orr.w	r3, r3, #2
 8002f74:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubAckPending );
 8002f76:	8bbb      	ldrh	r3, [r7, #28]
 8002f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f7c:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubRecPending );
 8002f7e:	8bbb      	ldrh	r3, [r7, #28]
 8002f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f84:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubRelSend );
 8002f86:	8bbb      	ldrh	r3, [r7, #28]
 8002f88:	f043 0310 	orr.w	r3, r3, #16
 8002f8c:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubCompPending );
 8002f8e:	8bbb      	ldrh	r3, [r7, #28]
 8002f90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f94:	83bb      	strh	r3, [r7, #28]

    /* Only outgoing publish records need to be searched. */
    assert( ( outgoingStates & searchStates ) > 0U );
 8002f96:	8bba      	ldrh	r2, [r7, #28]
 8002f98:	897b      	ldrh	r3, [r7, #10]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d106      	bne.n	8002fb0 <stateSelect+0x9c>
 8002fa2:	4b2c      	ldr	r3, [pc, #176]	; (8003054 <stateSelect+0x140>)
 8002fa4:	4a27      	ldr	r2, [pc, #156]	; (8003044 <stateSelect+0x130>)
 8002fa6:	f240 2153 	movw	r1, #595	; 0x253
 8002faa:	4827      	ldr	r0, [pc, #156]	; (8003048 <stateSelect+0x134>)
 8002fac:	f009 fe0c 	bl	800cbc8 <__assert_func>
    assert( ( ~outgoingStates & searchStates ) == 0 );
 8002fb0:	8bbb      	ldrh	r3, [r7, #28]
 8002fb2:	43da      	mvns	r2, r3
 8002fb4:	897b      	ldrh	r3, [r7, #10]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d006      	beq.n	8002fca <stateSelect+0xb6>
 8002fbc:	4b26      	ldr	r3, [pc, #152]	; (8003058 <stateSelect+0x144>)
 8002fbe:	4a21      	ldr	r2, [pc, #132]	; (8003044 <stateSelect+0x130>)
 8002fc0:	f44f 7115 	mov.w	r1, #596	; 0x254
 8002fc4:	4820      	ldr	r0, [pc, #128]	; (8003048 <stateSelect+0x134>)
 8002fc6:	f009 fdff 	bl	800cbc8 <__assert_func>

    records = pMqttContext->outgoingPublishRecords;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	61bb      	str	r3, [r7, #24]

    while( *pCursor < MQTT_STATE_ARRAY_MAX_COUNT )
 8002fce:	e02d      	b.n	800302c <stateSelect+0x118>
    {
        /* Check if any of the search states are present. */
        stateCheck = UINT16_CHECK_BIT( searchStates, records[ *pCursor ].publishState ) ? true : false;
 8002fd0:	897a      	ldrh	r2, [r7, #10]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	69b9      	ldr	r1, [r7, #24]
 8002fda:	440b      	add	r3, r1
 8002fdc:	78db      	ldrb	r3, [r3, #3]
 8002fde:	4619      	mov	r1, r3
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	408b      	lsls	r3, r1
 8002fe4:	401a      	ands	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	69b9      	ldr	r1, [r7, #24]
 8002fee:	440b      	add	r3, r1
 8002ff0:	78db      	ldrb	r3, [r3, #3]
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	408b      	lsls	r3, r1
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	bf0c      	ite	eq
 8002ffc:	2301      	moveq	r3, #1
 8002ffe:	2300      	movne	r3, #0
 8003000:	75fb      	strb	r3, [r7, #23]

        if( stateCheck == true )
 8003002:	7dfb      	ldrb	r3, [r7, #23]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00c      	beq.n	8003022 <stateSelect+0x10e>
        {
            packetId = records[ *pCursor ].packetId;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4413      	add	r3, r2
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	83fb      	strh	r3, [r7, #30]
            ( *pCursor )++;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	601a      	str	r2, [r3, #0]
            break;
 8003020:	e008      	b.n	8003034 <stateSelect+0x120>
        }

        ( *pCursor )++;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	601a      	str	r2, [r3, #0]
    while( *pCursor < MQTT_STATE_ARRAY_MAX_COUNT )
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b09      	cmp	r3, #9
 8003032:	d9cd      	bls.n	8002fd0 <stateSelect+0xbc>
    }

    return packetId;
 8003034:	8bfb      	ldrh	r3, [r7, #30]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3720      	adds	r7, #32
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	0800ea14 	.word	0x0800ea14
 8003044:	0800f450 	.word	0x0800f450
 8003048:	0800e9d4 	.word	0x0800e9d4
 800304c:	0800ea2c 	.word	0x0800ea2c
 8003050:	0800ea40 	.word	0x0800ea40
 8003054:	0800ea50 	.word	0x0800ea50
 8003058:	0800ea78 	.word	0x0800ea78

0800305c <MQTT_CalculateStateAck>:
/*-----------------------------------------------------------*/

MQTTPublishState_t MQTT_CalculateStateAck( MQTTPubAckType_t packetType,
                                           MQTTStateOperation_t opType,
                                           MQTTQoS_t qos )
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	71fb      	strb	r3, [r7, #7]
 8003066:	460b      	mov	r3, r1
 8003068:	71bb      	strb	r3, [r7, #6]
 800306a:	4613      	mov	r3, r2
 800306c:	717b      	strb	r3, [r7, #5]
    MQTTPublishState_t calculatedState = MQTTStateNull;
 800306e:	2300      	movs	r3, #0
 8003070:	73fb      	strb	r3, [r7, #15]
    /* There are more QoS2 cases than QoS1, so initialize to that. */
    bool qosValid = ( qos == MQTTQoS2 ) ? true : false;
 8003072:	797b      	ldrb	r3, [r7, #5]
 8003074:	2b02      	cmp	r3, #2
 8003076:	bf0c      	ite	eq
 8003078:	2301      	moveq	r3, #1
 800307a:	2300      	movne	r3, #0
 800307c:	73bb      	strb	r3, [r7, #14]

    switch( packetType )
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	2b03      	cmp	r3, #3
 8003082:	d827      	bhi.n	80030d4 <MQTT_CalculateStateAck+0x78>
 8003084:	a201      	add	r2, pc, #4	; (adr r2, 800308c <MQTT_CalculateStateAck+0x30>)
 8003086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308a:	bf00      	nop
 800308c:	0800309d 	.word	0x0800309d
 8003090:	080030af 	.word	0x080030af
 8003094:	080030bf 	.word	0x080030bf
 8003098:	080030cf 	.word	0x080030cf
    {
        case MQTTPuback:
            qosValid = ( qos == MQTTQoS1 ) ? true : false;
 800309c:	797b      	ldrb	r3, [r7, #5]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	bf0c      	ite	eq
 80030a2:	2301      	moveq	r3, #1
 80030a4:	2300      	movne	r3, #0
 80030a6:	73bb      	strb	r3, [r7, #14]
            calculatedState = MQTTPublishDone;
 80030a8:	230a      	movs	r3, #10
 80030aa:	73fb      	strb	r3, [r7, #15]
            break;
 80030ac:	e013      	b.n	80030d6 <MQTT_CalculateStateAck+0x7a>

        case MQTTPubrec:

            /* Incoming publish: send PUBREC, PUBREL pending.
             * Outgoing publish: receive PUBREC, send PUBREL. */
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRelPending : MQTTPubRelSend;
 80030ae:	79bb      	ldrb	r3, [r7, #6]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <MQTT_CalculateStateAck+0x5c>
 80030b4:	2308      	movs	r3, #8
 80030b6:	e000      	b.n	80030ba <MQTT_CalculateStateAck+0x5e>
 80030b8:	2304      	movs	r3, #4
 80030ba:	73fb      	strb	r3, [r7, #15]
            break;
 80030bc:	e00b      	b.n	80030d6 <MQTT_CalculateStateAck+0x7a>

        case MQTTPubrel:

            /* Incoming publish: receive PUBREL, send PUBCOMP.
             * Outgoing publish: send PUBREL, PUBCOMP pending. */
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubCompPending : MQTTPubCompSend;
 80030be:	79bb      	ldrb	r3, [r7, #6]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <MQTT_CalculateStateAck+0x6c>
 80030c4:	2309      	movs	r3, #9
 80030c6:	e000      	b.n	80030ca <MQTT_CalculateStateAck+0x6e>
 80030c8:	2305      	movs	r3, #5
 80030ca:	73fb      	strb	r3, [r7, #15]
            break;
 80030cc:	e003      	b.n	80030d6 <MQTT_CalculateStateAck+0x7a>

        case MQTTPubcomp:
            calculatedState = MQTTPublishDone;
 80030ce:	230a      	movs	r3, #10
 80030d0:	73fb      	strb	r3, [r7, #15]
            break;
 80030d2:	e000      	b.n	80030d6 <MQTT_CalculateStateAck+0x7a>

        default:
            /* No other ack type. */
            break;
 80030d4:	bf00      	nop
    }

    /* Sanity check, make sure ack and QoS agree. */
    if( qosValid == false )
 80030d6:	7bbb      	ldrb	r3, [r7, #14]
 80030d8:	f083 0301 	eor.w	r3, r3, #1
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <MQTT_CalculateStateAck+0x8a>
    {
        calculatedState = MQTTStateNull;
 80030e2:	2300      	movs	r3, #0
 80030e4:	73fb      	strb	r3, [r7, #15]
    }

    return calculatedState;
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <updateStateAck>:
static MQTTStatus_t updateStateAck( MQTTPubAckInfo_t * records,
                                    size_t recordIndex,
                                    uint16_t packetId,
                                    MQTTPublishState_t currentState,
                                    MQTTPublishState_t newState )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af02      	add	r7, sp, #8
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	4611      	mov	r1, r2
 8003100:	461a      	mov	r2, r3
 8003102:	460b      	mov	r3, r1
 8003104:	80fb      	strh	r3, [r7, #6]
 8003106:	4613      	mov	r3, r2
 8003108:	717b      	strb	r3, [r7, #5]
    MQTTStatus_t status = MQTTIllegalState;
 800310a:	2308      	movs	r3, #8
 800310c:	75fb      	strb	r3, [r7, #23]
    bool shouldDeleteRecord = false;
 800310e:	2300      	movs	r3, #0
 8003110:	75bb      	strb	r3, [r7, #22]
    bool isTransitionValid = false;
 8003112:	2300      	movs	r3, #0
 8003114:	757b      	strb	r3, [r7, #21]

    assert( records != NULL );
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d106      	bne.n	800312a <updateStateAck+0x36>
 800311c:	4b21      	ldr	r3, [pc, #132]	; (80031a4 <updateStateAck+0xb0>)
 800311e:	4a22      	ldr	r2, [pc, #136]	; (80031a8 <updateStateAck+0xb4>)
 8003120:	f240 21a7 	movw	r1, #679	; 0x2a7
 8003124:	4821      	ldr	r0, [pc, #132]	; (80031ac <updateStateAck+0xb8>)
 8003126:	f009 fd4f 	bl	800cbc8 <__assert_func>

    /* Record to be deleted if the state transition is completed or if a PUBREC
     * is received for an outgoing QoS2 publish. When a PUBREC is received,
     * record is deleted and added back to the end of the records to maintain
     * ordering for PUBRELs. */
    shouldDeleteRecord = ( ( newState == MQTTPublishDone ) || ( newState == MQTTPubRelSend ) ) ? true : false;
 800312a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800312e:	2b0a      	cmp	r3, #10
 8003130:	d003      	beq.n	800313a <updateStateAck+0x46>
 8003132:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003136:	2b04      	cmp	r3, #4
 8003138:	d101      	bne.n	800313e <updateStateAck+0x4a>
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <updateStateAck+0x4c>
 800313e:	2300      	movs	r3, #0
 8003140:	75bb      	strb	r3, [r7, #22]
 8003142:	7dbb      	ldrb	r3, [r7, #22]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	75bb      	strb	r3, [r7, #22]
    isTransitionValid = validateTransitionAck( currentState, newState );
 800314a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800314e:	797b      	ldrb	r3, [r7, #5]
 8003150:	4611      	mov	r1, r2
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fce8 	bl	8002b28 <validateTransitionAck>
 8003158:	4603      	mov	r3, r0
 800315a:	757b      	strb	r3, [r7, #21]

    if( isTransitionValid == true )
 800315c:	7d7b      	ldrb	r3, [r7, #21]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d01b      	beq.n	800319a <updateStateAck+0xa6>
    {
        status = MQTTSuccess;
 8003162:	2300      	movs	r3, #0
 8003164:	75fb      	strb	r3, [r7, #23]

        /* Update record for acks. When sending or receiving acks for packets that
         * are resent during a session reestablishment, the new state and
         * current state can be the same. No update of record required in that case. */
        if( currentState != newState )
 8003166:	797a      	ldrb	r2, [r7, #5]
 8003168:	f897 3020 	ldrb.w	r3, [r7, #32]
 800316c:	429a      	cmp	r2, r3
 800316e:	d014      	beq.n	800319a <updateStateAck+0xa6>
        {
            updateRecord( records,
 8003170:	7dbb      	ldrb	r3, [r7, #22]
 8003172:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003176:	68b9      	ldr	r1, [r7, #8]
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f7ff fe9b 	bl	8002eb4 <updateRecord>

            /* For QoS2 messages, in order to preserve the message ordering, when
             * a PUBREC is received for an outgoing publish, the record should be
             * moved to the last. This move will help preserve the order in which
             * a PUBREL needs to be resent in case of a session reestablishment. */
            if( newState == MQTTPubRelSend )
 800317e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003182:	2b04      	cmp	r3, #4
 8003184:	d109      	bne.n	800319a <updateStateAck+0xa6>
            {
                status = addRecord( records,
 8003186:	88fa      	ldrh	r2, [r7, #6]
 8003188:	2304      	movs	r3, #4
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	2302      	movs	r3, #2
 800318e:	210a      	movs	r1, #10
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f7ff fe0b 	bl	8002dac <addRecord>
 8003196:	4603      	mov	r3, r0
 8003198:	75fb      	strb	r3, [r7, #23]
        LogError( ( "Invalid transition from state %s to state %s.",
                    MQTT_State_strerror( currentState ),
                    MQTT_State_strerror( newState ) ) );
    }

    return status;
 800319a:	7dfb      	ldrb	r3, [r7, #23]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	0800e9f4 	.word	0x0800e9f4
 80031a8:	0800f45c 	.word	0x0800f45c
 80031ac:	0800e9d4 	.word	0x0800e9d4

080031b0 <updateStatePublish>:
                                        uint16_t packetId,
                                        MQTTStateOperation_t opType,
                                        MQTTQoS_t qos,
                                        MQTTPublishState_t currentState,
                                        MQTTPublishState_t newState )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af02      	add	r7, sp, #8
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	4611      	mov	r1, r2
 80031bc:	461a      	mov	r2, r3
 80031be:	460b      	mov	r3, r1
 80031c0:	80fb      	strh	r3, [r7, #6]
 80031c2:	4613      	mov	r3, r2
 80031c4:	717b      	strb	r3, [r7, #5]
    MQTTStatus_t status = MQTTSuccess;
 80031c6:	2300      	movs	r3, #0
 80031c8:	75fb      	strb	r3, [r7, #23]
    bool isTransitionValid = false;
 80031ca:	2300      	movs	r3, #0
 80031cc:	75bb      	strb	r3, [r7, #22]

    assert( pMqttContext != NULL );
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d106      	bne.n	80031e2 <updateStatePublish+0x32>
 80031d4:	4b28      	ldr	r3, [pc, #160]	; (8003278 <updateStatePublish+0xc8>)
 80031d6:	4a29      	ldr	r2, [pc, #164]	; (800327c <updateStatePublish+0xcc>)
 80031d8:	f44f 7139 	mov.w	r1, #740	; 0x2e4
 80031dc:	4828      	ldr	r0, [pc, #160]	; (8003280 <updateStatePublish+0xd0>)
 80031de:	f009 fcf3 	bl	800cbc8 <__assert_func>
    assert( packetId != MQTT_PACKET_ID_INVALID );
 80031e2:	88fb      	ldrh	r3, [r7, #6]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d106      	bne.n	80031f6 <updateStatePublish+0x46>
 80031e8:	4b26      	ldr	r3, [pc, #152]	; (8003284 <updateStatePublish+0xd4>)
 80031ea:	4a24      	ldr	r2, [pc, #144]	; (800327c <updateStatePublish+0xcc>)
 80031ec:	f240 21e5 	movw	r1, #741	; 0x2e5
 80031f0:	4823      	ldr	r0, [pc, #140]	; (8003280 <updateStatePublish+0xd0>)
 80031f2:	f009 fce9 	bl	800cbc8 <__assert_func>
    assert( qos != MQTTQoS0 );
 80031f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d106      	bne.n	800320c <updateStatePublish+0x5c>
 80031fe:	4b22      	ldr	r3, [pc, #136]	; (8003288 <updateStatePublish+0xd8>)
 8003200:	4a1e      	ldr	r2, [pc, #120]	; (800327c <updateStatePublish+0xcc>)
 8003202:	f240 21e6 	movw	r1, #742	; 0x2e6
 8003206:	481e      	ldr	r0, [pc, #120]	; (8003280 <updateStatePublish+0xd0>)
 8003208:	f009 fcde 	bl	800cbc8 <__assert_func>

    /* This will always succeed for an incoming publish. This is due to the fact
     * that the passed in currentState must be MQTTStateNull, since
     * #MQTT_UpdateStatePublish does not perform a lookup for receives. */
    isTransitionValid = validateTransitionPublish( currentState, newState, opType, qos );
 800320c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003210:	797a      	ldrb	r2, [r7, #5]
 8003212:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8003216:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 800321a:	f7ff fc1f 	bl	8002a5c <validateTransitionPublish>
 800321e:	4603      	mov	r3, r0
 8003220:	75bb      	strb	r3, [r7, #22]

    if( isTransitionValid == true )
 8003222:	7dbb      	ldrb	r3, [r7, #22]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d020      	beq.n	800326a <updateStatePublish+0xba>
    {
        /* addRecord will check for collisions. */
        if( opType == MQTT_RECEIVE )
 8003228:	797b      	ldrb	r3, [r7, #5]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d10f      	bne.n	800324e <updateStatePublish+0x9e>
        {
            status = addRecord( pMqttContext->incomingPublishRecords,
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003234:	f897 1020 	ldrb.w	r1, [r7, #32]
 8003238:	88fa      	ldrh	r2, [r7, #6]
 800323a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	460b      	mov	r3, r1
 8003242:	210a      	movs	r1, #10
 8003244:	f7ff fdb2 	bl	8002dac <addRecord>
 8003248:	4603      	mov	r3, r0
 800324a:	75fb      	strb	r3, [r7, #23]
 800324c:	e00f      	b.n	800326e <updateStatePublish+0xbe>
        /* Send operation. */
        else
        {
            /* Skip updating record when publish is resend and no state
             * update is required. */
            if( currentState != newState )
 800324e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003252:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003256:	429a      	cmp	r2, r3
 8003258:	d009      	beq.n	800326e <updateStatePublish+0xbe>
            {
                updateRecord( pMqttContext->outgoingPublishRecords, recordIndex, newState, false );
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003260:	2300      	movs	r3, #0
 8003262:	68b9      	ldr	r1, [r7, #8]
 8003264:	f7ff fe26 	bl	8002eb4 <updateRecord>
 8003268:	e001      	b.n	800326e <updateStatePublish+0xbe>
            }
        }
    }
    else
    {
        status = MQTTIllegalState;
 800326a:	2308      	movs	r3, #8
 800326c:	75fb      	strb	r3, [r7, #23]
        LogError( ( "Invalid transition from state %s to state %s.",
                    MQTT_State_strerror( currentState ),
                    MQTT_State_strerror( newState ) ) );
    }

    return status;
 800326e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3718      	adds	r7, #24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	0800ea14 	.word	0x0800ea14
 800327c:	0800f46c 	.word	0x0800f46c
 8003280:	0800e9d4 	.word	0x0800e9d4
 8003284:	0800e9b0 	.word	0x0800e9b0
 8003288:	0800ea04 	.word	0x0800ea04

0800328c <MQTT_ReserveState>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ReserveState( MQTTContext_t * pMqttContext,
                                uint16_t packetId,
                                MQTTQoS_t qos )
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af02      	add	r7, sp, #8
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	807b      	strh	r3, [r7, #2]
 8003298:	4613      	mov	r3, r2
 800329a:	707b      	strb	r3, [r7, #1]
    MQTTStatus_t status = MQTTSuccess;
 800329c:	2300      	movs	r3, #0
 800329e:	73fb      	strb	r3, [r7, #15]

    if( qos == MQTTQoS0 )
 80032a0:	787b      	ldrb	r3, [r7, #1]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d102      	bne.n	80032ac <MQTT_ReserveState+0x20>
    {
        status = MQTTSuccess;
 80032a6:	2300      	movs	r3, #0
 80032a8:	73fb      	strb	r3, [r7, #15]
 80032aa:	e012      	b.n	80032d2 <MQTT_ReserveState+0x46>
    }
    else if( ( packetId == MQTT_PACKET_ID_INVALID ) || ( pMqttContext == NULL ) )
 80032ac:	887b      	ldrh	r3, [r7, #2]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <MQTT_ReserveState+0x2c>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d102      	bne.n	80032be <MQTT_ReserveState+0x32>
    {
        status = MQTTBadParameter;
 80032b8:	2301      	movs	r3, #1
 80032ba:	73fb      	strb	r3, [r7, #15]
 80032bc:	e009      	b.n	80032d2 <MQTT_ReserveState+0x46>
    }
    else
    {
        /* Collisions are detected when adding the record. */
        status = addRecord( pMqttContext->outgoingPublishRecords,
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	787b      	ldrb	r3, [r7, #1]
 80032c2:	887a      	ldrh	r2, [r7, #2]
 80032c4:	2101      	movs	r1, #1
 80032c6:	9100      	str	r1, [sp, #0]
 80032c8:	210a      	movs	r1, #10
 80032ca:	f7ff fd6f 	bl	8002dac <addRecord>
 80032ce:	4603      	mov	r3, r0
 80032d0:	73fb      	strb	r3, [r7, #15]
                            packetId,
                            qos,
                            MQTTPublishSend );
    }

    return status;
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <MQTT_CalculateStatePublish>:

/*-----------------------------------------------------------*/

MQTTPublishState_t MQTT_CalculateStatePublish( MQTTStateOperation_t opType,
                                               MQTTQoS_t qos )
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	460a      	mov	r2, r1
 80032e6:	71fb      	strb	r3, [r7, #7]
 80032e8:	4613      	mov	r3, r2
 80032ea:	71bb      	strb	r3, [r7, #6]
    MQTTPublishState_t calculatedState = MQTTStateNull;
 80032ec:	2300      	movs	r3, #0
 80032ee:	73fb      	strb	r3, [r7, #15]

    switch( qos )
 80032f0:	79bb      	ldrb	r3, [r7, #6]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d011      	beq.n	800331a <MQTT_CalculateStatePublish+0x3e>
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	dc17      	bgt.n	800332a <MQTT_CalculateStatePublish+0x4e>
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <MQTT_CalculateStatePublish+0x28>
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d003      	beq.n	800330a <MQTT_CalculateStatePublish+0x2e>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRecPending : MQTTPubRecSend;
            break;

        default:
            /* No other QoS values. */
            break;
 8003302:	e012      	b.n	800332a <MQTT_CalculateStatePublish+0x4e>
            calculatedState = MQTTPublishDone;
 8003304:	230a      	movs	r3, #10
 8003306:	73fb      	strb	r3, [r7, #15]
            break;
 8003308:	e010      	b.n	800332c <MQTT_CalculateStatePublish+0x50>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubAckPending : MQTTPubAckSend;
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <MQTT_CalculateStatePublish+0x38>
 8003310:	2306      	movs	r3, #6
 8003312:	e000      	b.n	8003316 <MQTT_CalculateStatePublish+0x3a>
 8003314:	2302      	movs	r3, #2
 8003316:	73fb      	strb	r3, [r7, #15]
            break;
 8003318:	e008      	b.n	800332c <MQTT_CalculateStatePublish+0x50>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRecPending : MQTTPubRecSend;
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <MQTT_CalculateStatePublish+0x48>
 8003320:	2307      	movs	r3, #7
 8003322:	e000      	b.n	8003326 <MQTT_CalculateStatePublish+0x4a>
 8003324:	2303      	movs	r3, #3
 8003326:	73fb      	strb	r3, [r7, #15]
            break;
 8003328:	e000      	b.n	800332c <MQTT_CalculateStatePublish+0x50>
            break;
 800332a:	bf00      	nop
    }

    return calculatedState;
 800332c:	7bfb      	ldrb	r3, [r7, #15]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <MQTT_UpdateStatePublish>:
MQTTStatus_t MQTT_UpdateStatePublish( MQTTContext_t * pMqttContext,
                                      uint16_t packetId,
                                      MQTTStateOperation_t opType,
                                      MQTTQoS_t qos,
                                      MQTTPublishState_t * pNewState )
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b08a      	sub	sp, #40	; 0x28
 800333e:	af04      	add	r7, sp, #16
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	4608      	mov	r0, r1
 8003344:	4611      	mov	r1, r2
 8003346:	461a      	mov	r2, r3
 8003348:	4603      	mov	r3, r0
 800334a:	807b      	strh	r3, [r7, #2]
 800334c:	460b      	mov	r3, r1
 800334e:	707b      	strb	r3, [r7, #1]
 8003350:	4613      	mov	r3, r2
 8003352:	703b      	strb	r3, [r7, #0]
    MQTTPublishState_t newState = MQTTStateNull;
 8003354:	2300      	movs	r3, #0
 8003356:	73fb      	strb	r3, [r7, #15]
    MQTTPublishState_t currentState = MQTTStateNull;
 8003358:	2300      	movs	r3, #0
 800335a:	73bb      	strb	r3, [r7, #14]
    MQTTStatus_t mqttStatus = MQTTSuccess;
 800335c:	2300      	movs	r3, #0
 800335e:	75fb      	strb	r3, [r7, #23]
    size_t recordIndex = MQTT_STATE_ARRAY_MAX_COUNT;
 8003360:	230a      	movs	r3, #10
 8003362:	613b      	str	r3, [r7, #16]
    MQTTQoS_t foundQoS = MQTTQoS0;
 8003364:	2300      	movs	r3, #0
 8003366:	737b      	strb	r3, [r7, #13]

    if( ( pMqttContext == NULL ) || ( pNewState == NULL ) )
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <MQTT_UpdateStatePublish+0x3a>
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d102      	bne.n	800337a <MQTT_UpdateStatePublish+0x40>
    {
        LogError( ( "Argument cannot be NULL: pMqttContext=%p, pNewState=%p",
                    ( void * ) pMqttContext,
                    ( void * ) pNewState ) );

        mqttStatus = MQTTBadParameter;
 8003374:	2301      	movs	r3, #1
 8003376:	75fb      	strb	r3, [r7, #23]
 8003378:	e024      	b.n	80033c4 <MQTT_UpdateStatePublish+0x8a>
    }
    else if( qos == MQTTQoS0 )
 800337a:	783b      	ldrb	r3, [r7, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d103      	bne.n	8003388 <MQTT_UpdateStatePublish+0x4e>
    {
        /* QoS 0 publish. Do nothing. */
        *pNewState = MQTTPublishDone;
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	220a      	movs	r2, #10
 8003384:	701a      	strb	r2, [r3, #0]
 8003386:	e01d      	b.n	80033c4 <MQTT_UpdateStatePublish+0x8a>
    }
    else if( packetId == MQTT_PACKET_ID_INVALID )
 8003388:	887b      	ldrh	r3, [r7, #2]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d102      	bne.n	8003394 <MQTT_UpdateStatePublish+0x5a>
    {
        /* Publishes > QoS 0 need a valid packet ID. */
        mqttStatus = MQTTBadParameter;
 800338e:	2301      	movs	r3, #1
 8003390:	75fb      	strb	r3, [r7, #23]
 8003392:	e017      	b.n	80033c4 <MQTT_UpdateStatePublish+0x8a>
    }
    else if( opType == MQTT_SEND )
 8003394:	787b      	ldrb	r3, [r7, #1]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d114      	bne.n	80033c4 <MQTT_UpdateStatePublish+0x8a>
    {
        /* Search record for entry so we can check QoS. */
        recordIndex = findInRecord( pMqttContext->outgoingPublishRecords,
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f107 010d 	add.w	r1, r7, #13
 80033a0:	887a      	ldrh	r2, [r7, #2]
 80033a2:	f107 030e 	add.w	r3, r7, #14
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	460b      	mov	r3, r1
 80033aa:	210a      	movs	r1, #10
 80033ac:	f7ff fc5e 	bl	8002c6c <findInRecord>
 80033b0:	6138      	str	r0, [r7, #16]
                                    MQTT_STATE_ARRAY_MAX_COUNT,
                                    packetId,
                                    &foundQoS,
                                    &currentState );

        if( ( recordIndex == MQTT_STATE_ARRAY_MAX_COUNT ) || ( foundQoS != qos ) )
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	2b0a      	cmp	r3, #10
 80033b6:	d003      	beq.n	80033c0 <MQTT_UpdateStatePublish+0x86>
 80033b8:	7b7b      	ldrb	r3, [r7, #13]
 80033ba:	783a      	ldrb	r2, [r7, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d001      	beq.n	80033c4 <MQTT_UpdateStatePublish+0x8a>
        {
            /* Entry should match with supplied QoS. */
            mqttStatus = MQTTBadParameter;
 80033c0:	2301      	movs	r3, #1
 80033c2:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* QoS 1 or 2 receive. Nothing to be done. */
    }

    if( ( qos != MQTTQoS0 ) && ( mqttStatus == MQTTSuccess ) )
 80033c4:	783b      	ldrb	r3, [r7, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d020      	beq.n	800340c <MQTT_UpdateStatePublish+0xd2>
 80033ca:	7dfb      	ldrb	r3, [r7, #23]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d11d      	bne.n	800340c <MQTT_UpdateStatePublish+0xd2>
    {
        newState = MQTT_CalculateStatePublish( opType, qos );
 80033d0:	783a      	ldrb	r2, [r7, #0]
 80033d2:	787b      	ldrb	r3, [r7, #1]
 80033d4:	4611      	mov	r1, r2
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff ff80 	bl	80032dc <MQTT_CalculateStatePublish>
 80033dc:	4603      	mov	r3, r0
 80033de:	73fb      	strb	r3, [r7, #15]
        /* Validate state transition and update state records. */
        mqttStatus = updateStatePublish( pMqttContext,
 80033e0:	7bbb      	ldrb	r3, [r7, #14]
 80033e2:	7878      	ldrb	r0, [r7, #1]
 80033e4:	8879      	ldrh	r1, [r7, #2]
 80033e6:	7bfa      	ldrb	r2, [r7, #15]
 80033e8:	9202      	str	r2, [sp, #8]
 80033ea:	9301      	str	r3, [sp, #4]
 80033ec:	783b      	ldrb	r3, [r7, #0]
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	4603      	mov	r3, r0
 80033f2:	460a      	mov	r2, r1
 80033f4:	6939      	ldr	r1, [r7, #16]
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7ff feda 	bl	80031b0 <updateStatePublish>
 80033fc:	4603      	mov	r3, r0
 80033fe:	75fb      	strb	r3, [r7, #23]
                                         qos,
                                         currentState,
                                         newState );

        /* Update output parameter on success. */
        if( mqttStatus == MQTTSuccess )
 8003400:	7dfb      	ldrb	r3, [r7, #23]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d102      	bne.n	800340c <MQTT_UpdateStatePublish+0xd2>
        {
            *pNewState = newState;
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	7bfa      	ldrb	r2, [r7, #15]
 800340a:	701a      	strb	r2, [r3, #0]
        }
    }

    return mqttStatus;
 800340c:	7dfb      	ldrb	r3, [r7, #23]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <MQTT_UpdateStateAck>:
MQTTStatus_t MQTT_UpdateStateAck( MQTTContext_t * pMqttContext,
                                  uint16_t packetId,
                                  MQTTPubAckType_t packetType,
                                  MQTTStateOperation_t opType,
                                  MQTTPublishState_t * pNewState )
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b088      	sub	sp, #32
 800341a:	af02      	add	r7, sp, #8
 800341c:	6078      	str	r0, [r7, #4]
 800341e:	4608      	mov	r0, r1
 8003420:	4611      	mov	r1, r2
 8003422:	461a      	mov	r2, r3
 8003424:	4603      	mov	r3, r0
 8003426:	807b      	strh	r3, [r7, #2]
 8003428:	460b      	mov	r3, r1
 800342a:	707b      	strb	r3, [r7, #1]
 800342c:	4613      	mov	r3, r2
 800342e:	703b      	strb	r3, [r7, #0]
    MQTTPublishState_t newState = MQTTStateNull;
 8003430:	2300      	movs	r3, #0
 8003432:	73bb      	strb	r3, [r7, #14]
    MQTTPublishState_t currentState = MQTTStateNull;
 8003434:	2300      	movs	r3, #0
 8003436:	733b      	strb	r3, [r7, #12]
    bool isOutgoingPublish = isPublishOutgoing( packetType, opType );
 8003438:	783a      	ldrb	r2, [r7, #0]
 800343a:	787b      	ldrb	r3, [r7, #1]
 800343c:	4611      	mov	r1, r2
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff fbe6 	bl	8002c10 <isPublishOutgoing>
 8003444:	4603      	mov	r3, r0
 8003446:	737b      	strb	r3, [r7, #13]
    MQTTQoS_t qos = MQTTQoS0;
 8003448:	2300      	movs	r3, #0
 800344a:	72fb      	strb	r3, [r7, #11]
    size_t recordIndex = MQTT_STATE_ARRAY_MAX_COUNT;
 800344c:	230a      	movs	r3, #10
 800344e:	617b      	str	r3, [r7, #20]
    MQTTPubAckInfo_t * records = NULL;
 8003450:	2300      	movs	r3, #0
 8003452:	613b      	str	r3, [r7, #16]
    MQTTStatus_t status = MQTTBadResponse;
 8003454:	2305      	movs	r3, #5
 8003456:	73fb      	strb	r3, [r7, #15]

    if( ( pMqttContext == NULL ) || ( pNewState == NULL ) )
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <MQTT_UpdateStateAck+0x4e>
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d102      	bne.n	800346a <MQTT_UpdateStateAck+0x54>
    {
        LogError( ( "Argument cannot be NULL: pMqttContext=%p, pNewState=%p.",
                    ( void * ) pMqttContext,
                    ( void * ) pNewState ) );
        status = MQTTBadParameter;
 8003464:	2301      	movs	r3, #1
 8003466:	73fb      	strb	r3, [r7, #15]
 8003468:	e020      	b.n	80034ac <MQTT_UpdateStateAck+0x96>
    }
    else if( packetId == MQTT_PACKET_ID_INVALID )
 800346a:	887b      	ldrh	r3, [r7, #2]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d102      	bne.n	8003476 <MQTT_UpdateStateAck+0x60>
    {
        LogError( ( "Packet ID must be nonzero." ) );
        status = MQTTBadParameter;
 8003470:	2301      	movs	r3, #1
 8003472:	73fb      	strb	r3, [r7, #15]
 8003474:	e01a      	b.n	80034ac <MQTT_UpdateStateAck+0x96>
    }
    else if( packetType > MQTTPubcomp )
 8003476:	787b      	ldrb	r3, [r7, #1]
 8003478:	2b03      	cmp	r3, #3
 800347a:	d902      	bls.n	8003482 <MQTT_UpdateStateAck+0x6c>
    {
        LogError( ( "Invalid packet type %u.", ( unsigned int ) packetType ) );
        status = MQTTBadParameter;
 800347c:	2301      	movs	r3, #1
 800347e:	73fb      	strb	r3, [r7, #15]
 8003480:	e014      	b.n	80034ac <MQTT_UpdateStateAck+0x96>
    }
    else
    {
        if( isOutgoingPublish == true )
 8003482:	7b7b      	ldrb	r3, [r7, #13]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <MQTT_UpdateStateAck+0x78>
        {
            records = pMqttContext->outgoingPublishRecords;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	e002      	b.n	8003494 <MQTT_UpdateStateAck+0x7e>
        }
        else
        {
            records = pMqttContext->incomingPublishRecords;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3328      	adds	r3, #40	; 0x28
 8003492:	613b      	str	r3, [r7, #16]
        }

        recordIndex = findInRecord( records,
 8003494:	f107 010b 	add.w	r1, r7, #11
 8003498:	887a      	ldrh	r2, [r7, #2]
 800349a:	f107 030c 	add.w	r3, r7, #12
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	460b      	mov	r3, r1
 80034a2:	210a      	movs	r1, #10
 80034a4:	6938      	ldr	r0, [r7, #16]
 80034a6:	f7ff fbe1 	bl	8002c6c <findInRecord>
 80034aa:	6178      	str	r0, [r7, #20]
                                    packetId,
                                    &qos,
                                    &currentState );
    }

    if( recordIndex < MQTT_STATE_ARRAY_MAX_COUNT )
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2b09      	cmp	r3, #9
 80034b0:	d818      	bhi.n	80034e4 <MQTT_UpdateStateAck+0xce>
    {
        newState = MQTT_CalculateStateAck( packetType, opType, qos );
 80034b2:	7afa      	ldrb	r2, [r7, #11]
 80034b4:	7839      	ldrb	r1, [r7, #0]
 80034b6:	787b      	ldrb	r3, [r7, #1]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff fdcf 	bl	800305c <MQTT_CalculateStateAck>
 80034be:	4603      	mov	r3, r0
 80034c0:	73bb      	strb	r3, [r7, #14]

        /* Validate state transition and update state record. */
        status = updateStateAck( records, recordIndex, packetId, currentState, newState );
 80034c2:	7b39      	ldrb	r1, [r7, #12]
 80034c4:	887a      	ldrh	r2, [r7, #2]
 80034c6:	7bbb      	ldrb	r3, [r7, #14]
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	460b      	mov	r3, r1
 80034cc:	6979      	ldr	r1, [r7, #20]
 80034ce:	6938      	ldr	r0, [r7, #16]
 80034d0:	f7ff fe10 	bl	80030f4 <updateStateAck>
 80034d4:	4603      	mov	r3, r0
 80034d6:	73fb      	strb	r3, [r7, #15]

        /* Update the output parameter. */
        if( status == MQTTSuccess )
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d102      	bne.n	80034e4 <MQTT_UpdateStateAck+0xce>
        {
            *pNewState = newState;
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	7bba      	ldrb	r2, [r7, #14]
 80034e2:	701a      	strb	r2, [r3, #0]
    {
        LogError( ( "No matching record found for publish: PacketId=%u.",
                    ( unsigned int ) packetId ) );
    }

    return status;
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <MQTT_PubrelToResend>:
/*-----------------------------------------------------------*/

uint16_t MQTT_PubrelToResend( const MQTTContext_t * pMqttContext,
                              MQTTStateCursor_t * pCursor,
                              MQTTPublishState_t * pState )
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b086      	sub	sp, #24
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	60f8      	str	r0, [r7, #12]
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	607a      	str	r2, [r7, #4]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 80034fa:	2300      	movs	r3, #0
 80034fc:	82fb      	strh	r3, [r7, #22]
    uint16_t searchStates = 0U;
 80034fe:	2300      	movs	r3, #0
 8003500:	82bb      	strh	r3, [r7, #20]

    /* Validate arguments. */
    if( ( pMqttContext == NULL ) || ( pCursor == NULL ) || ( pState == NULL ) )
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d01b      	beq.n	8003540 <MQTT_PubrelToResend+0x52>
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d018      	beq.n	8003540 <MQTT_PubrelToResend+0x52>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d015      	beq.n	8003540 <MQTT_PubrelToResend+0x52>
    }
    else
    {
        /* PUBREL for packets in state #MQTTPubCompPending and #MQTTPubRelSend
         * would need to be resent when a session is reestablished.*/
        UINT16_SET_BIT( searchStates, MQTTPubCompPending );
 8003514:	8abb      	ldrh	r3, [r7, #20]
 8003516:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800351a:	82bb      	strh	r3, [r7, #20]
        UINT16_SET_BIT( searchStates, MQTTPubRelSend );
 800351c:	8abb      	ldrh	r3, [r7, #20]
 800351e:	f043 0310 	orr.w	r3, r3, #16
 8003522:	82bb      	strh	r3, [r7, #20]
        packetId = stateSelect( pMqttContext, searchStates, pCursor );
 8003524:	8abb      	ldrh	r3, [r7, #20]
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	4619      	mov	r1, r3
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f7ff fcf2 	bl	8002f14 <stateSelect>
 8003530:	4603      	mov	r3, r0
 8003532:	82fb      	strh	r3, [r7, #22]

        /* The state needs to be in #MQTTPubRelSend for sending PUBREL. */
        if( packetId != MQTT_PACKET_ID_INVALID )
 8003534:	8afb      	ldrh	r3, [r7, #22]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <MQTT_PubrelToResend+0x52>
        {
            *pState = MQTTPubRelSend;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2204      	movs	r2, #4
 800353e:	701a      	strb	r2, [r3, #0]
        }
    }

    return packetId;
 8003540:	8afb      	ldrh	r3, [r7, #22]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 800354a:	b480      	push	{r7}
 800354c:	b085      	sub	sp, #20
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8003554:	2300      	movs	r3, #0
 8003556:	73fb      	strb	r3, [r7, #15]
 8003558:	2300      	movs	r3, #0
 800355a:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 800355c:	2300      	movs	r3, #0
 800355e:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b2d      	cmp	r3, #45	; 0x2d
 8003566:	d119      	bne.n	800359c <ParseNumber+0x52>
        minus = 1;
 8003568:	2301      	movs	r3, #1
 800356a:	73fb      	strb	r3, [r7, #15]
        ptr++;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3301      	adds	r3, #1
 8003570:	607b      	str	r3, [r7, #4]
        i++;
 8003572:	7bbb      	ldrb	r3, [r7, #14]
 8003574:	3301      	adds	r3, #1
 8003576:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8003578:	e010      	b.n	800359c <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	461a      	mov	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	3b30      	subs	r3, #48	; 0x30
 800358c:	4413      	add	r3, r2
 800358e:	60bb      	str	r3, [r7, #8]
        ptr++;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3301      	adds	r3, #1
 8003594:	607b      	str	r3, [r7, #4]
        i++;
 8003596:	7bbb      	ldrb	r3, [r7, #14]
 8003598:	3301      	adds	r3, #1
 800359a:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b2f      	cmp	r3, #47	; 0x2f
 80035a2:	d903      	bls.n	80035ac <ParseNumber+0x62>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b39      	cmp	r3, #57	; 0x39
 80035aa:	d9e6      	bls.n	800357a <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <ParseNumber+0x6e>
        *cnt = i;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	7bba      	ldrb	r2, [r7, #14]
 80035b6:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <ParseNumber+0x7a>
        return 0 - sum;
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	425b      	negs	r3, r3
 80035c2:	e000      	b.n	80035c6 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 80035c4:	68bb      	ldr	r3, [r7, #8]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b084      	sub	sp, #16
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
 80035da:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 80035dc:	2300      	movs	r3, #0
 80035de:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 80035e0:	e019      	b.n	8003616 <ParseIP+0x44>
    hexcnt = 1;
 80035e2:	2301      	movs	r3, #1
 80035e4:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b2e      	cmp	r3, #46	; 0x2e
 80035ec:	d00e      	beq.n	800360c <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 80035ee:	f107 030e 	add.w	r3, r7, #14
 80035f2:	4619      	mov	r1, r3
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f7ff ffa8 	bl	800354a <ParseNumber>
 80035fa:	4601      	mov	r1, r0
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	73fa      	strb	r2, [r7, #15]
 8003602:	461a      	mov	r2, r3
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	4413      	add	r3, r2
 8003608:	b2ca      	uxtb	r2, r1
 800360a:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 800360c:	7bbb      	ldrb	r3, [r7, #14]
 800360e:	461a      	mov	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4413      	add	r3, r2
 8003614:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1e1      	bne.n	80035e2 <ParseIP+0x10>
  }
}
 800361e:	bf00      	nop
 8003620:	bf00      	nop
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	3302      	adds	r3, #2
 800363a:	4934      	ldr	r1, [pc, #208]	; (800370c <AT_ParseInfo+0xe4>)
 800363c:	4618      	mov	r0, r3
 800363e:	f009 fef9 	bl	800d434 <strtok>
 8003642:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8003644:	e05a      	b.n	80036fc <AT_ParseInfo+0xd4>
    switch (num++) {
 8003646:	7afb      	ldrb	r3, [r7, #11]
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	72fa      	strb	r2, [r7, #11]
 800364c:	2b06      	cmp	r3, #6
 800364e:	d84f      	bhi.n	80036f0 <AT_ParseInfo+0xc8>
 8003650:	a201      	add	r2, pc, #4	; (adr r2, 8003658 <AT_ParseInfo+0x30>)
 8003652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003656:	bf00      	nop
 8003658:	08003675 	.word	0x08003675
 800365c:	08003683 	.word	0x08003683
 8003660:	08003693 	.word	0x08003693
 8003664:	080036a3 	.word	0x080036a3
 8003668:	080036b3 	.word	0x080036b3
 800366c:	080036c3 	.word	0x080036c3
 8003670:	080036d7 	.word	0x080036d7
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	68f9      	ldr	r1, [r7, #12]
 800367a:	4618      	mov	r0, r3
 800367c:	f009 feb0 	bl	800d3e0 <strncpy>
      break;
 8003680:	e037      	b.n	80036f2 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3320      	adds	r3, #32
 8003686:	2218      	movs	r2, #24
 8003688:	68f9      	ldr	r1, [r7, #12]
 800368a:	4618      	mov	r0, r3
 800368c:	f009 fea8 	bl	800d3e0 <strncpy>
      break;
 8003690:	e02f      	b.n	80036f2 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3338      	adds	r3, #56	; 0x38
 8003696:	2210      	movs	r2, #16
 8003698:	68f9      	ldr	r1, [r7, #12]
 800369a:	4618      	mov	r0, r3
 800369c:	f009 fea0 	bl	800d3e0 <strncpy>
      break;
 80036a0:	e027      	b.n	80036f2 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3348      	adds	r3, #72	; 0x48
 80036a6:	2210      	movs	r2, #16
 80036a8:	68f9      	ldr	r1, [r7, #12]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f009 fe98 	bl	800d3e0 <strncpy>
      break;
 80036b0:	e01f      	b.n	80036f2 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3358      	adds	r3, #88	; 0x58
 80036b6:	2210      	movs	r2, #16
 80036b8:	68f9      	ldr	r1, [r7, #12]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f009 fe90 	bl	800d3e0 <strncpy>
      break;
 80036c0:	e017      	b.n	80036f2 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 80036c2:	2100      	movs	r1, #0
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f7ff ff40 	bl	800354a <ParseNumber>
 80036ca:	4603      	mov	r3, r0
 80036cc:	461a      	mov	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 80036d4:	e00d      	b.n	80036f2 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 80036d6:	490e      	ldr	r1, [pc, #56]	; (8003710 <AT_ParseInfo+0xe8>)
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f009 feab 	bl	800d434 <strtok>
 80036de:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3368      	adds	r3, #104	; 0x68
 80036e4:	2220      	movs	r2, #32
 80036e6:	68f9      	ldr	r1, [r7, #12]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f009 fe79 	bl	800d3e0 <strncpy>
      break;
 80036ee:	e000      	b.n	80036f2 <AT_ParseInfo+0xca>

    default: break;
 80036f0:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 80036f2:	4906      	ldr	r1, [pc, #24]	; (800370c <AT_ParseInfo+0xe4>)
 80036f4:	2000      	movs	r0, #0
 80036f6:	f009 fe9d 	bl	800d434 <strtok>
 80036fa:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1a1      	bne.n	8003646 <AT_ParseInfo+0x1e>
  }
}
 8003702:	bf00      	nop
 8003704:	bf00      	nop
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	0800eba4 	.word	0x0800eba4
 8003710:	0800eba8 	.word	0x0800eba8

08003714 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	3302      	adds	r3, #2
 8003726:	4952      	ldr	r1, [pc, #328]	; (8003870 <AT_ParseConnSettings+0x15c>)
 8003728:	4618      	mov	r0, r3
 800372a:	f009 fe83 	bl	800d434 <strtok>
 800372e:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8003730:	e095      	b.n	800385e <AT_ParseConnSettings+0x14a>
    switch (num++) {
 8003732:	7bfb      	ldrb	r3, [r7, #15]
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	73fa      	strb	r2, [r7, #15]
 8003738:	2b0b      	cmp	r3, #11
 800373a:	d87f      	bhi.n	800383c <AT_ParseConnSettings+0x128>
 800373c:	a201      	add	r2, pc, #4	; (adr r2, 8003744 <AT_ParseConnSettings+0x30>)
 800373e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003742:	bf00      	nop
 8003744:	08003775 	.word	0x08003775
 8003748:	08003783 	.word	0x08003783
 800374c:	08003793 	.word	0x08003793
 8003750:	080037a7 	.word	0x080037a7
 8003754:	080037bb 	.word	0x080037bb
 8003758:	080037cf 	.word	0x080037cf
 800375c:	080037dd 	.word	0x080037dd
 8003760:	080037eb 	.word	0x080037eb
 8003764:	080037f9 	.word	0x080037f9
 8003768:	08003807 	.word	0x08003807
 800376c:	08003815 	.word	0x08003815
 8003770:	08003829 	.word	0x08003829
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	2221      	movs	r2, #33	; 0x21
 8003778:	68b9      	ldr	r1, [r7, #8]
 800377a:	4618      	mov	r0, r3
 800377c:	f009 fe30 	bl	800d3e0 <strncpy>
      break;
 8003780:	e05d      	b.n	800383e <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	3321      	adds	r3, #33	; 0x21
 8003786:	2221      	movs	r2, #33	; 0x21
 8003788:	68b9      	ldr	r1, [r7, #8]
 800378a:	4618      	mov	r0, r3
 800378c:	f009 fe28 	bl	800d3e0 <strncpy>
      break;
 8003790:	e055      	b.n	800383e <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8003792:	2100      	movs	r1, #0
 8003794:	68b8      	ldr	r0, [r7, #8]
 8003796:	f7ff fed8 	bl	800354a <ParseNumber>
 800379a:	4603      	mov	r3, r0
 800379c:	b2da      	uxtb	r2, r3
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 80037a4:	e04b      	b.n	800383e <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 80037a6:	2100      	movs	r1, #0
 80037a8:	68b8      	ldr	r0, [r7, #8]
 80037aa:	f7ff fece 	bl	800354a <ParseNumber>
 80037ae:	4603      	mov	r3, r0
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 80037b8:	e041      	b.n	800383e <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 80037ba:	2100      	movs	r1, #0
 80037bc:	68b8      	ldr	r0, [r7, #8]
 80037be:	f7ff fec4 	bl	800354a <ParseNumber>
 80037c2:	4603      	mov	r3, r0
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 80037cc:	e037      	b.n	800383e <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	3348      	adds	r3, #72	; 0x48
 80037d2:	4619      	mov	r1, r3
 80037d4:	68b8      	ldr	r0, [r7, #8]
 80037d6:	f7ff fefc 	bl	80035d2 <ParseIP>
      break;
 80037da:	e030      	b.n	800383e <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	334c      	adds	r3, #76	; 0x4c
 80037e0:	4619      	mov	r1, r3
 80037e2:	68b8      	ldr	r0, [r7, #8]
 80037e4:	f7ff fef5 	bl	80035d2 <ParseIP>
      break;
 80037e8:	e029      	b.n	800383e <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	3350      	adds	r3, #80	; 0x50
 80037ee:	4619      	mov	r1, r3
 80037f0:	68b8      	ldr	r0, [r7, #8]
 80037f2:	f7ff feee 	bl	80035d2 <ParseIP>
      break;
 80037f6:	e022      	b.n	800383e <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	3354      	adds	r3, #84	; 0x54
 80037fc:	4619      	mov	r1, r3
 80037fe:	68b8      	ldr	r0, [r7, #8]
 8003800:	f7ff fee7 	bl	80035d2 <ParseIP>
      break;
 8003804:	e01b      	b.n	800383e <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	3358      	adds	r3, #88	; 0x58
 800380a:	4619      	mov	r1, r3
 800380c:	68b8      	ldr	r0, [r7, #8]
 800380e:	f7ff fee0 	bl	80035d2 <ParseIP>
      break;
 8003812:	e014      	b.n	800383e <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8003814:	2100      	movs	r1, #0
 8003816:	68b8      	ldr	r0, [r7, #8]
 8003818:	f7ff fe97 	bl	800354a <ParseNumber>
 800381c:	4603      	mov	r3, r0
 800381e:	b2da      	uxtb	r2, r3
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8003826:	e00a      	b.n	800383e <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8003828:	2100      	movs	r1, #0
 800382a:	68b8      	ldr	r0, [r7, #8]
 800382c:	f7ff fe8d 	bl	800354a <ParseNumber>
 8003830:	4603      	mov	r3, r0
 8003832:	b2da      	uxtb	r2, r3
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 800383a:	e000      	b.n	800383e <AT_ParseConnSettings+0x12a>

    default:
      break;
 800383c:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800383e:	490c      	ldr	r1, [pc, #48]	; (8003870 <AT_ParseConnSettings+0x15c>)
 8003840:	2000      	movs	r0, #0
 8003842:	f009 fdf7 	bl	800d434 <strtok>
 8003846:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d007      	beq.n	800385e <AT_ParseConnSettings+0x14a>
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	3b01      	subs	r3, #1
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b2c      	cmp	r3, #44	; 0x2c
 8003856:	d102      	bne.n	800385e <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	3301      	adds	r3, #1
 800385c:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	f47f af66 	bne.w	8003732 <AT_ParseConnSettings+0x1e>
    }
  }
}
 8003866:	bf00      	nop
 8003868:	bf00      	nop
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	0800eba4 	.word	0x0800eba4

08003874 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8003874:	b590      	push	{r4, r7, lr}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800388e:	68b8      	ldr	r0, [r7, #8]
 8003890:	f7fc fc9e 	bl	80001d0 <strlen>
 8003894:	4603      	mov	r3, r0
 8003896:	b299      	uxth	r1, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800389e:	461a      	mov	r2, r3
 80038a0:	68b8      	ldr	r0, [r7, #8]
 80038a2:	47a0      	blx	r4
 80038a4:	4603      	mov	r3, r0
 80038a6:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	dd3e      	ble.n	800392c <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 80038ba:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	4798      	blx	r3
 80038c2:	4603      	mov	r3, r0
 80038c4:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 80038c6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	dd27      	ble.n	800391e <AT_ExecuteCommand+0xaa>
 80038ce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80038d2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80038d6:	dc22      	bgt.n	800391e <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 80038d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80038dc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80038e0:	d105      	bne.n	80038ee <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 80038e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 80038ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	4413      	add	r3, r2
 80038f6:	2200      	movs	r2, #0
 80038f8:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 80038fa:	490f      	ldr	r1, [pc, #60]	; (8003938 <AT_ExecuteCommand+0xc4>)
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f009 fd82 	bl	800d406 <strstr>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	e010      	b.n	800392e <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 800390c:	490b      	ldr	r1, [pc, #44]	; (800393c <AT_ExecuteCommand+0xc8>)
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f009 fd79 	bl	800d406 <strstr>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800391a:	2305      	movs	r3, #5
 800391c:	e007      	b.n	800392e <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800391e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003922:	f113 0f04 	cmn.w	r3, #4
 8003926:	d101      	bne.n	800392c <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8003928:	2306      	movs	r3, #6
 800392a:	e000      	b.n	800392e <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 800392c:	2304      	movs	r3, #4
}
 800392e:	4618      	mov	r0, r3
 8003930:	371c      	adds	r7, #28
 8003932:	46bd      	mov	sp, r7
 8003934:	bd90      	pop	{r4, r7, pc}
 8003936:	bf00      	nop
 8003938:	0800ebb8 	.word	0x0800ebb8
 800393c:	0800ebc4 	.word	0x0800ebc4

08003940 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8003948:	2302      	movs	r3, #2
 800394a:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f247 5230 	movw	r2, #30000	; 0x7530
 8003952:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800395c:	2000      	movs	r0, #0
 800395e:	4798      	blx	r3
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d113      	bne.n	800398e <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800396c:	461a      	mov	r2, r3
 800396e:	490a      	ldr	r1, [pc, #40]	; (8003998 <ES_WIFI_Init+0x58>)
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7ff ff7f 	bl	8003874 <AT_ExecuteCommand>
 8003976:	4603      	mov	r3, r0
 8003978:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 800397a:	7bfb      	ldrb	r3, [r7, #15]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d106      	bne.n	800398e <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003986:	4619      	mov	r1, r3
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff fe4d 	bl	8003628 <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 800398e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	0800ebd4 	.word	0x0800ebd4

0800399c <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00b      	beq.n	80039c8 <ES_WIFI_RegisterBusIO+0x2c>
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d008      	beq.n	80039c8 <ES_WIFI_RegisterBusIO+0x2c>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <ES_WIFI_RegisterBusIO+0x2c>
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <ES_WIFI_RegisterBusIO+0x2c>
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 80039c8:	2302      	movs	r3, #2
 80039ca:	e014      	b.n	80039f6 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	69fa      	ldr	r2, [r7, #28]
 80039e8:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
	...

08003a04 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
 8003a10:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	4932      	ldr	r1, [pc, #200]	; (8003ae4 <ES_WIFI_Connect+0xe0>)
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f009 fcbf 	bl	800d3a0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003a2e:	461a      	mov	r2, r3
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f7ff ff1f 	bl	8003874 <AT_ExecuteCommand>
 8003a36:	4603      	mov	r3, r0
 8003a38:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8003a3a:	7dfb      	ldrb	r3, [r7, #23]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d14b      	bne.n	8003ad8 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	4927      	ldr	r1, [pc, #156]	; (8003ae8 <ES_WIFI_Connect+0xe4>)
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f009 fca8 	bl	800d3a0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f7ff ff08 	bl	8003874 <AT_ExecuteCommand>
 8003a64:	4603      	mov	r3, r0
 8003a66:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8003a68:	7dfb      	ldrb	r3, [r7, #23]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d134      	bne.n	8003ad8 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	78fa      	ldrb	r2, [r7, #3]
 8003a72:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003a7c:	78fa      	ldrb	r2, [r7, #3]
 8003a7e:	491b      	ldr	r1, [pc, #108]	; (8003aec <ES_WIFI_Connect+0xe8>)
 8003a80:	4618      	mov	r0, r3
 8003a82:	f009 fc8d 	bl	800d3a0 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003a92:	461a      	mov	r2, r3
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f7ff feed 	bl	8003874 <AT_ExecuteCommand>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8003a9e:	7dfb      	ldrb	r3, [r7, #23]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d119      	bne.n	8003ad8 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003aaa:	4911      	ldr	r1, [pc, #68]	; (8003af0 <ES_WIFI_Connect+0xec>)
 8003aac:	4618      	mov	r0, r3
 8003aae:	f009 fc77 	bl	800d3a0 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003abe:	461a      	mov	r2, r3
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f7ff fed7 	bl	8003874 <AT_ExecuteCommand>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8003aca:	7dfb      	ldrb	r3, [r7, #23]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d103      	bne.n	8003ad8 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8003ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	0800ebec 	.word	0x0800ebec
 8003ae8:	0800ebf4 	.word	0x0800ebf4
 8003aec:	0800ebfc 	.word	0x0800ebfc
 8003af0:	0800ec04 	.word	0x0800ec04

08003af4 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003b02:	4910      	ldr	r1, [pc, #64]	; (8003b44 <ES_WIFI_GetNetworkSettings+0x50>)
 8003b04:	4618      	mov	r0, r3
 8003b06:	f009 fc4b 	bl	800d3a0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003b16:	461a      	mov	r2, r3
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff feab 	bl	8003874 <AT_ExecuteCommand>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 8003b22:	7bfb      	ldrb	r3, [r7, #15]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d108      	bne.n	8003b3a <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	338d      	adds	r3, #141	; 0x8d
 8003b32:	4619      	mov	r1, r3
 8003b34:	4610      	mov	r0, r2
 8003b36:	f7ff fded 	bl	8003714 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	0800ec10 	.word	0x0800ec10

08003b48 <HAL_GPIO_EXTI_Callback>:
static  int wait_spi_rx_event(int timeout);
static  void SPI_WIFI_DelayUs(uint32_t);
/* Private functions ---------------------------------------------------------*/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin==GPIO_PIN_1){
 8003b52:	88fb      	ldrh	r3, [r7, #6]
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d101      	bne.n	8003b5c <HAL_GPIO_EXTI_Callback+0x14>
		SPI_WIFI_ISR();
 8003b58:	f000 fb88 	bl	800426c <SPI_WIFI_ISR>
	}


}
 8003b5c:	bf00      	nop
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08c      	sub	sp, #48	; 0x30
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8003b6c:	4b57      	ldr	r3, [pc, #348]	; (8003ccc <SPI_WIFI_MspInit+0x168>)
 8003b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b70:	4a56      	ldr	r2, [pc, #344]	; (8003ccc <SPI_WIFI_MspInit+0x168>)
 8003b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b76:	6593      	str	r3, [r2, #88]	; 0x58
 8003b78:	4b54      	ldr	r3, [pc, #336]	; (8003ccc <SPI_WIFI_MspInit+0x168>)
 8003b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b80:	61bb      	str	r3, [r7, #24]
 8003b82:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b84:	4b51      	ldr	r3, [pc, #324]	; (8003ccc <SPI_WIFI_MspInit+0x168>)
 8003b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b88:	4a50      	ldr	r2, [pc, #320]	; (8003ccc <SPI_WIFI_MspInit+0x168>)
 8003b8a:	f043 0302 	orr.w	r3, r3, #2
 8003b8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b90:	4b4e      	ldr	r3, [pc, #312]	; (8003ccc <SPI_WIFI_MspInit+0x168>)
 8003b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b9c:	4b4b      	ldr	r3, [pc, #300]	; (8003ccc <SPI_WIFI_MspInit+0x168>)
 8003b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba0:	4a4a      	ldr	r2, [pc, #296]	; (8003ccc <SPI_WIFI_MspInit+0x168>)
 8003ba2:	f043 0304 	orr.w	r3, r3, #4
 8003ba6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ba8:	4b48      	ldr	r3, [pc, #288]	; (8003ccc <SPI_WIFI_MspInit+0x168>)
 8003baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003bb4:	4b45      	ldr	r3, [pc, #276]	; (8003ccc <SPI_WIFI_MspInit+0x168>)
 8003bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb8:	4a44      	ldr	r2, [pc, #272]	; (8003ccc <SPI_WIFI_MspInit+0x168>)
 8003bba:	f043 0310 	orr.w	r3, r3, #16
 8003bbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bc0:	4b42      	ldr	r3, [pc, #264]	; (8003ccc <SPI_WIFI_MspInit+0x168>)
 8003bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bd2:	483f      	ldr	r0, [pc, #252]	; (8003cd0 <SPI_WIFI_MspInit+0x16c>)
 8003bd4:	f003 fc18 	bl	8007408 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8003bd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bdc:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8003bde:	2301      	movs	r3, #1
 8003be0:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8003be6:	2300      	movs	r3, #0
 8003be8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8003bea:	f107 031c 	add.w	r3, r7, #28
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4837      	ldr	r0, [pc, #220]	; (8003cd0 <SPI_WIFI_MspInit+0x16c>)
 8003bf2:	f003 f953 	bl	8006e9c <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8003bfa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003bfe:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8003c00:	2300      	movs	r3, #0
 8003c02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8003c04:	2300      	movs	r3, #0
 8003c06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8003c08:	f107 031c 	add.w	r3, r7, #28
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4831      	ldr	r0, [pc, #196]	; (8003cd4 <SPI_WIFI_MspInit+0x170>)
 8003c10:	f003 f944 	bl	8006e9c <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8003c14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c18:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8003c22:	2300      	movs	r3, #0
 8003c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 8003c26:	2300      	movs	r3, #0
 8003c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8003c2a:	f107 031c 	add.w	r3, r7, #28
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4828      	ldr	r0, [pc, #160]	; (8003cd4 <SPI_WIFI_MspInit+0x170>)
 8003c32:	f003 f933 	bl	8006e9c <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8003c36:	2201      	movs	r2, #1
 8003c38:	2101      	movs	r1, #1
 8003c3a:	4826      	ldr	r0, [pc, #152]	; (8003cd4 <SPI_WIFI_MspInit+0x170>)
 8003c3c:	f003 fbe4 	bl	8007408 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8003c40:	2301      	movs	r3, #1
 8003c42:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8003c44:	2301      	movs	r3, #1
 8003c46:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8003c50:	f107 031c 	add.w	r3, r7, #28
 8003c54:	4619      	mov	r1, r3
 8003c56:	481f      	ldr	r0, [pc, #124]	; (8003cd4 <SPI_WIFI_MspInit+0x170>)
 8003c58:	f003 f920 	bl	8006e9c <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8003c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c60:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8003c62:	2302      	movs	r3, #2
 8003c64:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8003c6e:	2306      	movs	r3, #6
 8003c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8003c72:	f107 031c 	add.w	r3, r7, #28
 8003c76:	4619      	mov	r1, r3
 8003c78:	4817      	ldr	r0, [pc, #92]	; (8003cd8 <SPI_WIFI_MspInit+0x174>)
 8003c7a:	f003 f90f 	bl	8006e9c <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8003c7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c82:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8003c84:	2302      	movs	r3, #2
 8003c86:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8003c90:	2306      	movs	r3, #6
 8003c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8003c94:	f107 031c 	add.w	r3, r7, #28
 8003c98:	4619      	mov	r1, r3
 8003c9a:	480f      	ldr	r0, [pc, #60]	; (8003cd8 <SPI_WIFI_MspInit+0x174>)
 8003c9c:	f003 f8fe 	bl	8006e9c <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8003ca0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ca4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8003caa:	2301      	movs	r3, #1
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8003cb2:	2306      	movs	r3, #6
 8003cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8003cb6:	f107 031c 	add.w	r3, r7, #28
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4806      	ldr	r0, [pc, #24]	; (8003cd8 <SPI_WIFI_MspInit+0x174>)
 8003cbe:	f003 f8ed 	bl	8006e9c <HAL_GPIO_Init>
}
 8003cc2:	bf00      	nop
 8003cc4:	3730      	adds	r7, #48	; 0x30
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	48000400 	.word	0x48000400
 8003cd4:	48001000 	.word	0x48001000
 8003cd8:	48000800 	.word	0x48000800

08003cdc <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 8003cea:	88fb      	ldrh	r3, [r7, #6]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d145      	bne.n	8003d7c <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8003cf0:	4b27      	ldr	r3, [pc, #156]	; (8003d90 <SPI_WIFI_Init+0xb4>)
 8003cf2:	4a28      	ldr	r2, [pc, #160]	; (8003d94 <SPI_WIFI_Init+0xb8>)
 8003cf4:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8003cf6:	4826      	ldr	r0, [pc, #152]	; (8003d90 <SPI_WIFI_Init+0xb4>)
 8003cf8:	f7ff ff34 	bl	8003b64 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8003cfc:	4b24      	ldr	r3, [pc, #144]	; (8003d90 <SPI_WIFI_Init+0xb4>)
 8003cfe:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d02:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8003d04:	4b22      	ldr	r3, [pc, #136]	; (8003d90 <SPI_WIFI_Init+0xb4>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8003d0a:	4b21      	ldr	r3, [pc, #132]	; (8003d90 <SPI_WIFI_Init+0xb4>)
 8003d0c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8003d10:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8003d12:	4b1f      	ldr	r3, [pc, #124]	; (8003d90 <SPI_WIFI_Init+0xb4>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8003d18:	4b1d      	ldr	r3, [pc, #116]	; (8003d90 <SPI_WIFI_Init+0xb4>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8003d1e:	4b1c      	ldr	r3, [pc, #112]	; (8003d90 <SPI_WIFI_Init+0xb4>)
 8003d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d24:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8003d26:	4b1a      	ldr	r3, [pc, #104]	; (8003d90 <SPI_WIFI_Init+0xb4>)
 8003d28:	2210      	movs	r2, #16
 8003d2a:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8003d2c:	4b18      	ldr	r3, [pc, #96]	; (8003d90 <SPI_WIFI_Init+0xb4>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8003d32:	4b17      	ldr	r3, [pc, #92]	; (8003d90 <SPI_WIFI_Init+0xb4>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8003d38:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <SPI_WIFI_Init+0xb4>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8003d3e:	4b14      	ldr	r3, [pc, #80]	; (8003d90 <SPI_WIFI_Init+0xb4>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8003d44:	4812      	ldr	r0, [pc, #72]	; (8003d90 <SPI_WIFI_Init+0xb4>)
 8003d46:	f005 ff55 	bl	8009bf4 <HAL_SPI_Init>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d002      	beq.n	8003d56 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8003d50:	f04f 33ff 	mov.w	r3, #4294967295
 8003d54:	e018      	b.n	8003d88 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8003d56:	2200      	movs	r2, #0
 8003d58:	2100      	movs	r1, #0
 8003d5a:	2007      	movs	r0, #7
 8003d5c:	f002 ff19 	bl	8006b92 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8003d60:	2007      	movs	r0, #7
 8003d62:	f002 ff32 	bl	8006bca <HAL_NVIC_EnableIRQ>

     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8003d66:	2200      	movs	r2, #0
 8003d68:	2100      	movs	r1, #0
 8003d6a:	2033      	movs	r0, #51	; 0x33
 8003d6c:	f002 ff11 	bl	8006b92 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8003d70:	2033      	movs	r0, #51	; 0x33
 8003d72:	f002 ff2a 	bl	8006bca <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8003d76:	200a      	movs	r0, #10
 8003d78:	f000 f9fe 	bl	8004178 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 8003d7c:	f000 f80c 	bl	8003d98 <SPI_WIFI_ResetModule>
 8003d80:	4603      	mov	r3, r0
 8003d82:	73fb      	strb	r3, [r7, #15]

  return rc;
 8003d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	20000098 	.word	0x20000098
 8003d94:	40003c00 	.word	0x40003c00

08003d98 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8003d9e:	f002 fded 	bl	800697c <HAL_GetTick>
 8003da2:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8003da4:	2300      	movs	r3, #0
 8003da6:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8003da8:	2200      	movs	r2, #0
 8003daa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dae:	4830      	ldr	r0, [pc, #192]	; (8003e70 <SPI_WIFI_ResetModule+0xd8>)
 8003db0:	f003 fb2a 	bl	8007408 <HAL_GPIO_WritePin>
 8003db4:	200a      	movs	r0, #10
 8003db6:	f002 fded 	bl	8006994 <HAL_Delay>
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dc0:	482b      	ldr	r0, [pc, #172]	; (8003e70 <SPI_WIFI_ResetModule+0xd8>)
 8003dc2:	f003 fb21 	bl	8007408 <HAL_GPIO_WritePin>
 8003dc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003dca:	f002 fde3 	bl	8006994 <HAL_Delay>
  WIFI_ENABLE_NSS();
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	4827      	ldr	r0, [pc, #156]	; (8003e70 <SPI_WIFI_ResetModule+0xd8>)
 8003dd4:	f003 fb18 	bl	8007408 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8003dd8:	200f      	movs	r0, #15
 8003dda:	f000 f9cd 	bl	8004178 <SPI_WIFI_DelayUs>

  while (WIFI_IS_CMDDATA_READY())
 8003dde:	e020      	b.n	8003e22 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
 8003de2:	463a      	mov	r2, r7
 8003de4:	18d1      	adds	r1, r2, r3
 8003de6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003dea:	2201      	movs	r2, #1
 8003dec:	4821      	ldr	r0, [pc, #132]	; (8003e74 <SPI_WIFI_ResetModule+0xdc>)
 8003dee:	f005 ffcc 	bl	8009d8a <HAL_SPI_Receive>
 8003df2:	4603      	mov	r3, r0
 8003df4:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	3302      	adds	r3, #2
 8003dfa:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8003dfc:	f002 fdbe 	bl	800697c <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e0a:	d202      	bcs.n	8003e12 <SPI_WIFI_ResetModule+0x7a>
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d007      	beq.n	8003e22 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 8003e12:	2201      	movs	r2, #1
 8003e14:	2101      	movs	r1, #1
 8003e16:	4816      	ldr	r0, [pc, #88]	; (8003e70 <SPI_WIFI_ResetModule+0xd8>)
 8003e18:	f003 faf6 	bl	8007408 <HAL_GPIO_WritePin>
      return -1;
 8003e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e20:	e021      	b.n	8003e66 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8003e22:	2102      	movs	r1, #2
 8003e24:	4812      	ldr	r0, [pc, #72]	; (8003e70 <SPI_WIFI_ResetModule+0xd8>)
 8003e26:	f003 fad7 	bl	80073d8 <HAL_GPIO_ReadPin>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d0d7      	beq.n	8003de0 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 8003e30:	2201      	movs	r2, #1
 8003e32:	2101      	movs	r1, #1
 8003e34:	480e      	ldr	r0, [pc, #56]	; (8003e70 <SPI_WIFI_ResetModule+0xd8>)
 8003e36:	f003 fae7 	bl	8007408 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8003e3a:	783b      	ldrb	r3, [r7, #0]
 8003e3c:	2b15      	cmp	r3, #21
 8003e3e:	d10e      	bne.n	8003e5e <SPI_WIFI_ResetModule+0xc6>
 8003e40:	787b      	ldrb	r3, [r7, #1]
 8003e42:	2b15      	cmp	r3, #21
 8003e44:	d10b      	bne.n	8003e5e <SPI_WIFI_ResetModule+0xc6>
 8003e46:	78bb      	ldrb	r3, [r7, #2]
 8003e48:	2b0d      	cmp	r3, #13
 8003e4a:	d108      	bne.n	8003e5e <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8003e4c:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8003e4e:	2b0a      	cmp	r3, #10
 8003e50:	d105      	bne.n	8003e5e <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8003e52:	793b      	ldrb	r3, [r7, #4]
 8003e54:	2b3e      	cmp	r3, #62	; 0x3e
 8003e56:	d102      	bne.n	8003e5e <SPI_WIFI_ResetModule+0xc6>
 8003e58:	797b      	ldrb	r3, [r7, #5]
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	d002      	beq.n	8003e64 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8003e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e62:	e000      	b.n	8003e66 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	48001000 	.word	0x48001000
 8003e74:	20000098 	.word	0x20000098

08003e78 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8003e7c:	4802      	ldr	r0, [pc, #8]	; (8003e88 <SPI_WIFI_DeInit+0x10>)
 8003e7e:	f005 ff5c 	bl	8009d3a <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	20000098 	.word	0x20000098

08003e8c <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8003e94:	f002 fd72 	bl	800697c <HAL_GetTick>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 8003e9c:	e00a      	b.n	8003eb4 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8003e9e:	f002 fd6d 	bl	800697c <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	1ad2      	subs	r2, r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d902      	bls.n	8003eb4 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8003eae:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb2:	e007      	b.n	8003ec4 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8003eb4:	2102      	movs	r1, #2
 8003eb6:	4805      	ldr	r0, [pc, #20]	; (8003ecc <wait_cmddata_rdy_high+0x40>)
 8003eb8:	f003 fa8e 	bl	80073d8 <HAL_GPIO_ReadPin>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d1ed      	bne.n	8003e9e <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	48001000 	.word	0x48001000

08003ed0 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8003ed8:	f002 fd50 	bl	800697c <HAL_GetTick>
 8003edc:	4603      	mov	r3, r0
 8003ede:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 8003ee0:	e00a      	b.n	8003ef8 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8003ee2:	f002 fd4b 	bl	800697c <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	1ad2      	subs	r2, r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d902      	bls.n	8003ef8 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8003ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef6:	e004      	b.n	8003f02 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8003ef8:	4b04      	ldr	r3, [pc, #16]	; (8003f0c <wait_cmddata_rdy_rising_event+0x3c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d0f0      	beq.n	8003ee2 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8003f00:	2300      	movs	r3, #0
#endif
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000104 	.word	0x20000104

08003f10 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8003f18:	f002 fd30 	bl	800697c <HAL_GetTick>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 8003f20:	e00a      	b.n	8003f38 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8003f22:	f002 fd2b 	bl	800697c <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	1ad2      	subs	r2, r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d902      	bls.n	8003f38 <wait_spi_rx_event+0x28>
    {
      return -1;
 8003f32:	f04f 33ff 	mov.w	r3, #4294967295
 8003f36:	e004      	b.n	8003f42 <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 8003f38:	4b04      	ldr	r3, [pc, #16]	; (8003f4c <wait_spi_rx_event+0x3c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d0f0      	beq.n	8003f22 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8003f40:	2300      	movs	r3, #0
#endif
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	200000fc 	.word	0x200000fc

08003f50 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8003f58:	f002 fd10 	bl	800697c <HAL_GetTick>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 8003f60:	e00a      	b.n	8003f78 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8003f62:	f002 fd0b 	bl	800697c <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	1ad2      	subs	r2, r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d902      	bls.n	8003f78 <wait_spi_tx_event+0x28>
    {
      return -1;
 8003f72:	f04f 33ff 	mov.w	r3, #4294967295
 8003f76:	e004      	b.n	8003f82 <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 8003f78:	4b04      	ldr	r3, [pc, #16]	; (8003f8c <wait_spi_tx_event+0x3c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d0f0      	beq.n	8003f62 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8003f80:	2300      	movs	r3, #0
#endif
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000100 	.word	0x20000100

08003f90 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	4834      	ldr	r0, [pc, #208]	; (8004078 <SPI_WIFI_ReceiveData+0xe8>)
 8003fa8:	f003 fa2e 	bl	8007408 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8003fac:	2003      	movs	r0, #3
 8003fae:	f000 f8e3 	bl	8004178 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff ff8b 	bl	8003ed0 <wait_cmddata_rdy_rising_event>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	da02      	bge.n	8003fc6 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8003fc0:	f06f 0302 	mvn.w	r3, #2
 8003fc4:	e054      	b.n	8004070 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	2101      	movs	r1, #1
 8003fca:	482b      	ldr	r0, [pc, #172]	; (8004078 <SPI_WIFI_ReceiveData+0xe8>)
 8003fcc:	f003 fa1c 	bl	8007408 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8003fd0:	200f      	movs	r0, #15
 8003fd2:	f000 f8d1 	bl	8004178 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8003fd6:	e03d      	b.n	8004054 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 8003fd8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003fdc:	897b      	ldrh	r3, [r7, #10]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	db02      	blt.n	8003fe8 <SPI_WIFI_ReceiveData+0x58>
 8003fe2:	897b      	ldrh	r3, [r7, #10]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d13c      	bne.n	8004062 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 8003fe8:	4b24      	ldr	r3, [pc, #144]	; (800407c <SPI_WIFI_ReceiveData+0xec>)
 8003fea:	2201      	movs	r2, #1
 8003fec:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8003fee:	f107 0314 	add.w	r3, r7, #20
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4822      	ldr	r0, [pc, #136]	; (8004080 <SPI_WIFI_ReceiveData+0xf0>)
 8003ff8:	f006 fa98 	bl	800a52c <HAL_SPI_Receive_IT>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d007      	beq.n	8004012 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8004002:	2201      	movs	r2, #1
 8004004:	2101      	movs	r1, #1
 8004006:	481c      	ldr	r0, [pc, #112]	; (8004078 <SPI_WIFI_ReceiveData+0xe8>)
 8004008:	f003 f9fe 	bl	8007408 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 800400c:	f04f 33ff 	mov.w	r3, #4294967295
 8004010:	e02e      	b.n	8004070 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff ff7b 	bl	8003f10 <wait_spi_rx_event>

      pData[0] = tmp[0];
 800401a:	7d3a      	ldrb	r2, [r7, #20]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	3301      	adds	r3, #1
 8004024:	7d7a      	ldrb	r2, [r7, #21]
 8004026:	701a      	strb	r2, [r3, #0]
      length += 2;
 8004028:	8afb      	ldrh	r3, [r7, #22]
 800402a:	3302      	adds	r3, #2
 800402c:	b29b      	uxth	r3, r3
 800402e:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	3302      	adds	r3, #2
 8004034:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 8004036:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800403a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800403e:	db09      	blt.n	8004054 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8004040:	2201      	movs	r2, #1
 8004042:	2101      	movs	r1, #1
 8004044:	480c      	ldr	r0, [pc, #48]	; (8004078 <SPI_WIFI_ReceiveData+0xe8>)
 8004046:	f003 f9df 	bl	8007408 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 800404a:	f7ff fea5 	bl	8003d98 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 800404e:	f06f 0303 	mvn.w	r3, #3
 8004052:	e00d      	b.n	8004070 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8004054:	2102      	movs	r1, #2
 8004056:	4808      	ldr	r0, [pc, #32]	; (8004078 <SPI_WIFI_ReceiveData+0xe8>)
 8004058:	f003 f9be 	bl	80073d8 <HAL_GPIO_ReadPin>
 800405c:	4603      	mov	r3, r0
 800405e:	2b01      	cmp	r3, #1
 8004060:	d0ba      	beq.n	8003fd8 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8004062:	2201      	movs	r2, #1
 8004064:	2101      	movs	r1, #1
 8004066:	4804      	ldr	r0, [pc, #16]	; (8004078 <SPI_WIFI_ReceiveData+0xe8>)
 8004068:	f003 f9ce 	bl	8007408 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 800406c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	48001000 	.word	0x48001000
 800407c:	200000fc 	.word	0x200000fc
 8004080:	20000098 	.word	0x20000098

08004084 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	460b      	mov	r3, r1
 800408e:	607a      	str	r2, [r7, #4]
 8004090:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff fef9 	bl	8003e8c <wait_cmddata_rdy_high>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	da02      	bge.n	80040a6 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 80040a0:	f04f 33ff 	mov.w	r3, #4294967295
 80040a4:	e04f      	b.n	8004146 <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 80040a6:	4b2a      	ldr	r3, [pc, #168]	; (8004150 <SPI_WIFI_SendData+0xcc>)
 80040a8:	2201      	movs	r2, #1
 80040aa:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 80040ac:	2200      	movs	r2, #0
 80040ae:	2101      	movs	r1, #1
 80040b0:	4828      	ldr	r0, [pc, #160]	; (8004154 <SPI_WIFI_SendData+0xd0>)
 80040b2:	f003 f9a9 	bl	8007408 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80040b6:	200f      	movs	r0, #15
 80040b8:	f000 f85e 	bl	8004178 <SPI_WIFI_DelayUs>
  if (len > 1)
 80040bc:	897b      	ldrh	r3, [r7, #10]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d919      	bls.n	80040f6 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 80040c2:	4b25      	ldr	r3, [pc, #148]	; (8004158 <SPI_WIFI_SendData+0xd4>)
 80040c4:	2201      	movs	r2, #1
 80040c6:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 80040c8:	897b      	ldrh	r3, [r7, #10]
 80040ca:	085b      	lsrs	r3, r3, #1
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	461a      	mov	r2, r3
 80040d0:	68f9      	ldr	r1, [r7, #12]
 80040d2:	4822      	ldr	r0, [pc, #136]	; (800415c <SPI_WIFI_SendData+0xd8>)
 80040d4:	f006 f99c 	bl	800a410 <HAL_SPI_Transmit_IT>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d007      	beq.n	80040ee <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 80040de:	2201      	movs	r2, #1
 80040e0:	2101      	movs	r1, #1
 80040e2:	481c      	ldr	r0, [pc, #112]	; (8004154 <SPI_WIFI_SendData+0xd0>)
 80040e4:	f003 f990 	bl	8007408 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 80040e8:	f04f 33ff 	mov.w	r3, #4294967295
 80040ec:	e02b      	b.n	8004146 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff ff2d 	bl	8003f50 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 80040f6:	897b      	ldrh	r3, [r7, #10]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d020      	beq.n	8004142 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 8004100:	897b      	ldrh	r3, [r7, #10]
 8004102:	3b01      	subs	r3, #1
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	4413      	add	r3, r2
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 800410c:	230a      	movs	r3, #10
 800410e:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8004110:	4b11      	ldr	r3, [pc, #68]	; (8004158 <SPI_WIFI_SendData+0xd4>)
 8004112:	2201      	movs	r2, #1
 8004114:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8004116:	f107 0314 	add.w	r3, r7, #20
 800411a:	2201      	movs	r2, #1
 800411c:	4619      	mov	r1, r3
 800411e:	480f      	ldr	r0, [pc, #60]	; (800415c <SPI_WIFI_SendData+0xd8>)
 8004120:	f006 f976 	bl	800a410 <HAL_SPI_Transmit_IT>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d007      	beq.n	800413a <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 800412a:	2201      	movs	r2, #1
 800412c:	2101      	movs	r1, #1
 800412e:	4809      	ldr	r0, [pc, #36]	; (8004154 <SPI_WIFI_SendData+0xd0>)
 8004130:	f003 f96a 	bl	8007408 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8004134:	f04f 33ff 	mov.w	r3, #4294967295
 8004138:	e005      	b.n	8004146 <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff ff07 	bl	8003f50 <wait_spi_tx_event>
    
  }
  return len;
 8004142:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3718      	adds	r7, #24
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000104 	.word	0x20000104
 8004154:	48001000 	.word	0x48001000
 8004158:	20000100 	.word	0x20000100
 800415c:	20000098 	.word	0x20000098

08004160 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f002 fc13 	bl	8006994 <HAL_Delay>
}
 800416e:	bf00      	nop
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8004180:	2300      	movs	r3, #0
 8004182:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8004184:	2300      	movs	r3, #0
 8004186:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 8004188:	4b20      	ldr	r3, [pc, #128]	; (800420c <SPI_WIFI_DelayUs+0x94>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d122      	bne.n	80041d6 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 8004190:	4b1f      	ldr	r3, [pc, #124]	; (8004210 <SPI_WIFI_DelayUs+0x98>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a1f      	ldr	r2, [pc, #124]	; (8004214 <SPI_WIFI_DelayUs+0x9c>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	099b      	lsrs	r3, r3, #6
 800419c:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 800419e:	2300      	movs	r3, #0
 80041a0:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 80041a6:	f002 fbe9 	bl	800697c <HAL_GetTick>
 80041aa:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 80041ac:	e002      	b.n	80041b4 <SPI_WIFI_DelayUs+0x3c>
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	3b01      	subs	r3, #1
 80041b2:	60bb      	str	r3, [r7, #8]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1f9      	bne.n	80041ae <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 80041ba:	f002 fbdf 	bl	800697c <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	4a11      	ldr	r2, [pc, #68]	; (800420c <SPI_WIFI_DelayUs+0x94>)
 80041c6:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 80041c8:	4b10      	ldr	r3, [pc, #64]	; (800420c <SPI_WIFI_DelayUs+0x94>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d102      	bne.n	80041d6 <SPI_WIFI_DelayUs+0x5e>
 80041d0:	4b0e      	ldr	r3, [pc, #56]	; (800420c <SPI_WIFI_DelayUs+0x94>)
 80041d2:	2201      	movs	r2, #1
 80041d4:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 80041d6:	4b0e      	ldr	r3, [pc, #56]	; (8004210 <SPI_WIFI_DelayUs+0x98>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a0f      	ldr	r2, [pc, #60]	; (8004218 <SPI_WIFI_DelayUs+0xa0>)
 80041dc:	fba2 2303 	umull	r2, r3, r2, r3
 80041e0:	0c9a      	lsrs	r2, r3, #18
 80041e2:	4b0a      	ldr	r3, [pc, #40]	; (800420c <SPI_WIFI_DelayUs+0x94>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ea:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	fb02 f303 	mul.w	r3, r2, r3
 80041f4:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 80041f6:	e002      	b.n	80041fe <SPI_WIFI_DelayUs+0x86>
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	60bb      	str	r3, [r7, #8]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1f9      	bne.n	80041f8 <SPI_WIFI_DelayUs+0x80>
  return;
 8004204:	bf00      	nop
}
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	20000108 	.word	0x20000108
 8004210:	2000000c 	.word	0x2000000c
 8004214:	10624dd3 	.word	0x10624dd3
 8004218:	431bde83 	.word	0x431bde83

0800421c <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8004224:	4b06      	ldr	r3, [pc, #24]	; (8004240 <HAL_SPI_RxCpltCallback+0x24>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 800422c:	4b04      	ldr	r3, [pc, #16]	; (8004240 <HAL_SPI_RxCpltCallback+0x24>)
 800422e:	2200      	movs	r2, #0
 8004230:	601a      	str	r2, [r3, #0]
  }
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	200000fc 	.word	0x200000fc

08004244 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 800424c:	4b06      	ldr	r3, [pc, #24]	; (8004268 <HAL_SPI_TxCpltCallback+0x24>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8004254:	4b04      	ldr	r3, [pc, #16]	; (8004268 <HAL_SPI_TxCpltCallback+0x24>)
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
  }
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	20000100 	.word	0x20000100

0800426c <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8004270:	4b05      	ldr	r3, [pc, #20]	; (8004288 <SPI_WIFI_ISR+0x1c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d102      	bne.n	800427e <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8004278:	4b03      	ldr	r3, [pc, #12]	; (8004288 <SPI_WIFI_ISR+0x1c>)
 800427a:	2200      	movs	r2, #0
 800427c:	601a      	str	r2, [r3, #0]
   }
}
 800427e:	bf00      	nop
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	20000104 	.word	0x20000104

0800428c <userCallback>:
/* USER CODE BEGIN 0 */
void userCallback(
     MQTTContext_t * pContext,
     MQTTPacketInfo_t * pPacketInfo,
     MQTTDeserializedInfo_t * pDeserializedInfo
){
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
//	  }
//	if(pDeserializedInfo!=NULL){
//		printf("EventCallback pDeserializedInfo is not NULL");
//		return 0;
//	}
}
 8004298:	bf00      	nop
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <networkSend>:

networkSend(){}
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	bf00      	nop
 80042aa:	4618      	mov	r0, r3
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <networkRecv>:
networkRecv(){}
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	bf00      	nop
 80042ba:	4618      	mov	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	f5ad 6d9e 	sub.w	sp, sp, #1264	; 0x4f0
 80042ca:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80042cc:	f002 faed 	bl	80068aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80042d0:	f000 f96e 	bl	80045b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80042d4:	f000 fb46 	bl	8004964 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80042d8:	f000 f9cc 	bl	8004674 <MX_DFSDM1_Init>
  MX_QUADSPI_Init();
 80042dc:	f000 fa02 	bl	80046e4 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80042e0:	f000 fa26 	bl	8004730 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80042e4:	f000 fab0 	bl	8004848 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80042e8:	f000 fade 	bl	80048a8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80042ec:	f000 fb0c 	bl	8004908 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80042f0:	f000 fa5c 	bl	80047ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  printf("\n-----------------------------------------------------------\n");
 80042f4:	4895      	ldr	r0, [pc, #596]	; (800454c <main+0x288>)
 80042f6:	f009 f84b 	bl	800d390 <puts>
  printf("\n------------------ Accelerometer -----------------\n");
 80042fa:	4895      	ldr	r0, [pc, #596]	; (8004550 <main+0x28c>)
 80042fc:	f009 f848 	bl	800d390 <puts>
  printf("\n-----------------------------------------------------------\n\n");
 8004300:	4894      	ldr	r0, [pc, #592]	; (8004554 <main+0x290>)
 8004302:	f009 f845 	bl	800d390 <puts>
  dataRdyIntReceived = 0;
 8004306:	4b94      	ldr	r3, [pc, #592]	; (8004558 <main+0x294>)
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
  MEMS_Init();
 800430c:	f000 fcc8 	bl	8004ca0 <MEMS_Init>

  /* Wifi */
//  WIFI_Status_t wstatus= WIFI_Init();
  WIFI_Init();
 8004310:	f001 f918 	bl	8005544 <WIFI_Init>
//  wstatus= WIFI_GetModuleID(product_id);
//  wstatus =WIFI_GetModuleName(product_id);
//  wstatus= WIFI_GetMAC_Address(product_id);
//  wstatus=WIFI_ListAccessPoints(wf_t, 2);

  WIFI_Connect(NomeL,PasswL,ecn1);
 8004314:	4b91      	ldr	r3, [pc, #580]	; (800455c <main+0x298>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a91      	ldr	r2, [pc, #580]	; (8004560 <main+0x29c>)
 800431a:	6811      	ldr	r1, [r2, #0]
 800431c:	4a91      	ldr	r2, [pc, #580]	; (8004564 <main+0x2a0>)
 800431e:	7812      	ldrb	r2, [r2, #0]
 8004320:	4618      	mov	r0, r3
 8004322:	f001 f93b 	bl	800559c <WIFI_Connect>

  /* Timer2 */
  //HAL_TIM_Base_Start(&htim2);
  HAL_TIM_Base_Start_IT(&htim2);
 8004326:	4890      	ldr	r0, [pc, #576]	; (8004568 <main+0x2a4>)
 8004328:	f006 ffec 	bl	800b304 <HAL_TIM_Base_Start_IT>
    //MQTTEventCallback_t userCallback;
    MQTTContext_t pContext;
    MQTTFixedBuffer_t pNetworkBuffer;

    // Clear context.
    memset( ( void * ) &pContext, 0x00, sizeof( MQTTContext_t ) );
 800432c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004330:	2280      	movs	r2, #128	; 0x80
 8004332:	2100      	movs	r1, #0
 8004334:	4618      	mov	r0, r3
 8004336:	f008 fcaf 	bl	800cc98 <memset>



    uint8_t buffer[1024];
    pNetworkBuffer.pBuffer = buffer;
 800433a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800433e:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
    pNetworkBuffer.size = 1024;
 8004342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004346:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444

//	// Set transport interface members.
	//    pTransportInterface.pNetworkContext = &someTransportContext;
//	pTransportInterface.send = TransportInterfaceSend(&pContext,buffer, 1024 );
//	pTransportInterface.recv = (int) TransportInterfaceReceive(&pContext,buffer, 1024 );
	pTransportInterface.send = networkSend;
 800434a:	4b88      	ldr	r3, [pc, #544]	; (800456c <main+0x2a8>)
 800434c:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
	pTransportInterface.recv = networkRecv;
 8004350:	4b87      	ldr	r3, [pc, #540]	; (8004570 <main+0x2ac>)
 8004352:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8

  MQTTConnectInfo_t pConnectInfo;
  	pConnectInfo.cleanSession = true;
 8004356:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800435a:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800435e:	2201      	movs	r2, #1
 8004360:	701a      	strb	r2, [r3, #0]
  	pConnectInfo.keepAliveSeconds = 60;
 8004362:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004366:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800436a:	223c      	movs	r2, #60	; 0x3c
 800436c:	805a      	strh	r2, [r3, #2]
  	pConnectInfo.pClientIdentifier = "clientId-lDyEumwrr2";
 800436e:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004372:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8004376:	4a7f      	ldr	r2, [pc, #508]	; (8004574 <main+0x2b0>)
 8004378:	605a      	str	r2, [r3, #4]
  	pConnectInfo.clientIdentifierLength=strlen(pConnectInfo.pClientIdentifier);
 800437a:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800437e:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	4618      	mov	r0, r3
 8004386:	f7fb ff23 	bl	80001d0 <strlen>
 800438a:	4603      	mov	r3, r0
 800438c:	b29a      	uxth	r2, r3
 800438e:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004392:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8004396:	811a      	strh	r2, [r3, #8]
  	pConnectInfo.pUserName = "Michele";
 8004398:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800439c:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 80043a0:	4a75      	ldr	r2, [pc, #468]	; (8004578 <main+0x2b4>)
 80043a2:	60da      	str	r2, [r3, #12]
  	pConnectInfo.userNameLength=strlen(pConnectInfo.pUserName);
 80043a4:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80043a8:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fb ff0e 	bl	80001d0 <strlen>
 80043b4:	4603      	mov	r3, r0
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80043bc:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 80043c0:	821a      	strh	r2, [r3, #16]
  	pConnectInfo.pPassword="Salernitana";
 80043c2:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80043c6:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 80043ca:	4a6c      	ldr	r2, [pc, #432]	; (800457c <main+0x2b8>)
 80043cc:	615a      	str	r2, [r3, #20]
  	pConnectInfo.passwordLength=strlen(pConnectInfo.pPassword);
 80043ce:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80043d2:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	4618      	mov	r0, r3
 80043da:	f7fb fef9 	bl	80001d0 <strlen>
 80043de:	4603      	mov	r3, r0
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80043e6:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 80043ea:	831a      	strh	r2, [r3, #24]

//  	mqttstatus = allocateMqttContext(&pContext);
  mqttstatus = MQTT_Init(&pContext, &pTransportInterface, HAL_GetTick, userCallback, &pNetworkBuffer);
 80043ec:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 80043f0:	f507 6089 	add.w	r0, r7, #1096	; 0x448
 80043f4:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	4b61      	ldr	r3, [pc, #388]	; (8004580 <main+0x2bc>)
 80043fc:	4a61      	ldr	r2, [pc, #388]	; (8004584 <main+0x2c0>)
 80043fe:	f7fd f860 	bl	80014c2 <MQTT_Init>
 8004402:	4603      	mov	r3, r0
 8004404:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7

  if(mqttstatus == MQTTSuccess)
 8004408:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800440c:	2b00      	cmp	r3, #0
 800440e:	d103      	bne.n	8004418 <main+0x154>
  	  printf("\n\n Init Done. \n");
 8004410:	485d      	ldr	r0, [pc, #372]	; (8004588 <main+0x2c4>)
 8004412:	f008 ffbd 	bl	800d390 <puts>
 8004416:	e002      	b.n	800441e <main+0x15a>
    else
  	  printf("\n\n Init NOT Done. \n");
 8004418:	485c      	ldr	r0, [pc, #368]	; (800458c <main+0x2c8>)
 800441a:	f008 ffb9 	bl	800d390 <puts>

  MQTTPublishInfo_t* pWillInfo = NULL;
 800441e:	2300      	movs	r3, #0
 8004420:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
  uint32_t timeoutMs=100;
 8004424:	2364      	movs	r3, #100	; 0x64
 8004426:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
  bool* pSessionPresent=false;
 800442a:	2300      	movs	r3, #0
 800442c:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
  mqttstatus = MQTT_Connect(&pContext, &pConnectInfo, pWillInfo, timeoutMs, pSessionPresent);
 8004430:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004434:	f507 6089 	add.w	r0, r7, #1096	; 0x448
 8004438:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 8004442:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	; 0x4e0
 8004446:	f7fd f890 	bl	800156a <MQTT_Connect>
 800444a:	4603      	mov	r3, r0
 800444c:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7

  if(mqttstatus == MQTTSuccess)
 8004450:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 8004454:	2b00      	cmp	r3, #0
 8004456:	d103      	bne.n	8004460 <main+0x19c>
	  printf("\n\n Connect work \n");
 8004458:	484d      	ldr	r0, [pc, #308]	; (8004590 <main+0x2cc>)
 800445a:	f008 ff99 	bl	800d390 <puts>
 800445e:	e002      	b.n	8004466 <main+0x1a2>
  else
	  printf("\n\n Connect NOT work \n");
 8004460:	484c      	ldr	r0, [pc, #304]	; (8004594 <main+0x2d0>)
 8004462:	f008 ff95 	bl	800d390 <puts>

  MQTTPublishInfo_t pPublishInfo;
  uint16_t packetId;

  // QoS of publish.
  pPublishInfo.qos = MQTTQoS1;
 8004466:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800446a:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 800446e:	2201      	movs	r2, #1
 8004470:	701a      	strb	r2, [r3, #0]
  pPublishInfo.pTopicName = "/some/topic/name";
 8004472:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004476:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 800447a:	4a47      	ldr	r2, [pc, #284]	; (8004598 <main+0x2d4>)
 800447c:	605a      	str	r2, [r3, #4]
  pPublishInfo.topicNameLength = strlen( pPublishInfo.pTopicName );
 800447e:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004482:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	4618      	mov	r0, r3
 800448a:	f7fb fea1 	bl	80001d0 <strlen>
 800448e:	4603      	mov	r3, r0
 8004490:	b29a      	uxth	r2, r3
 8004492:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004496:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 800449a:	811a      	strh	r2, [r3, #8]
  pPublishInfo.pPayload = "Hello World!";
 800449c:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80044a0:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 80044a4:	4a3d      	ldr	r2, [pc, #244]	; (800459c <main+0x2d8>)
 80044a6:	60da      	str	r2, [r3, #12]
  pPublishInfo.payloadLength = strlen( "Hello World!" );
 80044a8:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80044ac:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 80044b0:	220c      	movs	r2, #12
 80044b2:	611a      	str	r2, [r3, #16]


  // Packet ID is needed for QoS > 0.
  packetId = MQTT_GetPacketId( &pContext );
 80044b4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fd f9c5 	bl	8001848 <MQTT_GetPacketId>
 80044be:	4603      	mov	r3, r0
 80044c0:	f8a7 34d6 	strh.w	r3, [r7, #1238]	; 0x4d6
  mqttstatus = MQTT_Publish(&pContext, &pPublishInfo,packetId);
 80044c4:	f8b7 24d6 	ldrh.w	r2, [r7, #1238]	; 0x4d6
 80044c8:	f107 0110 	add.w	r1, r7, #16
 80044cc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7fd f8d6 	bl	8001682 <MQTT_Publish>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
  if( mqttstatus == MQTTSuccess ){
 80044dc:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10e      	bne.n	8004502 <main+0x23e>
	 while(pPublishInfo.qos){// Since the QoS is > 0, we will need to call MQTT_ReceiveLoop()
 80044e4:	e006      	b.n	80044f4 <main+0x230>
		 MQTT_ReceiveLoop(&pContext, timeoutMs);
 80044e6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80044ea:	f8d7 14dc 	ldr.w	r1, [r7, #1244]	; 0x4dc
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fd f966 	bl	80017c0 <MQTT_ReceiveLoop>
	 while(pPublishInfo.qos){// Since the QoS is > 0, we will need to call MQTT_ReceiveLoop()
 80044f4:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80044f8:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f1      	bne.n	80044e6 <main+0x222>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  if (dataRdyIntReceived != 0) {							//per i 32bit usare %ld e invece di %5d con (int)
		printf("\n - - - Nuova Rilevazione - - - \n\n");
 8004502:	4827      	ldr	r0, [pc, #156]	; (80045a0 <main+0x2dc>)
 8004504:	f008 ff44 	bl	800d390 <puts>
//		dataRdyIntReceived = 0;
		LSM6DSL_Axes_t acc_axes;
		LSM6DSL_ACC_GetAxes(&MotionSensor, &acc_axes);
 8004508:	1d3b      	adds	r3, r7, #4
 800450a:	4619      	mov	r1, r3
 800450c:	4825      	ldr	r0, [pc, #148]	; (80045a4 <main+0x2e0>)
 800450e:	f001 fbdb 	bl	8005cc8 <LSM6DSL_ACC_GetAxes>
		printf("ACCELERO_X=%5d, ACCELERO_Y=%5d, ACCELERO_Z=%5d\r\n",  (int) acc_axes.x, (int) acc_axes.y, (int) acc_axes.z);//}
 8004512:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004516:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 800451a:	6819      	ldr	r1, [r3, #0]
 800451c:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004520:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800452a:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	481d      	ldr	r0, [pc, #116]	; (80045a8 <main+0x2e4>)
 8004532:	f008 fea7 	bl	800d284 <iprintf>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8004536:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800453a:	481c      	ldr	r0, [pc, #112]	; (80045ac <main+0x2e8>)
 800453c:	f002 ff7c 	bl	8007438 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8004540:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004544:	f002 fa26 	bl	8006994 <HAL_Delay>
  {
 8004548:	e7db      	b.n	8004502 <main+0x23e>
 800454a:	bf00      	nop
 800454c:	0800f044 	.word	0x0800f044
 8004550:	0800f084 	.word	0x0800f084
 8004554:	0800f0b8 	.word	0x0800f0b8
 8004558:	2000087c 	.word	0x2000087c
 800455c:	20000000 	.word	0x20000000
 8004560:	20000004 	.word	0x20000004
 8004564:	20000008 	.word	0x20000008
 8004568:	200001ec 	.word	0x200001ec
 800456c:	080042a5 	.word	0x080042a5
 8004570:	080042b5 	.word	0x080042b5
 8004574:	0800f0f8 	.word	0x0800f0f8
 8004578:	0800f10c 	.word	0x0800f10c
 800457c:	0800f114 	.word	0x0800f114
 8004580:	0800428d 	.word	0x0800428d
 8004584:	0800697d 	.word	0x0800697d
 8004588:	0800f120 	.word	0x0800f120
 800458c:	0800f130 	.word	0x0800f130
 8004590:	0800f144 	.word	0x0800f144
 8004594:	0800f158 	.word	0x0800f158
 8004598:	0800f170 	.word	0x0800f170
 800459c:	0800f184 	.word	0x0800f184
 80045a0:	0800f194 	.word	0x0800f194
 80045a4:	2000084c 	.word	0x2000084c
 80045a8:	0800f1b8 	.word	0x0800f1b8
 80045ac:	48000400 	.word	0x48000400

080045b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b096      	sub	sp, #88	; 0x58
 80045b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045b6:	f107 0314 	add.w	r3, r7, #20
 80045ba:	2244      	movs	r2, #68	; 0x44
 80045bc:	2100      	movs	r1, #0
 80045be:	4618      	mov	r0, r3
 80045c0:	f008 fb6a 	bl	800cc98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045c4:	463b      	mov	r3, r7
 80045c6:	2200      	movs	r2, #0
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	605a      	str	r2, [r3, #4]
 80045cc:	609a      	str	r2, [r3, #8]
 80045ce:	60da      	str	r2, [r3, #12]
 80045d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80045d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80045d6:	f003 ff1f 	bl	8008418 <HAL_PWREx_ControlVoltageScaling>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80045e0:	f000 fbbe 	bl	8004d60 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80045e4:	f003 fefa 	bl	80083dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80045e8:	4b21      	ldr	r3, [pc, #132]	; (8004670 <SystemClock_Config+0xc0>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ee:	4a20      	ldr	r2, [pc, #128]	; (8004670 <SystemClock_Config+0xc0>)
 80045f0:	f023 0318 	bic.w	r3, r3, #24
 80045f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80045f8:	2314      	movs	r3, #20
 80045fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80045fc:	2301      	movs	r3, #1
 80045fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004600:	2301      	movs	r3, #1
 8004602:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004604:	2300      	movs	r3, #0
 8004606:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004608:	2360      	movs	r3, #96	; 0x60
 800460a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800460c:	2302      	movs	r3, #2
 800460e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004610:	2301      	movs	r3, #1
 8004612:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004614:	2301      	movs	r3, #1
 8004616:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8004618:	2328      	movs	r3, #40	; 0x28
 800461a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800461c:	2307      	movs	r3, #7
 800461e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004620:	2302      	movs	r3, #2
 8004622:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004624:	2302      	movs	r3, #2
 8004626:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004628:	f107 0314 	add.w	r3, r7, #20
 800462c:	4618      	mov	r0, r3
 800462e:	f004 f815 	bl	800865c <HAL_RCC_OscConfig>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8004638:	f000 fb92 	bl	8004d60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800463c:	230f      	movs	r3, #15
 800463e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004640:	2303      	movs	r3, #3
 8004642:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004644:	2300      	movs	r3, #0
 8004646:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004648:	2300      	movs	r3, #0
 800464a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800464c:	2300      	movs	r3, #0
 800464e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004650:	463b      	mov	r3, r7
 8004652:	2104      	movs	r1, #4
 8004654:	4618      	mov	r0, r3
 8004656:	f004 fbdd 	bl	8008e14 <HAL_RCC_ClockConfig>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8004660:	f000 fb7e 	bl	8004d60 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8004664:	f005 f8e4 	bl	8009830 <HAL_RCCEx_EnableMSIPLLMode>
}
 8004668:	bf00      	nop
 800466a:	3758      	adds	r7, #88	; 0x58
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40021000 	.word	0x40021000

08004674 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8004678:	4b18      	ldr	r3, [pc, #96]	; (80046dc <MX_DFSDM1_Init+0x68>)
 800467a:	4a19      	ldr	r2, [pc, #100]	; (80046e0 <MX_DFSDM1_Init+0x6c>)
 800467c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800467e:	4b17      	ldr	r3, [pc, #92]	; (80046dc <MX_DFSDM1_Init+0x68>)
 8004680:	2201      	movs	r2, #1
 8004682:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8004684:	4b15      	ldr	r3, [pc, #84]	; (80046dc <MX_DFSDM1_Init+0x68>)
 8004686:	2200      	movs	r2, #0
 8004688:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800468a:	4b14      	ldr	r3, [pc, #80]	; (80046dc <MX_DFSDM1_Init+0x68>)
 800468c:	2202      	movs	r2, #2
 800468e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8004690:	4b12      	ldr	r3, [pc, #72]	; (80046dc <MX_DFSDM1_Init+0x68>)
 8004692:	2200      	movs	r2, #0
 8004694:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8004696:	4b11      	ldr	r3, [pc, #68]	; (80046dc <MX_DFSDM1_Init+0x68>)
 8004698:	2200      	movs	r2, #0
 800469a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800469c:	4b0f      	ldr	r3, [pc, #60]	; (80046dc <MX_DFSDM1_Init+0x68>)
 800469e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046a2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80046a4:	4b0d      	ldr	r3, [pc, #52]	; (80046dc <MX_DFSDM1_Init+0x68>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80046aa:	4b0c      	ldr	r3, [pc, #48]	; (80046dc <MX_DFSDM1_Init+0x68>)
 80046ac:	2204      	movs	r2, #4
 80046ae:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80046b0:	4b0a      	ldr	r3, [pc, #40]	; (80046dc <MX_DFSDM1_Init+0x68>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80046b6:	4b09      	ldr	r3, [pc, #36]	; (80046dc <MX_DFSDM1_Init+0x68>)
 80046b8:	2201      	movs	r2, #1
 80046ba:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80046bc:	4b07      	ldr	r3, [pc, #28]	; (80046dc <MX_DFSDM1_Init+0x68>)
 80046be:	2200      	movs	r2, #0
 80046c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80046c2:	4b06      	ldr	r3, [pc, #24]	; (80046dc <MX_DFSDM1_Init+0x68>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80046c8:	4804      	ldr	r0, [pc, #16]	; (80046dc <MX_DFSDM1_Init+0x68>)
 80046ca:	f002 fa99 	bl	8006c00 <HAL_DFSDM_ChannelInit>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80046d4:	f000 fb44 	bl	8004d60 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80046d8:	bf00      	nop
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	2000010c 	.word	0x2000010c
 80046e0:	40016020 	.word	0x40016020

080046e4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80046e8:	4b0f      	ldr	r3, [pc, #60]	; (8004728 <MX_QUADSPI_Init+0x44>)
 80046ea:	4a10      	ldr	r2, [pc, #64]	; (800472c <MX_QUADSPI_Init+0x48>)
 80046ec:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80046ee:	4b0e      	ldr	r3, [pc, #56]	; (8004728 <MX_QUADSPI_Init+0x44>)
 80046f0:	2202      	movs	r2, #2
 80046f2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80046f4:	4b0c      	ldr	r3, [pc, #48]	; (8004728 <MX_QUADSPI_Init+0x44>)
 80046f6:	2204      	movs	r2, #4
 80046f8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80046fa:	4b0b      	ldr	r3, [pc, #44]	; (8004728 <MX_QUADSPI_Init+0x44>)
 80046fc:	2210      	movs	r2, #16
 80046fe:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8004700:	4b09      	ldr	r3, [pc, #36]	; (8004728 <MX_QUADSPI_Init+0x44>)
 8004702:	2217      	movs	r2, #23
 8004704:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8004706:	4b08      	ldr	r3, [pc, #32]	; (8004728 <MX_QUADSPI_Init+0x44>)
 8004708:	2200      	movs	r2, #0
 800470a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800470c:	4b06      	ldr	r3, [pc, #24]	; (8004728 <MX_QUADSPI_Init+0x44>)
 800470e:	2200      	movs	r2, #0
 8004710:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8004712:	4805      	ldr	r0, [pc, #20]	; (8004728 <MX_QUADSPI_Init+0x44>)
 8004714:	f003 fee6 	bl	80084e4 <HAL_QSPI_Init>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800471e:	f000 fb1f 	bl	8004d60 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8004722:	bf00      	nop
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	20000144 	.word	0x20000144
 800472c:	a0001000 	.word	0xa0001000

08004730 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004734:	4b1b      	ldr	r3, [pc, #108]	; (80047a4 <MX_SPI3_Init+0x74>)
 8004736:	4a1c      	ldr	r2, [pc, #112]	; (80047a8 <MX_SPI3_Init+0x78>)
 8004738:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800473a:	4b1a      	ldr	r3, [pc, #104]	; (80047a4 <MX_SPI3_Init+0x74>)
 800473c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004740:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004742:	4b18      	ldr	r3, [pc, #96]	; (80047a4 <MX_SPI3_Init+0x74>)
 8004744:	2200      	movs	r2, #0
 8004746:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8004748:	4b16      	ldr	r3, [pc, #88]	; (80047a4 <MX_SPI3_Init+0x74>)
 800474a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800474e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004750:	4b14      	ldr	r3, [pc, #80]	; (80047a4 <MX_SPI3_Init+0x74>)
 8004752:	2200      	movs	r2, #0
 8004754:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004756:	4b13      	ldr	r3, [pc, #76]	; (80047a4 <MX_SPI3_Init+0x74>)
 8004758:	2200      	movs	r2, #0
 800475a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800475c:	4b11      	ldr	r3, [pc, #68]	; (80047a4 <MX_SPI3_Init+0x74>)
 800475e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004762:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004764:	4b0f      	ldr	r3, [pc, #60]	; (80047a4 <MX_SPI3_Init+0x74>)
 8004766:	2200      	movs	r2, #0
 8004768:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800476a:	4b0e      	ldr	r3, [pc, #56]	; (80047a4 <MX_SPI3_Init+0x74>)
 800476c:	2200      	movs	r2, #0
 800476e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004770:	4b0c      	ldr	r3, [pc, #48]	; (80047a4 <MX_SPI3_Init+0x74>)
 8004772:	2200      	movs	r2, #0
 8004774:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004776:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <MX_SPI3_Init+0x74>)
 8004778:	2200      	movs	r2, #0
 800477a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800477c:	4b09      	ldr	r3, [pc, #36]	; (80047a4 <MX_SPI3_Init+0x74>)
 800477e:	2207      	movs	r2, #7
 8004780:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004782:	4b08      	ldr	r3, [pc, #32]	; (80047a4 <MX_SPI3_Init+0x74>)
 8004784:	2200      	movs	r2, #0
 8004786:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004788:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <MX_SPI3_Init+0x74>)
 800478a:	2208      	movs	r2, #8
 800478c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800478e:	4805      	ldr	r0, [pc, #20]	; (80047a4 <MX_SPI3_Init+0x74>)
 8004790:	f005 fa30 	bl	8009bf4 <HAL_SPI_Init>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800479a:	f000 fae1 	bl	8004d60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800479e:	bf00      	nop
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	20000188 	.word	0x20000188
 80047a8:	40003c00 	.word	0x40003c00

080047ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80047b2:	f107 0310 	add.w	r3, r7, #16
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	605a      	str	r2, [r3, #4]
 80047bc:	609a      	str	r2, [r3, #8]
 80047be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047c0:	1d3b      	adds	r3, r7, #4
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	605a      	str	r2, [r3, #4]
 80047c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80047ca:	4b1d      	ldr	r3, [pc, #116]	; (8004840 <MX_TIM2_Init+0x94>)
 80047cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80047d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80047d2:	4b1b      	ldr	r3, [pc, #108]	; (8004840 <MX_TIM2_Init+0x94>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047d8:	4b19      	ldr	r3, [pc, #100]	; (8004840 <MX_TIM2_Init+0x94>)
 80047da:	2200      	movs	r2, #0
 80047dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 80000000-1;
 80047de:	4b18      	ldr	r3, [pc, #96]	; (8004840 <MX_TIM2_Init+0x94>)
 80047e0:	4a18      	ldr	r2, [pc, #96]	; (8004844 <MX_TIM2_Init+0x98>)
 80047e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047e4:	4b16      	ldr	r3, [pc, #88]	; (8004840 <MX_TIM2_Init+0x94>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047ea:	4b15      	ldr	r3, [pc, #84]	; (8004840 <MX_TIM2_Init+0x94>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80047f0:	4813      	ldr	r0, [pc, #76]	; (8004840 <MX_TIM2_Init+0x94>)
 80047f2:	f006 fd30 	bl	800b256 <HAL_TIM_Base_Init>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80047fc:	f000 fab0 	bl	8004d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004804:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004806:	f107 0310 	add.w	r3, r7, #16
 800480a:	4619      	mov	r1, r3
 800480c:	480c      	ldr	r0, [pc, #48]	; (8004840 <MX_TIM2_Init+0x94>)
 800480e:	f006 ff08 	bl	800b622 <HAL_TIM_ConfigClockSource>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004818:	f000 faa2 	bl	8004d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800481c:	2300      	movs	r3, #0
 800481e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004820:	2300      	movs	r3, #0
 8004822:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004824:	1d3b      	adds	r3, r7, #4
 8004826:	4619      	mov	r1, r3
 8004828:	4805      	ldr	r0, [pc, #20]	; (8004840 <MX_TIM2_Init+0x94>)
 800482a:	f007 f929 	bl	800ba80 <HAL_TIMEx_MasterConfigSynchronization>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004834:	f000 fa94 	bl	8004d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004838:	bf00      	nop
 800483a:	3720      	adds	r7, #32
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	200001ec 	.word	0x200001ec
 8004844:	04c4b3ff 	.word	0x04c4b3ff

08004848 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800484c:	4b14      	ldr	r3, [pc, #80]	; (80048a0 <MX_USART1_UART_Init+0x58>)
 800484e:	4a15      	ldr	r2, [pc, #84]	; (80048a4 <MX_USART1_UART_Init+0x5c>)
 8004850:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004852:	4b13      	ldr	r3, [pc, #76]	; (80048a0 <MX_USART1_UART_Init+0x58>)
 8004854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004858:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800485a:	4b11      	ldr	r3, [pc, #68]	; (80048a0 <MX_USART1_UART_Init+0x58>)
 800485c:	2200      	movs	r2, #0
 800485e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004860:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <MX_USART1_UART_Init+0x58>)
 8004862:	2200      	movs	r2, #0
 8004864:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004866:	4b0e      	ldr	r3, [pc, #56]	; (80048a0 <MX_USART1_UART_Init+0x58>)
 8004868:	2200      	movs	r2, #0
 800486a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800486c:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <MX_USART1_UART_Init+0x58>)
 800486e:	220c      	movs	r2, #12
 8004870:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004872:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <MX_USART1_UART_Init+0x58>)
 8004874:	2200      	movs	r2, #0
 8004876:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004878:	4b09      	ldr	r3, [pc, #36]	; (80048a0 <MX_USART1_UART_Init+0x58>)
 800487a:	2200      	movs	r2, #0
 800487c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800487e:	4b08      	ldr	r3, [pc, #32]	; (80048a0 <MX_USART1_UART_Init+0x58>)
 8004880:	2200      	movs	r2, #0
 8004882:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004884:	4b06      	ldr	r3, [pc, #24]	; (80048a0 <MX_USART1_UART_Init+0x58>)
 8004886:	2200      	movs	r2, #0
 8004888:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800488a:	4805      	ldr	r0, [pc, #20]	; (80048a0 <MX_USART1_UART_Init+0x58>)
 800488c:	f007 f99e 	bl	800bbcc <HAL_UART_Init>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004896:	f000 fa63 	bl	8004d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800489a:	bf00      	nop
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	20000238 	.word	0x20000238
 80048a4:	40013800 	.word	0x40013800

080048a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80048ac:	4b14      	ldr	r3, [pc, #80]	; (8004900 <MX_USART3_UART_Init+0x58>)
 80048ae:	4a15      	ldr	r2, [pc, #84]	; (8004904 <MX_USART3_UART_Init+0x5c>)
 80048b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80048b2:	4b13      	ldr	r3, [pc, #76]	; (8004900 <MX_USART3_UART_Init+0x58>)
 80048b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80048b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80048ba:	4b11      	ldr	r3, [pc, #68]	; (8004900 <MX_USART3_UART_Init+0x58>)
 80048bc:	2200      	movs	r2, #0
 80048be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80048c0:	4b0f      	ldr	r3, [pc, #60]	; (8004900 <MX_USART3_UART_Init+0x58>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80048c6:	4b0e      	ldr	r3, [pc, #56]	; (8004900 <MX_USART3_UART_Init+0x58>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80048cc:	4b0c      	ldr	r3, [pc, #48]	; (8004900 <MX_USART3_UART_Init+0x58>)
 80048ce:	220c      	movs	r2, #12
 80048d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048d2:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <MX_USART3_UART_Init+0x58>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80048d8:	4b09      	ldr	r3, [pc, #36]	; (8004900 <MX_USART3_UART_Init+0x58>)
 80048da:	2200      	movs	r2, #0
 80048dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048de:	4b08      	ldr	r3, [pc, #32]	; (8004900 <MX_USART3_UART_Init+0x58>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80048e4:	4b06      	ldr	r3, [pc, #24]	; (8004900 <MX_USART3_UART_Init+0x58>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80048ea:	4805      	ldr	r0, [pc, #20]	; (8004900 <MX_USART3_UART_Init+0x58>)
 80048ec:	f007 f96e 	bl	800bbcc <HAL_UART_Init>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80048f6:	f000 fa33 	bl	8004d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80048fa:	bf00      	nop
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	200002bc 	.word	0x200002bc
 8004904:	40004800 	.word	0x40004800

08004908 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800490c:	4b14      	ldr	r3, [pc, #80]	; (8004960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800490e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004912:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8004914:	4b12      	ldr	r3, [pc, #72]	; (8004960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004916:	2206      	movs	r2, #6
 8004918:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800491a:	4b11      	ldr	r3, [pc, #68]	; (8004960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800491c:	2202      	movs	r2, #2
 800491e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004920:	4b0f      	ldr	r3, [pc, #60]	; (8004960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004922:	2202      	movs	r2, #2
 8004924:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004926:	4b0e      	ldr	r3, [pc, #56]	; (8004960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004928:	2200      	movs	r2, #0
 800492a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800492c:	4b0c      	ldr	r3, [pc, #48]	; (8004960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800492e:	2200      	movs	r2, #0
 8004930:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004932:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004934:	2200      	movs	r2, #0
 8004936:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8004938:	4b09      	ldr	r3, [pc, #36]	; (8004960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800493a:	2200      	movs	r2, #0
 800493c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800493e:	4b08      	ldr	r3, [pc, #32]	; (8004960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004940:	2200      	movs	r2, #0
 8004942:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8004944:	4b06      	ldr	r3, [pc, #24]	; (8004960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004946:	2200      	movs	r2, #0
 8004948:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800494a:	4805      	ldr	r0, [pc, #20]	; (8004960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800494c:	f003 fbfd 	bl	800814a <HAL_PCD_Init>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8004956:	f000 fa03 	bl	8004d60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800495a:	bf00      	nop
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	20000340 	.word	0x20000340

08004964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b08a      	sub	sp, #40	; 0x28
 8004968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800496a:	f107 0314 	add.w	r3, r7, #20
 800496e:	2200      	movs	r2, #0
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	605a      	str	r2, [r3, #4]
 8004974:	609a      	str	r2, [r3, #8]
 8004976:	60da      	str	r2, [r3, #12]
 8004978:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800497a:	4bbd      	ldr	r3, [pc, #756]	; (8004c70 <MX_GPIO_Init+0x30c>)
 800497c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800497e:	4abc      	ldr	r2, [pc, #752]	; (8004c70 <MX_GPIO_Init+0x30c>)
 8004980:	f043 0310 	orr.w	r3, r3, #16
 8004984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004986:	4bba      	ldr	r3, [pc, #744]	; (8004c70 <MX_GPIO_Init+0x30c>)
 8004988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800498a:	f003 0310 	and.w	r3, r3, #16
 800498e:	613b      	str	r3, [r7, #16]
 8004990:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004992:	4bb7      	ldr	r3, [pc, #732]	; (8004c70 <MX_GPIO_Init+0x30c>)
 8004994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004996:	4ab6      	ldr	r2, [pc, #728]	; (8004c70 <MX_GPIO_Init+0x30c>)
 8004998:	f043 0304 	orr.w	r3, r3, #4
 800499c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800499e:	4bb4      	ldr	r3, [pc, #720]	; (8004c70 <MX_GPIO_Init+0x30c>)
 80049a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80049aa:	4bb1      	ldr	r3, [pc, #708]	; (8004c70 <MX_GPIO_Init+0x30c>)
 80049ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ae:	4ab0      	ldr	r2, [pc, #704]	; (8004c70 <MX_GPIO_Init+0x30c>)
 80049b0:	f043 0301 	orr.w	r3, r3, #1
 80049b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049b6:	4bae      	ldr	r3, [pc, #696]	; (8004c70 <MX_GPIO_Init+0x30c>)
 80049b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	60bb      	str	r3, [r7, #8]
 80049c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80049c2:	4bab      	ldr	r3, [pc, #684]	; (8004c70 <MX_GPIO_Init+0x30c>)
 80049c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c6:	4aaa      	ldr	r2, [pc, #680]	; (8004c70 <MX_GPIO_Init+0x30c>)
 80049c8:	f043 0302 	orr.w	r3, r3, #2
 80049cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049ce:	4ba8      	ldr	r3, [pc, #672]	; (8004c70 <MX_GPIO_Init+0x30c>)
 80049d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	607b      	str	r3, [r7, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80049da:	4ba5      	ldr	r3, [pc, #660]	; (8004c70 <MX_GPIO_Init+0x30c>)
 80049dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049de:	4aa4      	ldr	r2, [pc, #656]	; (8004c70 <MX_GPIO_Init+0x30c>)
 80049e0:	f043 0308 	orr.w	r3, r3, #8
 80049e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049e6:	4ba2      	ldr	r3, [pc, #648]	; (8004c70 <MX_GPIO_Init+0x30c>)
 80049e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	603b      	str	r3, [r7, #0]
 80049f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80049f2:	2200      	movs	r2, #0
 80049f4:	f44f 718a 	mov.w	r1, #276	; 0x114
 80049f8:	489e      	ldr	r0, [pc, #632]	; (8004c74 <MX_GPIO_Init+0x310>)
 80049fa:	f002 fd05 	bl	8007408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80049fe:	2200      	movs	r2, #0
 8004a00:	f248 1104 	movw	r1, #33028	; 0x8104
 8004a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a08:	f002 fcfe 	bl	8007408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8004a12:	4899      	ldr	r0, [pc, #612]	; (8004c78 <MX_GPIO_Init+0x314>)
 8004a14:	f002 fcf8 	bl	8007408 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f241 0181 	movw	r1, #4225	; 0x1081
 8004a1e:	4897      	ldr	r0, [pc, #604]	; (8004c7c <MX_GPIO_Init+0x318>)
 8004a20:	f002 fcf2 	bl	8007408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8004a24:	2201      	movs	r2, #1
 8004a26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a2a:	4894      	ldr	r0, [pc, #592]	; (8004c7c <MX_GPIO_Init+0x318>)
 8004a2c:	f002 fcec 	bl	8007408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8004a30:	2200      	movs	r2, #0
 8004a32:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004a36:	4892      	ldr	r0, [pc, #584]	; (8004c80 <MX_GPIO_Init+0x31c>)
 8004a38:	f002 fce6 	bl	8007408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	2120      	movs	r1, #32
 8004a40:	488d      	ldr	r0, [pc, #564]	; (8004c78 <MX_GPIO_Init+0x314>)
 8004a42:	f002 fce1 	bl	8007408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8004a46:	2201      	movs	r2, #1
 8004a48:	2101      	movs	r1, #1
 8004a4a:	488a      	ldr	r0, [pc, #552]	; (8004c74 <MX_GPIO_Init+0x310>)
 8004a4c:	f002 fcdc 	bl	8007408 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8004a50:	f240 1315 	movw	r3, #277	; 0x115
 8004a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a56:	2301      	movs	r3, #1
 8004a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a62:	f107 0314 	add.w	r3, r7, #20
 8004a66:	4619      	mov	r1, r3
 8004a68:	4882      	ldr	r0, [pc, #520]	; (8004c74 <MX_GPIO_Init+0x310>)
 8004a6a:	f002 fa17 	bl	8006e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8004a6e:	236a      	movs	r3, #106	; 0x6a
 8004a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a72:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a7c:	f107 0314 	add.w	r3, r7, #20
 8004a80:	4619      	mov	r1, r3
 8004a82:	487c      	ldr	r0, [pc, #496]	; (8004c74 <MX_GPIO_Init+0x310>)
 8004a84:	f002 fa0a 	bl	8006e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8004a88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004a8e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a94:	2300      	movs	r3, #0
 8004a96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8004a98:	f107 0314 	add.w	r3, r7, #20
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	4878      	ldr	r0, [pc, #480]	; (8004c80 <MX_GPIO_Init+0x31c>)
 8004aa0:	f002 f9fc 	bl	8006e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8004aa4:	233f      	movs	r3, #63	; 0x3f
 8004aa6:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004aa8:	230b      	movs	r3, #11
 8004aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aac:	2300      	movs	r3, #0
 8004aae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ab0:	f107 0314 	add.w	r3, r7, #20
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4872      	ldr	r0, [pc, #456]	; (8004c80 <MX_GPIO_Init+0x31c>)
 8004ab8:	f002 f9f0 	bl	8006e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8004abc:	2303      	movs	r3, #3
 8004abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004acc:	2308      	movs	r3, #8
 8004ace:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ad0:	f107 0314 	add.w	r3, r7, #20
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ada:	f002 f9df 	bl	8006e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8004ade:	f248 1304 	movw	r3, #33028	; 0x8104
 8004ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aec:	2300      	movs	r3, #0
 8004aee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004af0:	f107 0314 	add.w	r3, r7, #20
 8004af4:	4619      	mov	r1, r3
 8004af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004afa:	f002 f9cf 	bl	8006e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8004afe:	2310      	movs	r3, #16
 8004b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004b02:	230b      	movs	r3, #11
 8004b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b06:	2300      	movs	r3, #0
 8004b08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8004b0a:	f107 0314 	add.w	r3, r7, #20
 8004b0e:	4619      	mov	r1, r3
 8004b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b14:	f002 f9c2 	bl	8006e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8004b18:	23e0      	movs	r3, #224	; 0xe0
 8004b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b20:	2300      	movs	r3, #0
 8004b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b24:	2303      	movs	r3, #3
 8004b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004b28:	2305      	movs	r3, #5
 8004b2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b2c:	f107 0314 	add.w	r3, r7, #20
 8004b30:	4619      	mov	r1, r3
 8004b32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b36:	f002 f9b1 	bl	8006e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b3e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b44:	2300      	movs	r3, #0
 8004b46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8004b48:	f107 0314 	add.w	r3, r7, #20
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	484a      	ldr	r0, [pc, #296]	; (8004c78 <MX_GPIO_Init+0x314>)
 8004b50:	f002 f9a4 	bl	8006e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8004b54:	2302      	movs	r3, #2
 8004b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004b58:	230b      	movs	r3, #11
 8004b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8004b60:	f107 0314 	add.w	r3, r7, #20
 8004b64:	4619      	mov	r1, r3
 8004b66:	4844      	ldr	r0, [pc, #272]	; (8004c78 <MX_GPIO_Init+0x314>)
 8004b68:	f002 f998 	bl	8006e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8004b6c:	f24f 0334 	movw	r3, #61492	; 0xf034
 8004b70:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b72:	2301      	movs	r3, #1
 8004b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b76:	2300      	movs	r3, #0
 8004b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b7e:	f107 0314 	add.w	r3, r7, #20
 8004b82:	4619      	mov	r1, r3
 8004b84:	483c      	ldr	r0, [pc, #240]	; (8004c78 <MX_GPIO_Init+0x314>)
 8004b86:	f002 f989 	bl	8006e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8004b8a:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8004b8e:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b90:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b96:	2300      	movs	r3, #0
 8004b98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b9a:	f107 0314 	add.w	r3, r7, #20
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4836      	ldr	r0, [pc, #216]	; (8004c7c <MX_GPIO_Init+0x318>)
 8004ba2:	f002 f97b 	bl	8006e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8004ba6:	f243 0381 	movw	r3, #12417	; 0x3081
 8004baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bac:	2301      	movs	r3, #1
 8004bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bb8:	f107 0314 	add.w	r3, r7, #20
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	482f      	ldr	r0, [pc, #188]	; (8004c7c <MX_GPIO_Init+0x318>)
 8004bc0:	f002 f96c 	bl	8006e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8004bc4:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bd6:	f107 0314 	add.w	r3, r7, #20
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4828      	ldr	r0, [pc, #160]	; (8004c80 <MX_GPIO_Init+0x31c>)
 8004bde:	f002 f95d 	bl	8006e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8004be2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004be8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bf2:	f107 0314 	add.w	r3, r7, #20
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4821      	ldr	r0, [pc, #132]	; (8004c80 <MX_GPIO_Init+0x31c>)
 8004bfa:	f002 f94f 	bl	8006e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8004bfe:	2302      	movs	r3, #2
 8004c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c02:	2302      	movs	r3, #2
 8004c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c06:	2300      	movs	r3, #0
 8004c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c0e:	2305      	movs	r3, #5
 8004c10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8004c12:	f107 0314 	add.w	r3, r7, #20
 8004c16:	4619      	mov	r1, r3
 8004c18:	4818      	ldr	r0, [pc, #96]	; (8004c7c <MX_GPIO_Init+0x318>)
 8004c1a:	f002 f93f 	bl	8006e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8004c1e:	2378      	movs	r3, #120	; 0x78
 8004c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c22:	2302      	movs	r3, #2
 8004c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c26:	2300      	movs	r3, #0
 8004c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004c2e:	2307      	movs	r3, #7
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c32:	f107 0314 	add.w	r3, r7, #20
 8004c36:	4619      	mov	r1, r3
 8004c38:	4810      	ldr	r0, [pc, #64]	; (8004c7c <MX_GPIO_Init+0x318>)
 8004c3a:	f002 f92f 	bl	8006e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8004c3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c44:	2312      	movs	r3, #18
 8004c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c50:	2304      	movs	r3, #4
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c54:	f107 0314 	add.w	r3, r7, #20
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4807      	ldr	r0, [pc, #28]	; (8004c78 <MX_GPIO_Init+0x314>)
 8004c5c:	f002 f91e 	bl	8006e9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004c60:	2200      	movs	r2, #0
 8004c62:	2100      	movs	r1, #0
 8004c64:	2017      	movs	r0, #23
 8004c66:	f001 ff94 	bl	8006b92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004c6a:	2017      	movs	r0, #23
 8004c6c:	e00a      	b.n	8004c84 <MX_GPIO_Init+0x320>
 8004c6e:	bf00      	nop
 8004c70:	40021000 	.word	0x40021000
 8004c74:	48001000 	.word	0x48001000
 8004c78:	48000400 	.word	0x48000400
 8004c7c:	48000c00 	.word	0x48000c00
 8004c80:	48000800 	.word	0x48000800
 8004c84:	f001 ffa1 	bl	8006bca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004c88:	2200      	movs	r2, #0
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	2028      	movs	r0, #40	; 0x28
 8004c8e:	f001 ff80 	bl	8006b92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004c92:	2028      	movs	r0, #40	; 0x28
 8004c94:	f001 ff99 	bl	8006bca <HAL_NVIC_EnableIRQ>

}
 8004c98:	bf00      	nop
 8004c9a:	3728      	adds	r7, #40	; 0x28
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <MEMS_Init>:

/* USER CODE BEGIN 4 */
static void MEMS_Init(void)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08a      	sub	sp, #40	; 0x28
 8004ca4:	af00      	add	r7, sp, #0
  LSM6DSL_IO_t io_ctx;
  uint8_t id;
  LSM6DSL_AxesRaw_t axes;

  /* Link I2C functions to the LSM6DSL driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	617b      	str	r3, [r7, #20]
  io_ctx.Address     = LSM6DSL_I2C_ADD_L;
 8004caa:	23d5      	movs	r3, #213	; 0xd5
 8004cac:	763b      	strb	r3, [r7, #24]
  io_ctx.Init        = BSP_I2C2_Init;
 8004cae:	4b1b      	ldr	r3, [pc, #108]	; (8004d1c <MEMS_Init+0x7c>)
 8004cb0:	60fb      	str	r3, [r7, #12]
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 8004cb2:	4b1b      	ldr	r3, [pc, #108]	; (8004d20 <MEMS_Init+0x80>)
 8004cb4:	613b      	str	r3, [r7, #16]
  io_ctx.ReadReg     = BSP_I2C2_ReadReg;
 8004cb6:	4b1b      	ldr	r3, [pc, #108]	; (8004d24 <MEMS_Init+0x84>)
 8004cb8:	623b      	str	r3, [r7, #32]
  io_ctx.WriteReg    = BSP_I2C2_WriteReg;
 8004cba:	4b1b      	ldr	r3, [pc, #108]	; (8004d28 <MEMS_Init+0x88>)
 8004cbc:	61fb      	str	r3, [r7, #28]
  io_ctx.GetTick     = BSP_GetTick;
 8004cbe:	4b1b      	ldr	r3, [pc, #108]	; (8004d2c <MEMS_Init+0x8c>)
 8004cc0:	627b      	str	r3, [r7, #36]	; 0x24
  LSM6DSL_RegisterBusIO(&MotionSensor, &io_ctx);
 8004cc2:	f107 030c 	add.w	r3, r7, #12
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4819      	ldr	r0, [pc, #100]	; (8004d30 <MEMS_Init+0x90>)
 8004cca:	f000 fe45 	bl	8005958 <LSM6DSL_RegisterBusIO>

  /* Read the LSM6DSL WHO_AM_I register */
  LSM6DSL_ReadID(&MotionSensor, &id);
 8004cce:	f107 030b 	add.w	r3, r7, #11
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4816      	ldr	r0, [pc, #88]	; (8004d30 <MEMS_Init+0x90>)
 8004cd6:	f000 ff0e 	bl	8005af6 <LSM6DSL_ReadID>
  if (id != LSM6DSL_ID) {
 8004cda:	7afb      	ldrb	r3, [r7, #11]
 8004cdc:	2b6a      	cmp	r3, #106	; 0x6a
 8004cde:	d001      	beq.n	8004ce4 <MEMS_Init+0x44>
    Error_Handler();
 8004ce0:	f000 f83e 	bl	8004d60 <Error_Handler>
  }

  /* Initialize the LSM6DSL sensor */
  LSM6DSL_Init(&MotionSensor);
 8004ce4:	4812      	ldr	r0, [pc, #72]	; (8004d30 <MEMS_Init+0x90>)
 8004ce6:	f000 fe9d 	bl	8005a24 <LSM6DSL_Init>

  /* Configure the LSM6DSL accelerometer (ODR, scale and interrupt) */
  LSM6DSL_ACC_SetOutputDataRate(&MotionSensor, 26.0f); /* 26 Hz */
 8004cea:	eeb3 0a0a 	vmov.f32	s0, #58	; 0x41d00000  26.0
 8004cee:	4810      	ldr	r0, [pc, #64]	; (8004d30 <MEMS_Init+0x90>)
 8004cf0:	f000 ff82 	bl	8005bf8 <LSM6DSL_ACC_SetOutputDataRate>
  LSM6DSL_ACC_SetFullScale(&MotionSensor, 4);          /* [-4000mg; +4000mg] */
 8004cf4:	2104      	movs	r1, #4
 8004cf6:	480e      	ldr	r0, [pc, #56]	; (8004d30 <MEMS_Init+0x90>)
 8004cf8:	f000 ff9a 	bl	8005c30 <LSM6DSL_ACC_SetFullScale>
  LSM6DSL_ACC_Set_INT1_DRDY(&MotionSensor, ENABLE);    /* Enable DRDY */
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	480c      	ldr	r0, [pc, #48]	; (8004d30 <MEMS_Init+0x90>)
 8004d00:	f001 f854 	bl	8005dac <LSM6DSL_ACC_Set_INT1_DRDY>
  LSM6DSL_ACC_GetAxesRaw(&MotionSensor, &axes);        /* Clear DRDY */
 8004d04:	1d3b      	adds	r3, r7, #4
 8004d06:	4619      	mov	r1, r3
 8004d08:	4809      	ldr	r0, [pc, #36]	; (8004d30 <MEMS_Init+0x90>)
 8004d0a:	f000 ffb9 	bl	8005c80 <LSM6DSL_ACC_GetAxesRaw>

  /* Start the LSM6DSL accelerometer */
  LSM6DSL_ACC_Enable(&MotionSensor);
 8004d0e:	4808      	ldr	r0, [pc, #32]	; (8004d30 <MEMS_Init+0x90>)
 8004d10:	f000 ff07 	bl	8005b22 <LSM6DSL_ACC_Enable>
}
 8004d14:	bf00      	nop
 8004d16:	3728      	adds	r7, #40	; 0x28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	08005635 	.word	0x08005635
 8004d20:	080056b1 	.word	0x080056b1
 8004d24:	08005765 	.word	0x08005765
 8004d28:	08005701 	.word	0x08005701
 8004d2c:	080057c9 	.word	0x080057c9
 8004d30:	2000084c 	.word	0x2000084c

08004d34 <_write>:
//    dataRdyIntReceived++;
//  }
//}

int _write(int fd, char * ptr, int len)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	f04f 33ff 	mov.w	r3, #4294967295
 8004d48:	68b9      	ldr	r1, [r7, #8]
 8004d4a:	4804      	ldr	r0, [pc, #16]	; (8004d5c <_write+0x28>)
 8004d4c:	f006 ff8c 	bl	800bc68 <HAL_UART_Transmit>
  return len;
 8004d50:	687b      	ldr	r3, [r7, #4]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000238 	.word	0x20000238

08004d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d64:	b672      	cpsid	i
}
 8004d66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8004d68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004d6c:	4803      	ldr	r0, [pc, #12]	; (8004d7c <Error_Handler+0x1c>)
 8004d6e:	f002 fb63 	bl	8007438 <HAL_GPIO_TogglePin>
	  HAL_Delay(50); /* wait 500 ms */
 8004d72:	2032      	movs	r0, #50	; 0x32
 8004d74:	f001 fe0e 	bl	8006994 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8004d78:	e7f6      	b.n	8004d68 <Error_Handler+0x8>
 8004d7a:	bf00      	nop
 8004d7c:	48000400 	.word	0x48000400

08004d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d86:	4b0f      	ldr	r3, [pc, #60]	; (8004dc4 <HAL_MspInit+0x44>)
 8004d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d8a:	4a0e      	ldr	r2, [pc, #56]	; (8004dc4 <HAL_MspInit+0x44>)
 8004d8c:	f043 0301 	orr.w	r3, r3, #1
 8004d90:	6613      	str	r3, [r2, #96]	; 0x60
 8004d92:	4b0c      	ldr	r3, [pc, #48]	; (8004dc4 <HAL_MspInit+0x44>)
 8004d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	607b      	str	r3, [r7, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d9e:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <HAL_MspInit+0x44>)
 8004da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da2:	4a08      	ldr	r2, [pc, #32]	; (8004dc4 <HAL_MspInit+0x44>)
 8004da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da8:	6593      	str	r3, [r2, #88]	; 0x58
 8004daa:	4b06      	ldr	r3, [pc, #24]	; (8004dc4 <HAL_MspInit+0x44>)
 8004dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db2:	603b      	str	r3, [r7, #0]
 8004db4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	40021000 	.word	0x40021000

08004dc8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b0ac      	sub	sp, #176	; 0xb0
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dd0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	605a      	str	r2, [r3, #4]
 8004dda:	609a      	str	r2, [r3, #8]
 8004ddc:	60da      	str	r2, [r3, #12]
 8004dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004de0:	f107 0314 	add.w	r3, r7, #20
 8004de4:	2288      	movs	r2, #136	; 0x88
 8004de6:	2100      	movs	r1, #0
 8004de8:	4618      	mov	r0, r3
 8004dea:	f007 ff55 	bl	800cc98 <memset>
  if(DFSDM1_Init == 0)
 8004dee:	4b25      	ldr	r3, [pc, #148]	; (8004e84 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d142      	bne.n	8004e7c <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8004df6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004dfa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e02:	f107 0314 	add.w	r3, r7, #20
 8004e06:	4618      	mov	r0, r3
 8004e08:	f004 fa28 	bl	800925c <HAL_RCCEx_PeriphCLKConfig>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8004e12:	f7ff ffa5 	bl	8004d60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8004e16:	4b1c      	ldr	r3, [pc, #112]	; (8004e88 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8004e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e1a:	4a1b      	ldr	r2, [pc, #108]	; (8004e88 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8004e1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e20:	6613      	str	r3, [r2, #96]	; 0x60
 8004e22:	4b19      	ldr	r3, [pc, #100]	; (8004e88 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8004e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e2a:	613b      	str	r3, [r7, #16]
 8004e2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e2e:	4b16      	ldr	r3, [pc, #88]	; (8004e88 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8004e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e32:	4a15      	ldr	r2, [pc, #84]	; (8004e88 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8004e34:	f043 0310 	orr.w	r3, r3, #16
 8004e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e3a:	4b13      	ldr	r3, [pc, #76]	; (8004e88 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8004e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e3e:	f003 0310 	and.w	r3, r3, #16
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8004e46:	f44f 7320 	mov.w	r3, #640	; 0x280
 8004e4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e4e:	2302      	movs	r3, #2
 8004e50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e54:	2300      	movs	r3, #0
 8004e56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8004e60:	2306      	movs	r3, #6
 8004e62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e66:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4807      	ldr	r0, [pc, #28]	; (8004e8c <HAL_DFSDM_ChannelMspInit+0xc4>)
 8004e6e:	f002 f815 	bl	8006e9c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8004e72:	4b04      	ldr	r3, [pc, #16]	; (8004e84 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	3301      	adds	r3, #1
 8004e78:	4a02      	ldr	r2, [pc, #8]	; (8004e84 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8004e7a:	6013      	str	r3, [r2, #0]
  }

}
 8004e7c:	bf00      	nop
 8004e7e:	37b0      	adds	r7, #176	; 0xb0
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	20000880 	.word	0x20000880
 8004e88:	40021000 	.word	0x40021000
 8004e8c:	48001000 	.word	0x48001000

08004e90 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08a      	sub	sp, #40	; 0x28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e98:	f107 0314 	add.w	r3, r7, #20
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	605a      	str	r2, [r3, #4]
 8004ea2:	609a      	str	r2, [r3, #8]
 8004ea4:	60da      	str	r2, [r3, #12]
 8004ea6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a17      	ldr	r2, [pc, #92]	; (8004f0c <HAL_QSPI_MspInit+0x7c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d128      	bne.n	8004f04 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004eb2:	4b17      	ldr	r3, [pc, #92]	; (8004f10 <HAL_QSPI_MspInit+0x80>)
 8004eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb6:	4a16      	ldr	r2, [pc, #88]	; (8004f10 <HAL_QSPI_MspInit+0x80>)
 8004eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ebc:	6513      	str	r3, [r2, #80]	; 0x50
 8004ebe:	4b14      	ldr	r3, [pc, #80]	; (8004f10 <HAL_QSPI_MspInit+0x80>)
 8004ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec6:	613b      	str	r3, [r7, #16]
 8004ec8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004eca:	4b11      	ldr	r3, [pc, #68]	; (8004f10 <HAL_QSPI_MspInit+0x80>)
 8004ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ece:	4a10      	ldr	r2, [pc, #64]	; (8004f10 <HAL_QSPI_MspInit+0x80>)
 8004ed0:	f043 0310 	orr.w	r3, r3, #16
 8004ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ed6:	4b0e      	ldr	r3, [pc, #56]	; (8004f10 <HAL_QSPI_MspInit+0x80>)
 8004ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eda:	f003 0310 	and.w	r3, r3, #16
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8004ee2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8004ee6:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee8:	2302      	movs	r3, #2
 8004eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eec:	2300      	movs	r3, #0
 8004eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004ef4:	230a      	movs	r3, #10
 8004ef6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ef8:	f107 0314 	add.w	r3, r7, #20
 8004efc:	4619      	mov	r1, r3
 8004efe:	4805      	ldr	r0, [pc, #20]	; (8004f14 <HAL_QSPI_MspInit+0x84>)
 8004f00:	f001 ffcc 	bl	8006e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8004f04:	bf00      	nop
 8004f06:	3728      	adds	r7, #40	; 0x28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	a0001000 	.word	0xa0001000
 8004f10:	40021000 	.word	0x40021000
 8004f14:	48001000 	.word	0x48001000

08004f18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b08a      	sub	sp, #40	; 0x28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f20:	f107 0314 	add.w	r3, r7, #20
 8004f24:	2200      	movs	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	605a      	str	r2, [r3, #4]
 8004f2a:	609a      	str	r2, [r3, #8]
 8004f2c:	60da      	str	r2, [r3, #12]
 8004f2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a17      	ldr	r2, [pc, #92]	; (8004f94 <HAL_SPI_MspInit+0x7c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d128      	bne.n	8004f8c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004f3a:	4b17      	ldr	r3, [pc, #92]	; (8004f98 <HAL_SPI_MspInit+0x80>)
 8004f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3e:	4a16      	ldr	r2, [pc, #88]	; (8004f98 <HAL_SPI_MspInit+0x80>)
 8004f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f44:	6593      	str	r3, [r2, #88]	; 0x58
 8004f46:	4b14      	ldr	r3, [pc, #80]	; (8004f98 <HAL_SPI_MspInit+0x80>)
 8004f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f4e:	613b      	str	r3, [r7, #16]
 8004f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f52:	4b11      	ldr	r3, [pc, #68]	; (8004f98 <HAL_SPI_MspInit+0x80>)
 8004f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f56:	4a10      	ldr	r2, [pc, #64]	; (8004f98 <HAL_SPI_MspInit+0x80>)
 8004f58:	f043 0304 	orr.w	r3, r3, #4
 8004f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f5e:	4b0e      	ldr	r3, [pc, #56]	; (8004f98 <HAL_SPI_MspInit+0x80>)
 8004f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f62:	f003 0304 	and.w	r3, r3, #4
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8004f6a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f70:	2302      	movs	r3, #2
 8004f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f74:	2300      	movs	r3, #0
 8004f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004f7c:	2306      	movs	r3, #6
 8004f7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f80:	f107 0314 	add.w	r3, r7, #20
 8004f84:	4619      	mov	r1, r3
 8004f86:	4805      	ldr	r0, [pc, #20]	; (8004f9c <HAL_SPI_MspInit+0x84>)
 8004f88:	f001 ff88 	bl	8006e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004f8c:	bf00      	nop
 8004f8e:	3728      	adds	r7, #40	; 0x28
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	40003c00 	.word	0x40003c00
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	48000800 	.word	0x48000800

08004fa0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a08      	ldr	r2, [pc, #32]	; (8004fd0 <HAL_SPI_MspDeInit+0x30>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d10a      	bne.n	8004fc8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8004fb2:	4b08      	ldr	r3, [pc, #32]	; (8004fd4 <HAL_SPI_MspDeInit+0x34>)
 8004fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb6:	4a07      	ldr	r2, [pc, #28]	; (8004fd4 <HAL_SPI_MspDeInit+0x34>)
 8004fb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fbc:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8004fbe:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8004fc2:	4805      	ldr	r0, [pc, #20]	; (8004fd8 <HAL_SPI_MspDeInit+0x38>)
 8004fc4:	f002 f914 	bl	80071f0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8004fc8:	bf00      	nop
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40003c00 	.word	0x40003c00
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	48000800 	.word	0x48000800

08004fdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08a      	sub	sp, #40	; 0x28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fe4:	f107 0314 	add.w	r3, r7, #20
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	605a      	str	r2, [r3, #4]
 8004fee:	609a      	str	r2, [r3, #8]
 8004ff0:	60da      	str	r2, [r3, #12]
 8004ff2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ffc:	d130      	bne.n	8005060 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004ffe:	4b1a      	ldr	r3, [pc, #104]	; (8005068 <HAL_TIM_Base_MspInit+0x8c>)
 8005000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005002:	4a19      	ldr	r2, [pc, #100]	; (8005068 <HAL_TIM_Base_MspInit+0x8c>)
 8005004:	f043 0301 	orr.w	r3, r3, #1
 8005008:	6593      	str	r3, [r2, #88]	; 0x58
 800500a:	4b17      	ldr	r3, [pc, #92]	; (8005068 <HAL_TIM_Base_MspInit+0x8c>)
 800500c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	613b      	str	r3, [r7, #16]
 8005014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005016:	4b14      	ldr	r3, [pc, #80]	; (8005068 <HAL_TIM_Base_MspInit+0x8c>)
 8005018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800501a:	4a13      	ldr	r2, [pc, #76]	; (8005068 <HAL_TIM_Base_MspInit+0x8c>)
 800501c:	f043 0301 	orr.w	r3, r3, #1
 8005020:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005022:	4b11      	ldr	r3, [pc, #68]	; (8005068 <HAL_TIM_Base_MspInit+0x8c>)
 8005024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ARD_D4_Pin;
 800502e:	2308      	movs	r3, #8
 8005030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005032:	2302      	movs	r3, #2
 8005034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005036:	2300      	movs	r3, #0
 8005038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800503a:	2300      	movs	r3, #0
 800503c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800503e:	2301      	movs	r3, #1
 8005040:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8005042:	f107 0314 	add.w	r3, r7, #20
 8005046:	4619      	mov	r1, r3
 8005048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800504c:	f001 ff26 	bl	8006e9c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005050:	2200      	movs	r2, #0
 8005052:	2100      	movs	r1, #0
 8005054:	201c      	movs	r0, #28
 8005056:	f001 fd9c 	bl	8006b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800505a:	201c      	movs	r0, #28
 800505c:	f001 fdb5 	bl	8006bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005060:	bf00      	nop
 8005062:	3728      	adds	r7, #40	; 0x28
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	40021000 	.word	0x40021000

0800506c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b0ae      	sub	sp, #184	; 0xb8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005074:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	605a      	str	r2, [r3, #4]
 800507e:	609a      	str	r2, [r3, #8]
 8005080:	60da      	str	r2, [r3, #12]
 8005082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005084:	f107 031c 	add.w	r3, r7, #28
 8005088:	2288      	movs	r2, #136	; 0x88
 800508a:	2100      	movs	r1, #0
 800508c:	4618      	mov	r0, r3
 800508e:	f007 fe03 	bl	800cc98 <memset>
  if(huart->Instance==USART1)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a42      	ldr	r2, [pc, #264]	; (80051a0 <HAL_UART_MspInit+0x134>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d13b      	bne.n	8005114 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800509c:	2301      	movs	r3, #1
 800509e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80050a0:	2300      	movs	r3, #0
 80050a2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80050a4:	f107 031c 	add.w	r3, r7, #28
 80050a8:	4618      	mov	r0, r3
 80050aa:	f004 f8d7 	bl	800925c <HAL_RCCEx_PeriphCLKConfig>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80050b4:	f7ff fe54 	bl	8004d60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80050b8:	4b3a      	ldr	r3, [pc, #232]	; (80051a4 <HAL_UART_MspInit+0x138>)
 80050ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050bc:	4a39      	ldr	r2, [pc, #228]	; (80051a4 <HAL_UART_MspInit+0x138>)
 80050be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050c2:	6613      	str	r3, [r2, #96]	; 0x60
 80050c4:	4b37      	ldr	r3, [pc, #220]	; (80051a4 <HAL_UART_MspInit+0x138>)
 80050c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050cc:	61bb      	str	r3, [r7, #24]
 80050ce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050d0:	4b34      	ldr	r3, [pc, #208]	; (80051a4 <HAL_UART_MspInit+0x138>)
 80050d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d4:	4a33      	ldr	r2, [pc, #204]	; (80051a4 <HAL_UART_MspInit+0x138>)
 80050d6:	f043 0302 	orr.w	r3, r3, #2
 80050da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050dc:	4b31      	ldr	r3, [pc, #196]	; (80051a4 <HAL_UART_MspInit+0x138>)
 80050de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80050e8:	23c0      	movs	r3, #192	; 0xc0
 80050ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ee:	2302      	movs	r3, #2
 80050f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050f4:	2300      	movs	r3, #0
 80050f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050fa:	2303      	movs	r3, #3
 80050fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005100:	2307      	movs	r3, #7
 8005102:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005106:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800510a:	4619      	mov	r1, r3
 800510c:	4826      	ldr	r0, [pc, #152]	; (80051a8 <HAL_UART_MspInit+0x13c>)
 800510e:	f001 fec5 	bl	8006e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005112:	e040      	b.n	8005196 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a24      	ldr	r2, [pc, #144]	; (80051ac <HAL_UART_MspInit+0x140>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d13b      	bne.n	8005196 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800511e:	2304      	movs	r3, #4
 8005120:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005122:	2300      	movs	r3, #0
 8005124:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005126:	f107 031c 	add.w	r3, r7, #28
 800512a:	4618      	mov	r0, r3
 800512c:	f004 f896 	bl	800925c <HAL_RCCEx_PeriphCLKConfig>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8005136:	f7ff fe13 	bl	8004d60 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800513a:	4b1a      	ldr	r3, [pc, #104]	; (80051a4 <HAL_UART_MspInit+0x138>)
 800513c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513e:	4a19      	ldr	r2, [pc, #100]	; (80051a4 <HAL_UART_MspInit+0x138>)
 8005140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005144:	6593      	str	r3, [r2, #88]	; 0x58
 8005146:	4b17      	ldr	r3, [pc, #92]	; (80051a4 <HAL_UART_MspInit+0x138>)
 8005148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800514e:	613b      	str	r3, [r7, #16]
 8005150:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005152:	4b14      	ldr	r3, [pc, #80]	; (80051a4 <HAL_UART_MspInit+0x138>)
 8005154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005156:	4a13      	ldr	r2, [pc, #76]	; (80051a4 <HAL_UART_MspInit+0x138>)
 8005158:	f043 0308 	orr.w	r3, r3, #8
 800515c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800515e:	4b11      	ldr	r3, [pc, #68]	; (80051a4 <HAL_UART_MspInit+0x138>)
 8005160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800516a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800516e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005172:	2302      	movs	r3, #2
 8005174:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005178:	2300      	movs	r3, #0
 800517a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800517e:	2303      	movs	r3, #3
 8005180:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005184:	2307      	movs	r3, #7
 8005186:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800518a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800518e:	4619      	mov	r1, r3
 8005190:	4807      	ldr	r0, [pc, #28]	; (80051b0 <HAL_UART_MspInit+0x144>)
 8005192:	f001 fe83 	bl	8006e9c <HAL_GPIO_Init>
}
 8005196:	bf00      	nop
 8005198:	37b8      	adds	r7, #184	; 0xb8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	40013800 	.word	0x40013800
 80051a4:	40021000 	.word	0x40021000
 80051a8:	48000400 	.word	0x48000400
 80051ac:	40004800 	.word	0x40004800
 80051b0:	48000c00 	.word	0x48000c00

080051b4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b0ac      	sub	sp, #176	; 0xb0
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80051c0:	2200      	movs	r2, #0
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	605a      	str	r2, [r3, #4]
 80051c6:	609a      	str	r2, [r3, #8]
 80051c8:	60da      	str	r2, [r3, #12]
 80051ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80051cc:	f107 0314 	add.w	r3, r7, #20
 80051d0:	2288      	movs	r2, #136	; 0x88
 80051d2:	2100      	movs	r1, #0
 80051d4:	4618      	mov	r0, r3
 80051d6:	f007 fd5f 	bl	800cc98 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051e2:	d17c      	bne.n	80052de <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80051e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051e8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80051ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80051ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80051f2:	2301      	movs	r3, #1
 80051f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80051f6:	2301      	movs	r3, #1
 80051f8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80051fa:	2318      	movs	r3, #24
 80051fc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80051fe:	2307      	movs	r3, #7
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8005202:	2302      	movs	r3, #2
 8005204:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8005206:	2302      	movs	r3, #2
 8005208:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800520a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800520e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005210:	f107 0314 	add.w	r3, r7, #20
 8005214:	4618      	mov	r0, r3
 8005216:	f004 f821 	bl	800925c <HAL_RCCEx_PeriphCLKConfig>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8005220:	f7ff fd9e 	bl	8004d60 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005224:	4b30      	ldr	r3, [pc, #192]	; (80052e8 <HAL_PCD_MspInit+0x134>)
 8005226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005228:	4a2f      	ldr	r2, [pc, #188]	; (80052e8 <HAL_PCD_MspInit+0x134>)
 800522a:	f043 0301 	orr.w	r3, r3, #1
 800522e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005230:	4b2d      	ldr	r3, [pc, #180]	; (80052e8 <HAL_PCD_MspInit+0x134>)
 8005232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	613b      	str	r3, [r7, #16]
 800523a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800523c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005240:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005244:	2300      	movs	r3, #0
 8005246:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800524a:	2300      	movs	r3, #0
 800524c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005250:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005254:	4619      	mov	r1, r3
 8005256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800525a:	f001 fe1f 	bl	8006e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800525e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005262:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005266:	2302      	movs	r3, #2
 8005268:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800526c:	2300      	movs	r3, #0
 800526e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005272:	2303      	movs	r3, #3
 8005274:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005278:	230a      	movs	r3, #10
 800527a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800527e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005282:	4619      	mov	r1, r3
 8005284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005288:	f001 fe08 	bl	8006e9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800528c:	4b16      	ldr	r3, [pc, #88]	; (80052e8 <HAL_PCD_MspInit+0x134>)
 800528e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005290:	4a15      	ldr	r2, [pc, #84]	; (80052e8 <HAL_PCD_MspInit+0x134>)
 8005292:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005296:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005298:	4b13      	ldr	r3, [pc, #76]	; (80052e8 <HAL_PCD_MspInit+0x134>)
 800529a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800529c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052a4:	4b10      	ldr	r3, [pc, #64]	; (80052e8 <HAL_PCD_MspInit+0x134>)
 80052a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d114      	bne.n	80052da <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052b0:	4b0d      	ldr	r3, [pc, #52]	; (80052e8 <HAL_PCD_MspInit+0x134>)
 80052b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b4:	4a0c      	ldr	r2, [pc, #48]	; (80052e8 <HAL_PCD_MspInit+0x134>)
 80052b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ba:	6593      	str	r3, [r2, #88]	; 0x58
 80052bc:	4b0a      	ldr	r3, [pc, #40]	; (80052e8 <HAL_PCD_MspInit+0x134>)
 80052be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c4:	60bb      	str	r3, [r7, #8]
 80052c6:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80052c8:	f003 f8fc 	bl	80084c4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80052cc:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <HAL_PCD_MspInit+0x134>)
 80052ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d0:	4a05      	ldr	r2, [pc, #20]	; (80052e8 <HAL_PCD_MspInit+0x134>)
 80052d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052d6:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80052d8:	e001      	b.n	80052de <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80052da:	f003 f8f3 	bl	80084c4 <HAL_PWREx_EnableVddUSB>
}
 80052de:	bf00      	nop
 80052e0:	37b0      	adds	r7, #176	; 0xb0
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	40021000 	.word	0x40021000

080052ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80052f0:	e7fe      	b.n	80052f0 <NMI_Handler+0x4>

080052f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052f2:	b480      	push	{r7}
 80052f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052f6:	e7fe      	b.n	80052f6 <HardFault_Handler+0x4>

080052f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052fc:	e7fe      	b.n	80052fc <MemManage_Handler+0x4>

080052fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052fe:	b480      	push	{r7}
 8005300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005302:	e7fe      	b.n	8005302 <BusFault_Handler+0x4>

08005304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005304:	b480      	push	{r7}
 8005306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005308:	e7fe      	b.n	8005308 <UsageFault_Handler+0x4>

0800530a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800530a:	b480      	push	{r7}
 800530c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800530e:	bf00      	nop
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800531c:	bf00      	nop
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005326:	b480      	push	{r7}
 8005328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800532a:	bf00      	nop
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005338:	f001 fb0c 	bl	8006954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800533c:	bf00      	nop
 800533e:	bd80      	pop	{r7, pc}

08005340 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8005344:	2020      	movs	r0, #32
 8005346:	f002 f891 	bl	800746c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800534a:	2040      	movs	r0, #64	; 0x40
 800534c:	f002 f88e 	bl	800746c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8005350:	2080      	movs	r0, #128	; 0x80
 8005352:	f002 f88b 	bl	800746c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8005356:	f44f 7080 	mov.w	r0, #256	; 0x100
 800535a:	f002 f887 	bl	800746c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800535e:	bf00      	nop
 8005360:	bd80      	pop	{r7, pc}
	...

08005364 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005368:	4802      	ldr	r0, [pc, #8]	; (8005374 <TIM2_IRQHandler+0x10>)
 800536a:	f006 f83b 	bl	800b3e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800536e:	bf00      	nop
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	200001ec 	.word	0x200001ec

08005378 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800537c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005380:	f002 f874 	bl	800746c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8005384:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005388:	f002 f870 	bl	800746c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800538c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005390:	f002 f86c 	bl	800746c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8005394:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005398:	f002 f868 	bl	800746c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800539c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80053a0:	f002 f864 	bl	800746c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80053a4:	bf00      	nop
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <EXTI1_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI1_IRQHandler(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80053ac:	2002      	movs	r0, #2
 80053ae:	f002 f85d 	bl	800746c <HAL_GPIO_EXTI_IRQHandler>
}
 80053b2:	bf00      	nop
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <SPI3_IRQHandler>:


void SPI3_IRQHandler(void){
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
	HAL_SPI_IRQHandler(&hspi);
 80053bc:	4802      	ldr	r0, [pc, #8]	; (80053c8 <SPI3_IRQHandler+0x10>)
 80053be:	f005 fa15 	bl	800a7ec <HAL_SPI_IRQHandler>
}
 80053c2:	bf00      	nop
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	20000098 	.word	0x20000098

080053cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80053cc:	b480      	push	{r7}
 80053ce:	af00      	add	r7, sp, #0
	return 1;
 80053d0:	2301      	movs	r3, #1
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <_kill>:

int _kill(int pid, int sig)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80053e6:	f007 fc0d 	bl	800cc04 <__errno>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2216      	movs	r2, #22
 80053ee:	601a      	str	r2, [r3, #0]
	return -1;
 80053f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <_exit>:

void _exit (int status)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005404:	f04f 31ff 	mov.w	r1, #4294967295
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7ff ffe7 	bl	80053dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800540e:	e7fe      	b.n	800540e <_exit+0x12>

08005410 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800541c:	2300      	movs	r3, #0
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	e00a      	b.n	8005438 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005422:	f3af 8000 	nop.w
 8005426:	4601      	mov	r1, r0
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	1c5a      	adds	r2, r3, #1
 800542c:	60ba      	str	r2, [r7, #8]
 800542e:	b2ca      	uxtb	r2, r1
 8005430:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	3301      	adds	r3, #1
 8005436:	617b      	str	r3, [r7, #20]
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	429a      	cmp	r2, r3
 800543e:	dbf0      	blt.n	8005422 <_read+0x12>
	}

return len;
 8005440:	687b      	ldr	r3, [r7, #4]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3718      	adds	r7, #24
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <_close>:
	}
	return len;
}

int _close(int file)
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
	return -1;
 8005452:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005456:	4618      	mov	r0, r3
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005462:	b480      	push	{r7}
 8005464:	b083      	sub	sp, #12
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005472:	605a      	str	r2, [r3, #4]
	return 0;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <_isatty>:

int _isatty(int file)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
	return 1;
 800548a:	2301      	movs	r3, #1
}
 800548c:	4618      	mov	r0, r3
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
	return 0;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
	...

080054b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80054bc:	4a14      	ldr	r2, [pc, #80]	; (8005510 <_sbrk+0x5c>)
 80054be:	4b15      	ldr	r3, [pc, #84]	; (8005514 <_sbrk+0x60>)
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80054c8:	4b13      	ldr	r3, [pc, #76]	; (8005518 <_sbrk+0x64>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d102      	bne.n	80054d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80054d0:	4b11      	ldr	r3, [pc, #68]	; (8005518 <_sbrk+0x64>)
 80054d2:	4a12      	ldr	r2, [pc, #72]	; (800551c <_sbrk+0x68>)
 80054d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80054d6:	4b10      	ldr	r3, [pc, #64]	; (8005518 <_sbrk+0x64>)
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4413      	add	r3, r2
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d207      	bcs.n	80054f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80054e4:	f007 fb8e 	bl	800cc04 <__errno>
 80054e8:	4603      	mov	r3, r0
 80054ea:	220c      	movs	r2, #12
 80054ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80054ee:	f04f 33ff 	mov.w	r3, #4294967295
 80054f2:	e009      	b.n	8005508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80054f4:	4b08      	ldr	r3, [pc, #32]	; (8005518 <_sbrk+0x64>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80054fa:	4b07      	ldr	r3, [pc, #28]	; (8005518 <_sbrk+0x64>)
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4413      	add	r3, r2
 8005502:	4a05      	ldr	r2, [pc, #20]	; (8005518 <_sbrk+0x64>)
 8005504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005506:	68fb      	ldr	r3, [r7, #12]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	20018000 	.word	0x20018000
 8005514:	00000400 	.word	0x00000400
 8005518:	20000884 	.word	0x20000884
 800551c:	20001218 	.word	0x20001218

08005520 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005524:	4b06      	ldr	r3, [pc, #24]	; (8005540 <SystemInit+0x20>)
 8005526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552a:	4a05      	ldr	r2, [pc, #20]	; (8005540 <SystemInit+0x20>)
 800552c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005534:	bf00      	nop
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	e000ed00 	.word	0xe000ed00

08005544 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 800554e:	4b0d      	ldr	r3, [pc, #52]	; (8005584 <WIFI_Init+0x40>)
 8005550:	9301      	str	r3, [sp, #4]
 8005552:	4b0d      	ldr	r3, [pc, #52]	; (8005588 <WIFI_Init+0x44>)
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	4b0d      	ldr	r3, [pc, #52]	; (800558c <WIFI_Init+0x48>)
 8005558:	4a0d      	ldr	r2, [pc, #52]	; (8005590 <WIFI_Init+0x4c>)
 800555a:	490e      	ldr	r1, [pc, #56]	; (8005594 <WIFI_Init+0x50>)
 800555c:	480e      	ldr	r0, [pc, #56]	; (8005598 <WIFI_Init+0x54>)
 800555e:	f7fe fa1d 	bl	800399c <ES_WIFI_RegisterBusIO>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d107      	bne.n	8005578 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8005568:	480b      	ldr	r0, [pc, #44]	; (8005598 <WIFI_Init+0x54>)
 800556a:	f7fe f9e9 	bl	8003940 <ES_WIFI_Init>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8005578:	79fb      	ldrb	r3, [r7, #7]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	08003f91 	.word	0x08003f91
 8005588:	08004085 	.word	0x08004085
 800558c:	08004161 	.word	0x08004161
 8005590:	08003e79 	.word	0x08003e79
 8005594:	08003cdd 	.word	0x08003cdd
 8005598:	20000888 	.word	0x20000888

0800559c <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	4613      	mov	r3, r2
 80055a8:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 80055ae:	79fb      	ldrb	r3, [r7, #7]
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	68f9      	ldr	r1, [r7, #12]
 80055b4:	4809      	ldr	r0, [pc, #36]	; (80055dc <WIFI_Connect+0x40>)
 80055b6:	f7fe fa25 	bl	8003a04 <ES_WIFI_Connect>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d107      	bne.n	80055d0 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 80055c0:	4806      	ldr	r0, [pc, #24]	; (80055dc <WIFI_Connect+0x40>)
 80055c2:	f7fe fa97 	bl	8003af4 <ES_WIFI_GetNetworkSettings>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 80055d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3718      	adds	r7, #24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	20000888 	.word	0x20000888

080055e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80055e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005618 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80055e4:	f7ff ff9c 	bl	8005520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80055e8:	480c      	ldr	r0, [pc, #48]	; (800561c <LoopForever+0x6>)
  ldr r1, =_edata
 80055ea:	490d      	ldr	r1, [pc, #52]	; (8005620 <LoopForever+0xa>)
  ldr r2, =_sidata
 80055ec:	4a0d      	ldr	r2, [pc, #52]	; (8005624 <LoopForever+0xe>)
  movs r3, #0
 80055ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055f0:	e002      	b.n	80055f8 <LoopCopyDataInit>

080055f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055f6:	3304      	adds	r3, #4

080055f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055fc:	d3f9      	bcc.n	80055f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055fe:	4a0a      	ldr	r2, [pc, #40]	; (8005628 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005600:	4c0a      	ldr	r4, [pc, #40]	; (800562c <LoopForever+0x16>)
  movs r3, #0
 8005602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005604:	e001      	b.n	800560a <LoopFillZerobss>

08005606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005608:	3204      	adds	r2, #4

0800560a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800560a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800560c:	d3fb      	bcc.n	8005606 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800560e:	f007 fb11 	bl	800cc34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005612:	f7fe fe57 	bl	80042c4 <main>

08005616 <LoopForever>:

LoopForever:
    b LoopForever
 8005616:	e7fe      	b.n	8005616 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005618:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800561c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005620:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8005624:	0800f620 	.word	0x0800f620
  ldr r2, =_sbss
 8005628:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800562c:	20001218 	.word	0x20001218

08005630 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005630:	e7fe      	b.n	8005630 <ADC1_2_IRQHandler>
	...

08005634 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800563a:	2300      	movs	r3, #0
 800563c:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 800563e:	4b19      	ldr	r3, [pc, #100]	; (80056a4 <BSP_I2C2_Init+0x70>)
 8005640:	4a19      	ldr	r2, [pc, #100]	; (80056a8 <BSP_I2C2_Init+0x74>)
 8005642:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8005644:	4b19      	ldr	r3, [pc, #100]	; (80056ac <BSP_I2C2_Init+0x78>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	4918      	ldr	r1, [pc, #96]	; (80056ac <BSP_I2C2_Init+0x78>)
 800564c:	600a      	str	r2, [r1, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d122      	bne.n	8005698 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8005652:	4814      	ldr	r0, [pc, #80]	; (80056a4 <BSP_I2C2_Init+0x70>)
 8005654:	f002 fa22 	bl	8007a9c <HAL_I2C_GetState>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d11c      	bne.n	8005698 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 800565e:	4811      	ldr	r0, [pc, #68]	; (80056a4 <BSP_I2C2_Init+0x70>)
 8005660:	f000 f8fe 	bl	8005860 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d116      	bne.n	8005698 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 800566a:	480e      	ldr	r0, [pc, #56]	; (80056a4 <BSP_I2C2_Init+0x70>)
 800566c:	f000 f8b4 	bl	80057d8 <MX_I2C2_Init>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8005676:	f06f 0307 	mvn.w	r3, #7
 800567a:	607b      	str	r3, [r7, #4]
 800567c:	e00c      	b.n	8005698 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800567e:	2100      	movs	r1, #0
 8005680:	4808      	ldr	r0, [pc, #32]	; (80056a4 <BSP_I2C2_Init+0x70>)
 8005682:	f002 fccb 	bl	800801c <HAL_I2CEx_ConfigAnalogFilter>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800568c:	f06f 0307 	mvn.w	r3, #7
 8005690:	607b      	str	r3, [r7, #4]
 8005692:	e001      	b.n	8005698 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8005694:	2300      	movs	r3, #0
 8005696:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8005698:	687b      	ldr	r3, [r7, #4]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	20001188 	.word	0x20001188
 80056a8:	40005800 	.word	0x40005800
 80056ac:	200011dc 	.word	0x200011dc

080056b0 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80056b6:	2300      	movs	r3, #0
 80056b8:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 80056ba:	4b0f      	ldr	r3, [pc, #60]	; (80056f8 <BSP_I2C2_DeInit+0x48>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d014      	beq.n	80056ec <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 80056c2:	4b0d      	ldr	r3, [pc, #52]	; (80056f8 <BSP_I2C2_DeInit+0x48>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	3b01      	subs	r3, #1
 80056c8:	4a0b      	ldr	r2, [pc, #44]	; (80056f8 <BSP_I2C2_DeInit+0x48>)
 80056ca:	6013      	str	r3, [r2, #0]
 80056cc:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <BSP_I2C2_DeInit+0x48>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10b      	bne.n	80056ec <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 80056d4:	4809      	ldr	r0, [pc, #36]	; (80056fc <BSP_I2C2_DeInit+0x4c>)
 80056d6:	f000 f923 	bl	8005920 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 80056da:	4808      	ldr	r0, [pc, #32]	; (80056fc <BSP_I2C2_DeInit+0x4c>)
 80056dc:	f001 ff6d 	bl	80075ba <HAL_I2C_DeInit>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80056e6:	f06f 0307 	mvn.w	r3, #7
 80056ea:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80056ec:	687b      	ldr	r3, [r7, #4]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	200011dc 	.word	0x200011dc
 80056fc:	20001188 	.word	0x20001188

08005700 <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b08a      	sub	sp, #40	; 0x28
 8005704:	af04      	add	r7, sp, #16
 8005706:	60ba      	str	r2, [r7, #8]
 8005708:	461a      	mov	r2, r3
 800570a:	4603      	mov	r3, r0
 800570c:	81fb      	strh	r3, [r7, #14]
 800570e:	460b      	mov	r3, r1
 8005710:	81bb      	strh	r3, [r7, #12]
 8005712:	4613      	mov	r3, r2
 8005714:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8005716:	2300      	movs	r3, #0
 8005718:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 800571a:	89ba      	ldrh	r2, [r7, #12]
 800571c:	89f9      	ldrh	r1, [r7, #14]
 800571e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005722:	9302      	str	r3, [sp, #8]
 8005724:	88fb      	ldrh	r3, [r7, #6]
 8005726:	9301      	str	r3, [sp, #4]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	2301      	movs	r3, #1
 800572e:	480c      	ldr	r0, [pc, #48]	; (8005760 <BSP_I2C2_WriteReg+0x60>)
 8005730:	f001 ff86 	bl	8007640 <HAL_I2C_Mem_Write>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00c      	beq.n	8005754 <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 800573a:	4809      	ldr	r0, [pc, #36]	; (8005760 <BSP_I2C2_WriteReg+0x60>)
 800573c:	f002 f9bc 	bl	8007ab8 <HAL_I2C_GetError>
 8005740:	4603      	mov	r3, r0
 8005742:	2b04      	cmp	r3, #4
 8005744:	d103      	bne.n	800574e <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005746:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800574a:	617b      	str	r3, [r7, #20]
 800574c:	e002      	b.n	8005754 <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800574e:	f06f 0303 	mvn.w	r3, #3
 8005752:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8005754:	697b      	ldr	r3, [r7, #20]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20001188 	.word	0x20001188

08005764 <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b08a      	sub	sp, #40	; 0x28
 8005768:	af04      	add	r7, sp, #16
 800576a:	60ba      	str	r2, [r7, #8]
 800576c:	461a      	mov	r2, r3
 800576e:	4603      	mov	r3, r0
 8005770:	81fb      	strh	r3, [r7, #14]
 8005772:	460b      	mov	r3, r1
 8005774:	81bb      	strh	r3, [r7, #12]
 8005776:	4613      	mov	r3, r2
 8005778:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800577a:	2300      	movs	r3, #0
 800577c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 800577e:	89ba      	ldrh	r2, [r7, #12]
 8005780:	89f9      	ldrh	r1, [r7, #14]
 8005782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005786:	9302      	str	r3, [sp, #8]
 8005788:	88fb      	ldrh	r3, [r7, #6]
 800578a:	9301      	str	r3, [sp, #4]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	2301      	movs	r3, #1
 8005792:	480c      	ldr	r0, [pc, #48]	; (80057c4 <BSP_I2C2_ReadReg+0x60>)
 8005794:	f002 f868 	bl	8007868 <HAL_I2C_Mem_Read>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00c      	beq.n	80057b8 <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 800579e:	4809      	ldr	r0, [pc, #36]	; (80057c4 <BSP_I2C2_ReadReg+0x60>)
 80057a0:	f002 f98a 	bl	8007ab8 <HAL_I2C_GetError>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b04      	cmp	r3, #4
 80057a8:	d103      	bne.n	80057b2 <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80057aa:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80057ae:	617b      	str	r3, [r7, #20]
 80057b0:	e002      	b.n	80057b8 <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80057b2:	f06f 0303 	mvn.w	r3, #3
 80057b6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80057b8:	697b      	ldr	r3, [r7, #20]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3718      	adds	r7, #24
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	20001188 	.word	0x20001188

080057c8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80057cc:	f001 f8d6 	bl	800697c <HAL_GetTick>
 80057d0:	4603      	mov	r3, r0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	bd80      	pop	{r7, pc}
	...

080057d8 <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80057e0:	2300      	movs	r3, #0
 80057e2:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a1c      	ldr	r2, [pc, #112]	; (8005858 <MX_I2C2_Init+0x80>)
 80057e8:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00702991;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a1b      	ldr	r2, [pc, #108]	; (800585c <MX_I2C2_Init+0x84>)
 80057ee:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f001 fe3e 	bl	800749c <HAL_I2C_Init>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800582a:	2100      	movs	r1, #0
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f002 fbf5 	bl	800801c <HAL_I2CEx_ConfigAnalogFilter>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d001      	beq.n	800583c <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 800583c:	2100      	movs	r1, #0
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f002 fc37 	bl	80080b2 <HAL_I2CEx_ConfigDigitalFilter>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800584e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	40005800 	.word	0x40005800
 800585c:	00702991 	.word	0x00702991

08005860 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b0ac      	sub	sp, #176	; 0xb0
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005868:	f107 0314 	add.w	r3, r7, #20
 800586c:	2288      	movs	r2, #136	; 0x88
 800586e:	2100      	movs	r1, #0
 8005870:	4618      	mov	r0, r3
 8005872:	f007 fa11 	bl	800cc98 <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8005876:	2380      	movs	r3, #128	; 0x80
 8005878:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800587a:	2300      	movs	r3, #0
 800587c:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800587e:	f107 0314 	add.w	r3, r7, #20
 8005882:	4618      	mov	r0, r3
 8005884:	f003 fcea 	bl	800925c <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005888:	4b23      	ldr	r3, [pc, #140]	; (8005918 <I2C2_MspInit+0xb8>)
 800588a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800588c:	4a22      	ldr	r2, [pc, #136]	; (8005918 <I2C2_MspInit+0xb8>)
 800588e:	f043 0302 	orr.w	r3, r3, #2
 8005892:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005894:	4b20      	ldr	r3, [pc, #128]	; (8005918 <I2C2_MspInit+0xb8>)
 8005896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	613b      	str	r3, [r7, #16]
 800589e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 80058a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80058a8:	2312      	movs	r3, #18
 80058aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80058ae:	2301      	movs	r3, #1
 80058b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058b4:	2303      	movs	r3, #3
 80058b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 80058ba:	2304      	movs	r3, #4
 80058bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 80058c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80058c4:	4619      	mov	r1, r3
 80058c6:	4815      	ldr	r0, [pc, #84]	; (800591c <I2C2_MspInit+0xbc>)
 80058c8:	f001 fae8 	bl	8006e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 80058cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80058d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80058d4:	2312      	movs	r3, #18
 80058d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80058da:	2301      	movs	r3, #1
 80058dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058e0:	2303      	movs	r3, #3
 80058e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 80058e6:	2304      	movs	r3, #4
 80058e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 80058ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80058f0:	4619      	mov	r1, r3
 80058f2:	480a      	ldr	r0, [pc, #40]	; (800591c <I2C2_MspInit+0xbc>)
 80058f4:	f001 fad2 	bl	8006e9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80058f8:	4b07      	ldr	r3, [pc, #28]	; (8005918 <I2C2_MspInit+0xb8>)
 80058fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058fc:	4a06      	ldr	r2, [pc, #24]	; (8005918 <I2C2_MspInit+0xb8>)
 80058fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005902:	6593      	str	r3, [r2, #88]	; 0x58
 8005904:	4b04      	ldr	r3, [pc, #16]	; (8005918 <I2C2_MspInit+0xb8>)
 8005906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8005910:	bf00      	nop
 8005912:	37b0      	adds	r7, #176	; 0xb0
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	40021000 	.word	0x40021000
 800591c:	48000400 	.word	0x48000400

08005920 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8005928:	4b09      	ldr	r3, [pc, #36]	; (8005950 <I2C2_MspDeInit+0x30>)
 800592a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592c:	4a08      	ldr	r2, [pc, #32]	; (8005950 <I2C2_MspDeInit+0x30>)
 800592e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005932:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8005934:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005938:	4806      	ldr	r0, [pc, #24]	; (8005954 <I2C2_MspDeInit+0x34>)
 800593a:	f001 fc59 	bl	80071f0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 800593e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005942:	4804      	ldr	r0, [pc, #16]	; (8005954 <I2C2_MspDeInit+0x34>)
 8005944:	f001 fc54 	bl	80071f0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 8005948:	bf00      	nop
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	40021000 	.word	0x40021000
 8005954:	48000400 	.word	0x48000400

08005958 <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d103      	bne.n	8005974 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 800596c:	f04f 33ff 	mov.w	r3, #4294967295
 8005970:	60fb      	str	r3, [r7, #12]
 8005972:	e04d      	b.n	8005a10 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	7b1a      	ldrb	r2, [r3, #12]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	695a      	ldr	r2, [r3, #20]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	699a      	ldr	r2, [r3, #24]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a1b      	ldr	r2, [pc, #108]	; (8005a1c <LSM6DSL_RegisterBusIO+0xc4>)
 80059b0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a1a      	ldr	r2, [pc, #104]	; (8005a20 <LSM6DSL_RegisterBusIO+0xc8>)
 80059b6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d103      	bne.n	80059ce <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 80059c6:	f04f 33ff 	mov.w	r3, #4294967295
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	e020      	b.n	8005a10 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4798      	blx	r3
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 80059da:	f04f 33ff 	mov.w	r3, #4294967295
 80059de:	60fb      	str	r3, [r7, #12]
 80059e0:	e016      	b.n	8005a10 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d112      	bne.n	8005a10 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10d      	bne.n	8005a10 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80059f4:	230c      	movs	r3, #12
 80059f6:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 80059f8:	7afb      	ldrb	r3, [r7, #11]
 80059fa:	461a      	mov	r2, r3
 80059fc:	2112      	movs	r1, #18
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f9b9 	bl	8005d76 <LSM6DSL_Write_Reg>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d002      	beq.n	8005a10 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8005a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a0e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005a10:	68fb      	ldr	r3, [r7, #12]
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	08006031 	.word	0x08006031
 8005a20:	08006067 	.word	0x08006067

08005a24 <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	331c      	adds	r3, #28
 8005a30:	2101      	movs	r1, #1
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 fcb4 	bl	80063a0 <lsm6dsl_auto_increment_set>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d002      	beq.n	8005a44 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8005a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a42:	e054      	b.n	8005aee <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	331c      	adds	r3, #28
 8005a48:	2101      	movs	r1, #1
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 fc26 	bl	800629c <lsm6dsl_block_data_update_set>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d002      	beq.n	8005a5c <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8005a56:	f04f 33ff 	mov.w	r3, #4294967295
 8005a5a:	e048      	b.n	8005aee <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	331c      	adds	r3, #28
 8005a60:	2100      	movs	r1, #0
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fefb 	bl	800685e <lsm6dsl_fifo_mode_set>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8005a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a72:	e03c      	b.n	8005aee <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2204      	movs	r2, #4
 8005a78:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	331c      	adds	r3, #28
 8005a80:	2100      	movs	r1, #0
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 fb98 	bl	80061b8 <lsm6dsl_xl_data_rate_set>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8005a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a92:	e02c      	b.n	8005aee <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	331c      	adds	r3, #28
 8005a98:	2100      	movs	r1, #0
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 fb2e 	bl	80060fc <lsm6dsl_xl_full_scale_set>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8005aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aaa:	e020      	b.n	8005aee <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2204      	movs	r2, #4
 8005ab0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	331c      	adds	r3, #28
 8005ab8:	2100      	movs	r1, #0
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 fbc8 	bl	8006250 <lsm6dsl_gy_data_rate_set>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d002      	beq.n	8005acc <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8005ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aca:	e010      	b.n	8005aee <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	331c      	adds	r3, #28
 8005ad0:	2106      	movs	r1, #6
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 fb96 	bl	8006204 <lsm6dsl_gy_full_scale_set>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d002      	beq.n	8005ae4 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8005ade:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae2:	e004      	b.n	8005aee <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <LSM6DSL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b082      	sub	sp, #8
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
 8005afe:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	331c      	adds	r3, #28
 8005b04:	6839      	ldr	r1, [r7, #0]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 fc39 	bl	800637e <lsm6dsl_device_id_get>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d002      	beq.n	8005b18 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8005b12:	f04f 33ff 	mov.w	r3, #4294967295
 8005b16:	e000      	b.n	8005b1a <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b082      	sub	sp, #8
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d101      	bne.n	8005b38 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8005b34:	2300      	movs	r3, #0
 8005b36:	e014      	b.n	8005b62 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f103 021c 	add.w	r2, r3, #28
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005b44:	4619      	mov	r1, r3
 8005b46:	4610      	mov	r0, r2
 8005b48:	f000 fb36 	bl	80061b8 <lsm6dsl_xl_data_rate_set>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d002      	beq.n	8005b58 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8005b52:	f04f 33ff 	mov.w	r3, #4294967295
 8005b56:	e004      	b.n	8005b62 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
	...

08005b6c <LSM6DSL_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	331c      	adds	r3, #28
 8005b7e:	f107 020b 	add.w	r2, r7, #11
 8005b82:	4611      	mov	r1, r2
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 fadf 	bl	8006148 <lsm6dsl_xl_full_scale_get>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d002      	beq.n	8005b96 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8005b90:	f04f 33ff 	mov.w	r3, #4294967295
 8005b94:	e023      	b.n	8005bde <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8005b96:	7afb      	ldrb	r3, [r7, #11]
 8005b98:	2b03      	cmp	r3, #3
 8005b9a:	d81b      	bhi.n	8005bd4 <LSM6DSL_ACC_GetSensitivity+0x68>
 8005b9c:	a201      	add	r2, pc, #4	; (adr r2, 8005ba4 <LSM6DSL_ACC_GetSensitivity+0x38>)
 8005b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba2:	bf00      	nop
 8005ba4:	08005bb5 	.word	0x08005bb5
 8005ba8:	08005bcd 	.word	0x08005bcd
 8005bac:	08005bbd 	.word	0x08005bbd
 8005bb0:	08005bc5 	.word	0x08005bc5
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	4a0c      	ldr	r2, [pc, #48]	; (8005be8 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8005bb8:	601a      	str	r2, [r3, #0]
      break;
 8005bba:	e00f      	b.n	8005bdc <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	4a0b      	ldr	r2, [pc, #44]	; (8005bec <LSM6DSL_ACC_GetSensitivity+0x80>)
 8005bc0:	601a      	str	r2, [r3, #0]
      break;
 8005bc2:	e00b      	b.n	8005bdc <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	4a0a      	ldr	r2, [pc, #40]	; (8005bf0 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8005bc8:	601a      	str	r2, [r3, #0]
      break;
 8005bca:	e007      	b.n	8005bdc <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	4a09      	ldr	r2, [pc, #36]	; (8005bf4 <LSM6DSL_ACC_GetSensitivity+0x88>)
 8005bd0:	601a      	str	r2, [r3, #0]
      break;
 8005bd2:	e003      	b.n	8005bdc <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8005bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd8:	60fb      	str	r3, [r7, #12]
      break;
 8005bda:	bf00      	nop
  }

  return ret;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	3d79db23 	.word	0x3d79db23
 8005bec:	3df9db23 	.word	0x3df9db23
 8005bf0:	3e79db23 	.word	0x3e79db23
 8005bf4:	3ef9db23 	.word	0x3ef9db23

08005bf8 <LSM6DSL_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d106      	bne.n	8005c1c <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005c0e:	ed97 0a00 	vldr	s0, [r7]
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f8fe 	bl	8005e14 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	e005      	b.n	8005c28 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005c1c:	ed97 0a00 	vldr	s0, [r7]
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f983 	bl	8005f2c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8005c26:	4603      	mov	r3, r0
  }
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3708      	adds	r7, #8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <LSM6DSL_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	dd0b      	ble.n	8005c58 <LSM6DSL_ACC_SetFullScale+0x28>
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	dd06      	ble.n	8005c54 <LSM6DSL_ACC_SetFullScale+0x24>
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b08      	cmp	r3, #8
 8005c4a:	dc01      	bgt.n	8005c50 <LSM6DSL_ACC_SetFullScale+0x20>
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e004      	b.n	8005c5a <LSM6DSL_ACC_SetFullScale+0x2a>
 8005c50:	2301      	movs	r3, #1
 8005c52:	e002      	b.n	8005c5a <LSM6DSL_ACC_SetFullScale+0x2a>
 8005c54:	2302      	movs	r3, #2
 8005c56:	e000      	b.n	8005c5a <LSM6DSL_ACC_SetFullScale+0x2a>
 8005c58:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8005c5a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	331c      	adds	r3, #28
 8005c60:	7bfa      	ldrb	r2, [r7, #15]
 8005c62:	4611      	mov	r1, r2
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 fa49 	bl	80060fc <lsm6dsl_xl_full_scale_set>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8005c70:	f04f 33ff 	mov.w	r3, #4294967295
 8005c74:	e000      	b.n	8005c78 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <LSM6DSL_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	331c      	adds	r3, #28
 8005c8e:	f107 0208 	add.w	r2, r7, #8
 8005c92:	4611      	mov	r1, r2
 8005c94:	4618      	mov	r0, r3
 8005c96:	f000 fb27 	bl	80062e8 <lsm6dsl_acceleration_raw_get>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8005ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca4:	e00c      	b.n	8005cc0 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005ca6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005cae:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005cb6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <LSM6DSL_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8005cd2:	f04f 0300 	mov.w	r3, #0
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	331c      	adds	r3, #28
 8005cdc:	f107 0210 	add.w	r2, r7, #16
 8005ce0:	4611      	mov	r1, r2
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 fb00 	bl	80062e8 <lsm6dsl_acceleration_raw_get>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d002      	beq.n	8005cf4 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8005cee:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf2:	e03c      	b.n	8005d6e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8005cf4:	f107 030c 	add.w	r3, r7, #12
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7ff ff36 	bl	8005b6c <LSM6DSL_ACC_GetSensitivity>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d002      	beq.n	8005d0c <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8005d06:	f04f 33ff 	mov.w	r3, #4294967295
 8005d0a:	e030      	b.n	8005d6e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8005d0c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005d10:	ee07 3a90 	vmov	s15, r3
 8005d14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d18:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d24:	ee17 2a90 	vmov	r2, s15
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8005d2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005d30:	ee07 3a90 	vmov	s15, r3
 8005d34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d38:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d44:	ee17 2a90 	vmov	r2, s15
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8005d4c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005d50:	ee07 3a90 	vmov	s15, r3
 8005d54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d58:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d64:	ee17 2a90 	vmov	r2, s15
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b082      	sub	sp, #8
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
 8005d7e:	460b      	mov	r3, r1
 8005d80:	70fb      	strb	r3, [r7, #3]
 8005d82:	4613      	mov	r3, r2
 8005d84:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f103 001c 	add.w	r0, r3, #28
 8005d8c:	1cba      	adds	r2, r7, #2
 8005d8e:	78f9      	ldrb	r1, [r7, #3]
 8005d90:	2301      	movs	r3, #1
 8005d92:	f000 f99b 	bl	80060cc <lsm6dsl_write_reg>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8005d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005da0:	e000      	b.n	8005da4 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <LSM6DSL_ACC_Set_INT1_DRDY>:
  * @param  pObj the device pObj
  * @param  Val the value of int1_drdy_xl in reg INT1_CTRL
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Set_INT1_DRDY(LSM6DSL_Object_t *pObj, uint8_t Val)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	460b      	mov	r3, r1
 8005db6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int1_route_t reg;

  if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &reg) != LSM6DSL_OK)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	331c      	adds	r3, #28
 8005dbc:	f107 020c 	add.w	r2, r7, #12
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 fc75 	bl	80066b2 <lsm6dsl_pin_int1_route_get>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d002      	beq.n	8005dd4 <LSM6DSL_ACC_Set_INT1_DRDY+0x28>
  {
    return LSM6DSL_ERROR;
 8005dce:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd2:	e01b      	b.n	8005e0c <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  if (Val <= 1)
 8005dd4:	78fb      	ldrb	r3, [r7, #3]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d811      	bhi.n	8005dfe <LSM6DSL_ACC_Set_INT1_DRDY+0x52>
  {
    reg.int1_drdy_xl = Val;
 8005dda:	78fb      	ldrb	r3, [r7, #3]
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	7b3b      	ldrb	r3, [r7, #12]
 8005de4:	f362 0300 	bfi	r3, r2, #0, #1
 8005de8:	733b      	strb	r3, [r7, #12]
  else
  {
    return LSM6DSL_ERROR;
  }

  if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	331c      	adds	r3, #28
 8005dee:	68f9      	ldr	r1, [r7, #12]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 fafb 	bl	80063ec <lsm6dsl_pin_int1_route_set>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d006      	beq.n	8005e0a <LSM6DSL_ACC_Set_INT1_DRDY+0x5e>
 8005dfc:	e002      	b.n	8005e04 <LSM6DSL_ACC_Set_INT1_DRDY+0x58>
    return LSM6DSL_ERROR;
 8005dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8005e02:	e003      	b.n	8005e0c <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  {
    return LSM6DSL_ERROR;
 8005e04:	f04f 33ff 	mov.w	r3, #4294967295
 8005e08:	e000      	b.n	8005e0c <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  return LSM6DSL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8005e20:	edd7 7a00 	vldr	s15, [r7]
 8005e24:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005e28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e30:	d801      	bhi.n	8005e36 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8005e32:	2301      	movs	r3, #1
 8005e34:	e058      	b.n	8005ee8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005e36:	edd7 7a00 	vldr	s15, [r7]
 8005e3a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005e3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e46:	d801      	bhi.n	8005e4c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8005e48:	2302      	movs	r3, #2
 8005e4a:	e04d      	b.n	8005ee8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005e4c:	edd7 7a00 	vldr	s15, [r7]
 8005e50:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005f10 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8005e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e5c:	d801      	bhi.n	8005e62 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e042      	b.n	8005ee8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005e62:	edd7 7a00 	vldr	s15, [r7]
 8005e66:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005f14 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8005e6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e72:	d801      	bhi.n	8005e78 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8005e74:	2304      	movs	r3, #4
 8005e76:	e037      	b.n	8005ee8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005e78:	edd7 7a00 	vldr	s15, [r7]
 8005e7c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005f18 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8005e80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e88:	d801      	bhi.n	8005e8e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8005e8a:	2305      	movs	r3, #5
 8005e8c:	e02c      	b.n	8005ee8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005e8e:	edd7 7a00 	vldr	s15, [r7]
 8005e92:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005f1c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8005e96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e9e:	d801      	bhi.n	8005ea4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005ea0:	2306      	movs	r3, #6
 8005ea2:	e021      	b.n	8005ee8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005ea4:	edd7 7a00 	vldr	s15, [r7]
 8005ea8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005f20 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8005eac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eb4:	d801      	bhi.n	8005eba <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8005eb6:	2307      	movs	r3, #7
 8005eb8:	e016      	b.n	8005ee8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005eba:	edd7 7a00 	vldr	s15, [r7]
 8005ebe:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005f24 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8005ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eca:	d801      	bhi.n	8005ed0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8005ecc:	2308      	movs	r3, #8
 8005ece:	e00b      	b.n	8005ee8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005ed0:	edd7 7a00 	vldr	s15, [r7]
 8005ed4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005f28 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8005ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ee0:	d801      	bhi.n	8005ee6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8005ee2:	2309      	movs	r3, #9
 8005ee4:	e000      	b.n	8005ee8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005ee6:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8005ee8:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
            :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	331c      	adds	r3, #28
 8005eee:	7bfa      	ldrb	r2, [r7, #15]
 8005ef0:	4611      	mov	r1, r2
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 f960 	bl	80061b8 <lsm6dsl_xl_data_rate_set>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d002      	beq.n	8005f04 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8005efe:	f04f 33ff 	mov.w	r3, #4294967295
 8005f02:	e000      	b.n	8005f06 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	42500000 	.word	0x42500000
 8005f14:	42d00000 	.word	0x42d00000
 8005f18:	43500000 	.word	0x43500000
 8005f1c:	43d00000 	.word	0x43d00000
 8005f20:	44504000 	.word	0x44504000
 8005f24:	44cf8000 	.word	0x44cf8000
 8005f28:	45502000 	.word	0x45502000

08005f2c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8005f38:	edd7 7a00 	vldr	s15, [r7]
 8005f3c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005f40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f48:	d801      	bhi.n	8005f4e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e058      	b.n	8006000 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005f4e:	edd7 7a00 	vldr	s15, [r7]
 8005f52:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005f56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f5e:	d801      	bhi.n	8005f64 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8005f60:	2302      	movs	r3, #2
 8005f62:	e04d      	b.n	8006000 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005f64:	edd7 7a00 	vldr	s15, [r7]
 8005f68:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8006014 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8005f6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f74:	d801      	bhi.n	8005f7a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8005f76:	2303      	movs	r3, #3
 8005f78:	e042      	b.n	8006000 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005f7a:	edd7 7a00 	vldr	s15, [r7]
 8005f7e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006018 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8005f82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f8a:	d801      	bhi.n	8005f90 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8005f8c:	2304      	movs	r3, #4
 8005f8e:	e037      	b.n	8006000 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005f90:	edd7 7a00 	vldr	s15, [r7]
 8005f94:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800601c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8005f98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fa0:	d801      	bhi.n	8005fa6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8005fa2:	2305      	movs	r3, #5
 8005fa4:	e02c      	b.n	8006000 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005fa6:	edd7 7a00 	vldr	s15, [r7]
 8005faa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006020 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8005fae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb6:	d801      	bhi.n	8005fbc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005fb8:	2306      	movs	r3, #6
 8005fba:	e021      	b.n	8006000 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005fbc:	edd7 7a00 	vldr	s15, [r7]
 8005fc0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006024 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8005fc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fcc:	d801      	bhi.n	8005fd2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8005fce:	2307      	movs	r3, #7
 8005fd0:	e016      	b.n	8006000 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005fd2:	edd7 7a00 	vldr	s15, [r7]
 8005fd6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8006028 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8005fda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fe2:	d801      	bhi.n	8005fe8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8005fe4:	2308      	movs	r3, #8
 8005fe6:	e00b      	b.n	8006000 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005fe8:	edd7 7a00 	vldr	s15, [r7]
 8005fec:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800602c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005ff0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ff8:	d801      	bhi.n	8005ffe <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8005ffa:	2309      	movs	r3, #9
 8005ffc:	e000      	b.n	8006000 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005ffe:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                  : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                  : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                  : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                  :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	42500000 	.word	0x42500000
 8006018:	42d00000 	.word	0x42d00000
 800601c:	43500000 	.word	0x43500000
 8006020:	43d00000 	.word	0x43d00000
 8006024:	44504000 	.word	0x44504000
 8006028:	44cf8000 	.word	0x44cf8000
 800602c:	45502000 	.word	0x45502000

08006030 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006030:	b590      	push	{r4, r7, lr}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	607a      	str	r2, [r7, #4]
 800603a:	461a      	mov	r2, r3
 800603c:	460b      	mov	r3, r1
 800603e:	72fb      	strb	r3, [r7, #11]
 8006040:	4613      	mov	r3, r2
 8006042:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	695c      	ldr	r4, [r3, #20]
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	7b1b      	ldrb	r3, [r3, #12]
 8006050:	b298      	uxth	r0, r3
 8006052:	7afb      	ldrb	r3, [r7, #11]
 8006054:	b299      	uxth	r1, r3
 8006056:	893b      	ldrh	r3, [r7, #8]
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	47a0      	blx	r4
 800605c:	4603      	mov	r3, r0
}
 800605e:	4618      	mov	r0, r3
 8006060:	371c      	adds	r7, #28
 8006062:	46bd      	mov	sp, r7
 8006064:	bd90      	pop	{r4, r7, pc}

08006066 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006066:	b590      	push	{r4, r7, lr}
 8006068:	b087      	sub	sp, #28
 800606a:	af00      	add	r7, sp, #0
 800606c:	60f8      	str	r0, [r7, #12]
 800606e:	607a      	str	r2, [r7, #4]
 8006070:	461a      	mov	r2, r3
 8006072:	460b      	mov	r3, r1
 8006074:	72fb      	strb	r3, [r7, #11]
 8006076:	4613      	mov	r3, r2
 8006078:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	691c      	ldr	r4, [r3, #16]
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	7b1b      	ldrb	r3, [r3, #12]
 8006086:	b298      	uxth	r0, r3
 8006088:	7afb      	ldrb	r3, [r7, #11]
 800608a:	b299      	uxth	r1, r3
 800608c:	893b      	ldrh	r3, [r7, #8]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	47a0      	blx	r4
 8006092:	4603      	mov	r3, r0
}
 8006094:	4618      	mov	r0, r3
 8006096:	371c      	adds	r7, #28
 8006098:	46bd      	mov	sp, r7
 800609a:	bd90      	pop	{r4, r7, pc}

0800609c <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800609c:	b590      	push	{r4, r7, lr}
 800609e:	b087      	sub	sp, #28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	607a      	str	r2, [r7, #4]
 80060a6:	461a      	mov	r2, r3
 80060a8:	460b      	mov	r3, r1
 80060aa:	72fb      	strb	r3, [r7, #11]
 80060ac:	4613      	mov	r3, r2
 80060ae:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	685c      	ldr	r4, [r3, #4]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6898      	ldr	r0, [r3, #8]
 80060b8:	893b      	ldrh	r3, [r7, #8]
 80060ba:	7af9      	ldrb	r1, [r7, #11]
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	47a0      	blx	r4
 80060c0:	6178      	str	r0, [r7, #20]

  return ret;
 80060c2:	697b      	ldr	r3, [r7, #20]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	371c      	adds	r7, #28
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd90      	pop	{r4, r7, pc}

080060cc <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80060cc:	b590      	push	{r4, r7, lr}
 80060ce:	b087      	sub	sp, #28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	607a      	str	r2, [r7, #4]
 80060d6:	461a      	mov	r2, r3
 80060d8:	460b      	mov	r3, r1
 80060da:	72fb      	strb	r3, [r7, #11]
 80060dc:	4613      	mov	r3, r2
 80060de:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681c      	ldr	r4, [r3, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6898      	ldr	r0, [r3, #8]
 80060e8:	893b      	ldrh	r3, [r7, #8]
 80060ea:	7af9      	ldrb	r1, [r7, #11]
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	47a0      	blx	r4
 80060f0:	6178      	str	r0, [r7, #20]

  return ret;
 80060f2:	697b      	ldr	r3, [r7, #20]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	371c      	adds	r7, #28
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd90      	pop	{r4, r7, pc}

080060fc <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	460b      	mov	r3, r1
 8006106:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006108:	f107 0208 	add.w	r2, r7, #8
 800610c:	2301      	movs	r3, #1
 800610e:	2110      	movs	r1, #16
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7ff ffc3 	bl	800609c <lsm6dsl_read_reg>
 8006116:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10f      	bne.n	800613e <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 800611e:	78fb      	ldrb	r3, [r7, #3]
 8006120:	f003 0303 	and.w	r3, r3, #3
 8006124:	b2da      	uxtb	r2, r3
 8006126:	7a3b      	ldrb	r3, [r7, #8]
 8006128:	f362 0383 	bfi	r3, r2, #2, #2
 800612c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800612e:	f107 0208 	add.w	r2, r7, #8
 8006132:	2301      	movs	r3, #1
 8006134:	2110      	movs	r1, #16
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f7ff ffc8 	bl	80060cc <lsm6dsl_write_reg>
 800613c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800613e:	68fb      	ldr	r3, [r7, #12]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006152:	f107 0208 	add.w	r2, r7, #8
 8006156:	2301      	movs	r3, #1
 8006158:	2110      	movs	r1, #16
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7ff ff9e 	bl	800609c <lsm6dsl_read_reg>
 8006160:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.fs_xl)
 8006162:	7a3b      	ldrb	r3, [r7, #8]
 8006164:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b03      	cmp	r3, #3
 800616c:	d81a      	bhi.n	80061a4 <lsm6dsl_xl_full_scale_get+0x5c>
 800616e:	a201      	add	r2, pc, #4	; (adr r2, 8006174 <lsm6dsl_xl_full_scale_get+0x2c>)
 8006170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006174:	08006185 	.word	0x08006185
 8006178:	0800618d 	.word	0x0800618d
 800617c:	08006195 	.word	0x08006195
 8006180:	0800619d 	.word	0x0800619d
  {
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2200      	movs	r2, #0
 8006188:	701a      	strb	r2, [r3, #0]
      break;
 800618a:	e00f      	b.n	80061ac <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	2201      	movs	r2, #1
 8006190:	701a      	strb	r2, [r3, #0]
      break;
 8006192:	e00b      	b.n	80061ac <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2202      	movs	r2, #2
 8006198:	701a      	strb	r2, [r3, #0]
      break;
 800619a:	e007      	b.n	80061ac <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2203      	movs	r2, #3
 80061a0:	701a      	strb	r2, [r3, #0]
      break;
 80061a2:	e003      	b.n	80061ac <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	2204      	movs	r2, #4
 80061a8:	701a      	strb	r2, [r3, #0]
      break;
 80061aa:	bf00      	nop
  }

  return ret;
 80061ac:	68fb      	ldr	r3, [r7, #12]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop

080061b8 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	460b      	mov	r3, r1
 80061c2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80061c4:	f107 0208 	add.w	r2, r7, #8
 80061c8:	2301      	movs	r3, #1
 80061ca:	2110      	movs	r1, #16
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7ff ff65 	bl	800609c <lsm6dsl_read_reg>
 80061d2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10f      	bne.n	80061fa <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 80061da:	78fb      	ldrb	r3, [r7, #3]
 80061dc:	f003 030f 	and.w	r3, r3, #15
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	7a3b      	ldrb	r3, [r7, #8]
 80061e4:	f362 1307 	bfi	r3, r2, #4, #4
 80061e8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80061ea:	f107 0208 	add.w	r2, r7, #8
 80061ee:	2301      	movs	r3, #1
 80061f0:	2110      	movs	r1, #16
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7ff ff6a 	bl	80060cc <lsm6dsl_write_reg>
 80061f8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80061fa:	68fb      	ldr	r3, [r7, #12]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	460b      	mov	r3, r1
 800620e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006210:	f107 0208 	add.w	r2, r7, #8
 8006214:	2301      	movs	r3, #1
 8006216:	2111      	movs	r1, #17
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7ff ff3f 	bl	800609c <lsm6dsl_read_reg>
 800621e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10f      	bne.n	8006246 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8006226:	78fb      	ldrb	r3, [r7, #3]
 8006228:	f003 0307 	and.w	r3, r3, #7
 800622c:	b2da      	uxtb	r2, r3
 800622e:	7a3b      	ldrb	r3, [r7, #8]
 8006230:	f362 0343 	bfi	r3, r2, #1, #3
 8006234:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006236:	f107 0208 	add.w	r2, r7, #8
 800623a:	2301      	movs	r3, #1
 800623c:	2111      	movs	r1, #17
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7ff ff44 	bl	80060cc <lsm6dsl_write_reg>
 8006244:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006246:	68fb      	ldr	r3, [r7, #12]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	460b      	mov	r3, r1
 800625a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800625c:	f107 0208 	add.w	r2, r7, #8
 8006260:	2301      	movs	r3, #1
 8006262:	2111      	movs	r1, #17
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f7ff ff19 	bl	800609c <lsm6dsl_read_reg>
 800626a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10f      	bne.n	8006292 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8006272:	78fb      	ldrb	r3, [r7, #3]
 8006274:	f003 030f 	and.w	r3, r3, #15
 8006278:	b2da      	uxtb	r2, r3
 800627a:	7a3b      	ldrb	r3, [r7, #8]
 800627c:	f362 1307 	bfi	r3, r2, #4, #4
 8006280:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006282:	f107 0208 	add.w	r2, r7, #8
 8006286:	2301      	movs	r3, #1
 8006288:	2111      	movs	r1, #17
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7ff ff1e 	bl	80060cc <lsm6dsl_write_reg>
 8006290:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006292:	68fb      	ldr	r3, [r7, #12]
}
 8006294:	4618      	mov	r0, r3
 8006296:	3710      	adds	r7, #16
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	460b      	mov	r3, r1
 80062a6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80062a8:	f107 0208 	add.w	r2, r7, #8
 80062ac:	2301      	movs	r3, #1
 80062ae:	2112      	movs	r1, #18
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7ff fef3 	bl	800609c <lsm6dsl_read_reg>
 80062b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10f      	bne.n	80062de <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 80062be:	78fb      	ldrb	r3, [r7, #3]
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	7a3b      	ldrb	r3, [r7, #8]
 80062c8:	f362 1386 	bfi	r3, r2, #6, #1
 80062cc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80062ce:	f107 0208 	add.w	r2, r7, #8
 80062d2:	2301      	movs	r3, #1
 80062d4:	2112      	movs	r1, #18
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7ff fef8 	bl	80060cc <lsm6dsl_write_reg>
 80062dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80062de:	68fb      	ldr	r3, [r7, #12]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 80062f2:	f107 020c 	add.w	r2, r7, #12
 80062f6:	2306      	movs	r3, #6
 80062f8:	2128      	movs	r1, #40	; 0x28
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f7ff fece 	bl	800609c <lsm6dsl_read_reg>
 8006300:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006302:	7b7b      	ldrb	r3, [r7, #13]
 8006304:	b21a      	sxth	r2, r3
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006310:	b29b      	uxth	r3, r3
 8006312:	021b      	lsls	r3, r3, #8
 8006314:	b29a      	uxth	r2, r3
 8006316:	7b3b      	ldrb	r3, [r7, #12]
 8006318:	b29b      	uxth	r3, r3
 800631a:	4413      	add	r3, r2
 800631c:	b29b      	uxth	r3, r3
 800631e:	b21a      	sxth	r2, r3
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006324:	7bfa      	ldrb	r2, [r7, #15]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	3302      	adds	r3, #2
 800632a:	b212      	sxth	r2, r2
 800632c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	3302      	adds	r3, #2
 8006332:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006336:	b29b      	uxth	r3, r3
 8006338:	021b      	lsls	r3, r3, #8
 800633a:	b29a      	uxth	r2, r3
 800633c:	7bbb      	ldrb	r3, [r7, #14]
 800633e:	b29b      	uxth	r3, r3
 8006340:	4413      	add	r3, r2
 8006342:	b29a      	uxth	r2, r3
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	3302      	adds	r3, #2
 8006348:	b212      	sxth	r2, r2
 800634a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800634c:	7c7a      	ldrb	r2, [r7, #17]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	3304      	adds	r3, #4
 8006352:	b212      	sxth	r2, r2
 8006354:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	3304      	adds	r3, #4
 800635a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800635e:	b29b      	uxth	r3, r3
 8006360:	021b      	lsls	r3, r3, #8
 8006362:	b29a      	uxth	r2, r3
 8006364:	7c3b      	ldrb	r3, [r7, #16]
 8006366:	b29b      	uxth	r3, r3
 8006368:	4413      	add	r3, r2
 800636a:	b29a      	uxth	r2, r3
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	3304      	adds	r3, #4
 8006370:	b212      	sxth	r2, r2
 8006372:	801a      	strh	r2, [r3, #0]

  return ret;
 8006374:	697b      	ldr	r3, [r7, #20]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3718      	adds	r7, #24
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b084      	sub	sp, #16
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
 8006386:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8006388:	2301      	movs	r3, #1
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	210f      	movs	r1, #15
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7ff fe84 	bl	800609c <lsm6dsl_read_reg>
 8006394:	60f8      	str	r0, [r7, #12]

  return ret;
 8006396:	68fb      	ldr	r3, [r7, #12]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	460b      	mov	r3, r1
 80063aa:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80063ac:	f107 0208 	add.w	r2, r7, #8
 80063b0:	2301      	movs	r3, #1
 80063b2:	2112      	movs	r1, #18
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f7ff fe71 	bl	800609c <lsm6dsl_read_reg>
 80063ba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10f      	bne.n	80063e2 <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 80063c2:	78fb      	ldrb	r3, [r7, #3]
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	7a3b      	ldrb	r3, [r7, #8]
 80063cc:	f362 0382 	bfi	r3, r2, #2, #1
 80063d0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80063d2:	f107 0208 	add.w	r2, r7, #8
 80063d6:	2301      	movs	r3, #1
 80063d8:	2112      	movs	r1, #18
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f7ff fe76 	bl	80060cc <lsm6dsl_write_reg>
 80063e0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80063e2:	68fb      	ldr	r3, [r7, #12]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b08a      	sub	sp, #40	; 0x28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 80063f6:	f107 021c 	add.w	r2, r7, #28
 80063fa:	2301      	movs	r3, #1
 80063fc:	210d      	movs	r1, #13
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f7ff fe4c 	bl	800609c <lsm6dsl_read_reg>
 8006404:	6278      	str	r0, [r7, #36]	; 0x24

  if (ret == 0)
 8006406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006408:	2b00      	cmp	r3, #0
 800640a:	d147      	bne.n	800649c <lsm6dsl_pin_int1_route_set+0xb0>
  {
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 800640c:	783b      	ldrb	r3, [r7, #0]
 800640e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006412:	b2da      	uxtb	r2, r3
 8006414:	7f3b      	ldrb	r3, [r7, #28]
 8006416:	f362 0300 	bfi	r3, r2, #0, #1
 800641a:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 800641c:	783b      	ldrb	r3, [r7, #0]
 800641e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006422:	b2da      	uxtb	r2, r3
 8006424:	7f3b      	ldrb	r3, [r7, #28]
 8006426:	f362 0341 	bfi	r3, r2, #1, #1
 800642a:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 800642c:	783b      	ldrb	r3, [r7, #0]
 800642e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006432:	b2da      	uxtb	r2, r3
 8006434:	7f3b      	ldrb	r3, [r7, #28]
 8006436:	f362 0382 	bfi	r3, r2, #2, #1
 800643a:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 800643c:	783b      	ldrb	r3, [r7, #0]
 800643e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006442:	b2da      	uxtb	r2, r3
 8006444:	7f3b      	ldrb	r3, [r7, #28]
 8006446:	f362 03c3 	bfi	r3, r2, #3, #1
 800644a:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 800644c:	783b      	ldrb	r3, [r7, #0]
 800644e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006452:	b2da      	uxtb	r2, r3
 8006454:	7f3b      	ldrb	r3, [r7, #28]
 8006456:	f362 1304 	bfi	r3, r2, #4, #1
 800645a:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 800645c:	783b      	ldrb	r3, [r7, #0]
 800645e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006462:	b2da      	uxtb	r2, r3
 8006464:	7f3b      	ldrb	r3, [r7, #28]
 8006466:	f362 1345 	bfi	r3, r2, #5, #1
 800646a:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 800646c:	783b      	ldrb	r3, [r7, #0]
 800646e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006472:	b2da      	uxtb	r2, r3
 8006474:	7f3b      	ldrb	r3, [r7, #28]
 8006476:	f362 1386 	bfi	r3, r2, #6, #1
 800647a:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 800647c:	783b      	ldrb	r3, [r7, #0]
 800647e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006482:	b2da      	uxtb	r2, r3
 8006484:	7f3b      	ldrb	r3, [r7, #28]
 8006486:	f362 13c7 	bfi	r3, r2, #7, #1
 800648a:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 800648c:	f107 021c 	add.w	r2, r7, #28
 8006490:	2301      	movs	r3, #1
 8006492:	210d      	movs	r1, #13
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7ff fe19 	bl	80060cc <lsm6dsl_write_reg>
 800649a:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d107      	bne.n	80064b2 <lsm6dsl_pin_int1_route_set+0xc6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80064a2:	f107 0218 	add.w	r2, r7, #24
 80064a6:	2301      	movs	r3, #1
 80064a8:	215e      	movs	r1, #94	; 0x5e
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7ff fdf6 	bl	800609c <lsm6dsl_read_reg>
 80064b0:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d107      	bne.n	80064c8 <lsm6dsl_pin_int1_route_set+0xdc>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 80064b8:	f107 0214 	add.w	r2, r7, #20
 80064bc:	2301      	movs	r3, #1
 80064be:	215f      	movs	r1, #95	; 0x5f
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7ff fdeb 	bl	800609c <lsm6dsl_read_reg>
 80064c6:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 80064c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d147      	bne.n	800655e <lsm6dsl_pin_int1_route_set+0x172>
  {
    md1_cfg.int1_timer           = val.int1_timer;
 80064ce:	787b      	ldrb	r3, [r7, #1]
 80064d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80064d4:	b2da      	uxtb	r2, r3
 80064d6:	7e3b      	ldrb	r3, [r7, #24]
 80064d8:	f362 0300 	bfi	r3, r2, #0, #1
 80064dc:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_tilt            = val.int1_tilt;
 80064de:	787b      	ldrb	r3, [r7, #1]
 80064e0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	7e3b      	ldrb	r3, [r7, #24]
 80064e8:	f362 0341 	bfi	r3, r2, #1, #1
 80064ec:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_6d              = val.int1_6d;
 80064ee:	787b      	ldrb	r3, [r7, #1]
 80064f0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80064f4:	b2da      	uxtb	r2, r3
 80064f6:	7e3b      	ldrb	r3, [r7, #24]
 80064f8:	f362 0382 	bfi	r3, r2, #2, #1
 80064fc:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_double_tap      = val.int1_double_tap;
 80064fe:	787b      	ldrb	r3, [r7, #1]
 8006500:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006504:	b2da      	uxtb	r2, r3
 8006506:	7e3b      	ldrb	r3, [r7, #24]
 8006508:	f362 03c3 	bfi	r3, r2, #3, #1
 800650c:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_ff              = val.int1_ff;
 800650e:	787b      	ldrb	r3, [r7, #1]
 8006510:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006514:	b2da      	uxtb	r2, r3
 8006516:	7e3b      	ldrb	r3, [r7, #24]
 8006518:	f362 1304 	bfi	r3, r2, #4, #1
 800651c:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_wu              = val.int1_wu;
 800651e:	787b      	ldrb	r3, [r7, #1]
 8006520:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006524:	b2da      	uxtb	r2, r3
 8006526:	7e3b      	ldrb	r3, [r7, #24]
 8006528:	f362 1345 	bfi	r3, r2, #5, #1
 800652c:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_single_tap      = val.int1_single_tap;
 800652e:	787b      	ldrb	r3, [r7, #1]
 8006530:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006534:	b2da      	uxtb	r2, r3
 8006536:	7e3b      	ldrb	r3, [r7, #24]
 8006538:	f362 1386 	bfi	r3, r2, #6, #1
 800653c:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_inact_state     = val.int1_inact_state;
 800653e:	787b      	ldrb	r3, [r7, #1]
 8006540:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006544:	b2da      	uxtb	r2, r3
 8006546:	7e3b      	ldrb	r3, [r7, #24]
 8006548:	f362 13c7 	bfi	r3, r2, #7, #1
 800654c:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 800654e:	f107 0218 	add.w	r2, r7, #24
 8006552:	2301      	movs	r3, #1
 8006554:	215e      	movs	r1, #94	; 0x5e
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7ff fdb8 	bl	80060cc <lsm6dsl_write_reg>
 800655c:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	2b00      	cmp	r3, #0
 8006562:	d107      	bne.n	8006574 <lsm6dsl_pin_int1_route_set+0x188>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8006564:	f107 0210 	add.w	r2, r7, #16
 8006568:	2301      	movs	r3, #1
 800656a:	2113      	movs	r1, #19
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f7ff fd95 	bl	800609c <lsm6dsl_read_reg>
 8006572:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10f      	bne.n	800659a <lsm6dsl_pin_int1_route_set+0x1ae>
  {
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 800657a:	78bb      	ldrb	r3, [r7, #2]
 800657c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006580:	b2da      	uxtb	r2, r3
 8006582:	7c3b      	ldrb	r3, [r7, #16]
 8006584:	f362 1304 	bfi	r3, r2, #4, #1
 8006588:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 800658a:	f107 0210 	add.w	r2, r7, #16
 800658e:	2301      	movs	r3, #1
 8006590:	2113      	movs	r1, #19
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f7ff fd9a 	bl	80060cc <lsm6dsl_write_reg>
 8006598:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	2b00      	cmp	r3, #0
 800659e:	d107      	bne.n	80065b0 <lsm6dsl_pin_int1_route_set+0x1c4>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 80065a0:	f107 0220 	add.w	r2, r7, #32
 80065a4:	2301      	movs	r3, #1
 80065a6:	211a      	movs	r1, #26
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f7ff fd77 	bl	800609c <lsm6dsl_read_reg>
 80065ae:	6278      	str	r0, [r7, #36]	; 0x24
                           (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d111      	bne.n	80065da <lsm6dsl_pin_int1_route_set+0x1ee>
  {
    master_config.drdy_on_int1   = val.den_drdy_int1;
 80065b6:	78bb      	ldrb	r3, [r7, #2]
 80065b8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80065bc:	b2da      	uxtb	r2, r3
 80065be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80065c2:	f362 13c7 	bfi	r3, r2, #7, #1
 80065c6:	f887 3020 	strb.w	r3, [r7, #32]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 80065ca:	f107 0220 	add.w	r2, r7, #32
 80065ce:	2301      	movs	r3, #1
 80065d0:	211a      	movs	r1, #26
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7ff fd7a 	bl	80060cc <lsm6dsl_write_reg>
 80065d8:	6278      	str	r0, [r7, #36]	; 0x24
                            (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d158      	bne.n	8006692 <lsm6dsl_pin_int1_route_set+0x2a6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 80065e0:	f107 020c 	add.w	r2, r7, #12
 80065e4:	2301      	movs	r3, #1
 80065e6:	2158      	movs	r1, #88	; 0x58
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7ff fd57 	bl	800609c <lsm6dsl_read_reg>
 80065ee:	6278      	str	r0, [r7, #36]	; 0x24

    if ((val.int1_6d != 0x00U) ||
 80065f0:	787b      	ldrb	r3, [r7, #1]
 80065f2:	f003 0304 	and.w	r3, r3, #4
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d141      	bne.n	8006680 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 80065fc:	787b      	ldrb	r3, [r7, #1]
 80065fe:	f003 0310 	and.w	r3, r3, #16
 8006602:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 8006604:	2b00      	cmp	r3, #0
 8006606:	d13b      	bne.n	8006680 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 8006608:	787b      	ldrb	r3, [r7, #1]
 800660a:	f003 0320 	and.w	r3, r3, #32
 800660e:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 8006610:	2b00      	cmp	r3, #0
 8006612:	d135      	bne.n	8006680 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 8006614:	787b      	ldrb	r3, [r7, #1]
 8006616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661a:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 800661c:	2b00      	cmp	r3, #0
 800661e:	d12f      	bne.n	8006680 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 8006620:	787b      	ldrb	r3, [r7, #1]
 8006622:	f003 0308 	and.w	r3, r3, #8
 8006626:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 8006628:	2b00      	cmp	r3, #0
 800662a:	d129      	bne.n	8006680 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U) ||
 800662c:	787b      	ldrb	r3, [r7, #1]
 800662e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006632:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 8006634:	2b00      	cmp	r3, #0
 8006636:	d123      	bne.n	8006680 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 8006638:	7d3b      	ldrb	r3, [r7, #20]
 800663a:	f003 0304 	and.w	r3, r3, #4
 800663e:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U) ||
 8006640:	2b00      	cmp	r3, #0
 8006642:	d11d      	bne.n	8006680 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 8006644:	7d3b      	ldrb	r3, [r7, #20]
 8006646:	f003 0310 	and.w	r3, r3, #16
 800664a:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 800664c:	2b00      	cmp	r3, #0
 800664e:	d117      	bne.n	8006680 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 8006650:	7d3b      	ldrb	r3, [r7, #20]
 8006652:	f003 0320 	and.w	r3, r3, #32
 8006656:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 8006658:	2b00      	cmp	r3, #0
 800665a:	d111      	bne.n	8006680 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 800665c:	7d3b      	ldrb	r3, [r7, #20]
 800665e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006662:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10b      	bne.n	8006680 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 8006668:	7d3b      	ldrb	r3, [r7, #20]
 800666a:	f003 0308 	and.w	r3, r3, #8
 800666e:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 8006670:	2b00      	cmp	r3, #0
 8006672:	d105      	bne.n	8006680 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state != 0x00U))
 8006674:	7d3b      	ldrb	r3, [r7, #20]
 8006676:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800667a:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 800667c:	2b00      	cmp	r3, #0
 800667e:	d004      	beq.n	800668a <lsm6dsl_pin_int1_route_set+0x29e>
    {
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 8006680:	7b3b      	ldrb	r3, [r7, #12]
 8006682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006686:	733b      	strb	r3, [r7, #12]
 8006688:	e003      	b.n	8006692 <lsm6dsl_pin_int1_route_set+0x2a6>
    }

    else
    {
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 800668a:	7b3b      	ldrb	r3, [r7, #12]
 800668c:	f36f 13c7 	bfc	r3, #7, #1
 8006690:	733b      	strb	r3, [r7, #12]
    }
  }

  if (ret == 0)
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	2b00      	cmp	r3, #0
 8006696:	d107      	bne.n	80066a8 <lsm6dsl_pin_int1_route_set+0x2bc>
  {
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8006698:	f107 020c 	add.w	r2, r7, #12
 800669c:	2301      	movs	r3, #1
 800669e:	2158      	movs	r1, #88	; 0x58
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f7ff fd13 	bl	80060cc <lsm6dsl_write_reg>
 80066a6:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return ret;
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3728      	adds	r7, #40	; 0x28
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b088      	sub	sp, #32
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	6039      	str	r1, [r7, #0]
  lsm6dsl_int1_ctrl_t int1_ctrl;
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 80066bc:	f107 0214 	add.w	r2, r7, #20
 80066c0:	2301      	movs	r3, #1
 80066c2:	210d      	movs	r1, #13
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7ff fce9 	bl	800609c <lsm6dsl_read_reg>
 80066ca:	61f8      	str	r0, [r7, #28]

  if (ret == 0)
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f040 80c0 	bne.w	8006854 <lsm6dsl_pin_int1_route_get+0x1a2>
  {
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 80066d4:	7d3b      	ldrb	r3, [r7, #20]
 80066d6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80066da:	b2d9      	uxtb	r1, r3
 80066dc:	683a      	ldr	r2, [r7, #0]
 80066de:	7813      	ldrb	r3, [r2, #0]
 80066e0:	f361 0300 	bfi	r3, r1, #0, #1
 80066e4:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 80066e6:	7d3b      	ldrb	r3, [r7, #20]
 80066e8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80066ec:	b2d9      	uxtb	r1, r3
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	7813      	ldrb	r3, [r2, #0]
 80066f2:	f361 0341 	bfi	r3, r1, #1, #1
 80066f6:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 80066f8:	7d3b      	ldrb	r3, [r7, #20]
 80066fa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80066fe:	b2d9      	uxtb	r1, r3
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	7813      	ldrb	r3, [r2, #0]
 8006704:	f361 0382 	bfi	r3, r1, #2, #1
 8006708:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 800670a:	7d3b      	ldrb	r3, [r7, #20]
 800670c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006710:	b2d9      	uxtb	r1, r3
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	7813      	ldrb	r3, [r2, #0]
 8006716:	f361 03c3 	bfi	r3, r1, #3, #1
 800671a:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 800671c:	7d3b      	ldrb	r3, [r7, #20]
 800671e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006722:	b2d9      	uxtb	r1, r3
 8006724:	683a      	ldr	r2, [r7, #0]
 8006726:	7813      	ldrb	r3, [r2, #0]
 8006728:	f361 1304 	bfi	r3, r1, #4, #1
 800672c:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 800672e:	7d3b      	ldrb	r3, [r7, #20]
 8006730:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006734:	b2d9      	uxtb	r1, r3
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	7813      	ldrb	r3, [r2, #0]
 800673a:	f361 1345 	bfi	r3, r1, #5, #1
 800673e:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 8006740:	7d3b      	ldrb	r3, [r7, #20]
 8006742:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006746:	b2d9      	uxtb	r1, r3
 8006748:	683a      	ldr	r2, [r7, #0]
 800674a:	7813      	ldrb	r3, [r2, #0]
 800674c:	f361 1386 	bfi	r3, r1, #6, #1
 8006750:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 8006752:	7d3b      	ldrb	r3, [r7, #20]
 8006754:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006758:	b2d9      	uxtb	r1, r3
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	7813      	ldrb	r3, [r2, #0]
 800675e:	f361 13c7 	bfi	r3, r1, #7, #1
 8006762:	7013      	strb	r3, [r2, #0]
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8006764:	f107 0210 	add.w	r2, r7, #16
 8006768:	2301      	movs	r3, #1
 800676a:	215e      	movs	r1, #94	; 0x5e
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7ff fc95 	bl	800609c <lsm6dsl_read_reg>
 8006772:	61f8      	str	r0, [r7, #28]

    if (ret == 0)
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d16c      	bne.n	8006854 <lsm6dsl_pin_int1_route_get+0x1a2>
    {
      val->int1_timer       = md1_cfg.int1_timer;
 800677a:	7c3b      	ldrb	r3, [r7, #16]
 800677c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006780:	b2d9      	uxtb	r1, r3
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	7853      	ldrb	r3, [r2, #1]
 8006786:	f361 0300 	bfi	r3, r1, #0, #1
 800678a:	7053      	strb	r3, [r2, #1]
      val->int1_tilt        = md1_cfg.int1_tilt;
 800678c:	7c3b      	ldrb	r3, [r7, #16]
 800678e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006792:	b2d9      	uxtb	r1, r3
 8006794:	683a      	ldr	r2, [r7, #0]
 8006796:	7853      	ldrb	r3, [r2, #1]
 8006798:	f361 0341 	bfi	r3, r1, #1, #1
 800679c:	7053      	strb	r3, [r2, #1]
      val->int1_6d          = md1_cfg.int1_6d;
 800679e:	7c3b      	ldrb	r3, [r7, #16]
 80067a0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80067a4:	b2d9      	uxtb	r1, r3
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	7853      	ldrb	r3, [r2, #1]
 80067aa:	f361 0382 	bfi	r3, r1, #2, #1
 80067ae:	7053      	strb	r3, [r2, #1]
      val->int1_double_tap  = md1_cfg.int1_double_tap;
 80067b0:	7c3b      	ldrb	r3, [r7, #16]
 80067b2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80067b6:	b2d9      	uxtb	r1, r3
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	7853      	ldrb	r3, [r2, #1]
 80067bc:	f361 03c3 	bfi	r3, r1, #3, #1
 80067c0:	7053      	strb	r3, [r2, #1]
      val->int1_ff          = md1_cfg.int1_ff;
 80067c2:	7c3b      	ldrb	r3, [r7, #16]
 80067c4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80067c8:	b2d9      	uxtb	r1, r3
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	7853      	ldrb	r3, [r2, #1]
 80067ce:	f361 1304 	bfi	r3, r1, #4, #1
 80067d2:	7053      	strb	r3, [r2, #1]
      val->int1_wu          = md1_cfg.int1_wu;
 80067d4:	7c3b      	ldrb	r3, [r7, #16]
 80067d6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80067da:	b2d9      	uxtb	r1, r3
 80067dc:	683a      	ldr	r2, [r7, #0]
 80067de:	7853      	ldrb	r3, [r2, #1]
 80067e0:	f361 1345 	bfi	r3, r1, #5, #1
 80067e4:	7053      	strb	r3, [r2, #1]
      val->int1_single_tap  = md1_cfg.int1_single_tap;
 80067e6:	7c3b      	ldrb	r3, [r7, #16]
 80067e8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80067ec:	b2d9      	uxtb	r1, r3
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	7853      	ldrb	r3, [r2, #1]
 80067f2:	f361 1386 	bfi	r3, r1, #6, #1
 80067f6:	7053      	strb	r3, [r2, #1]
      val->int1_inact_state = md1_cfg.int1_inact_state;
 80067f8:	7c3b      	ldrb	r3, [r7, #16]
 80067fa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80067fe:	b2d9      	uxtb	r1, r3
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	7853      	ldrb	r3, [r2, #1]
 8006804:	f361 13c7 	bfi	r3, r1, #7, #1
 8006808:	7053      	strb	r3, [r2, #1]
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 800680a:	f107 020c 	add.w	r2, r7, #12
 800680e:	2301      	movs	r3, #1
 8006810:	2113      	movs	r1, #19
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7ff fc42 	bl	800609c <lsm6dsl_read_reg>
 8006818:	61f8      	str	r0, [r7, #28]

      if (ret == 0)
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d119      	bne.n	8006854 <lsm6dsl_pin_int1_route_get+0x1a2>
      {
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 8006820:	7b3b      	ldrb	r3, [r7, #12]
 8006822:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006826:	b2d9      	uxtb	r1, r3
 8006828:	683a      	ldr	r2, [r7, #0]
 800682a:	7893      	ldrb	r3, [r2, #2]
 800682c:	f361 0300 	bfi	r3, r1, #0, #1
 8006830:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8006832:	f107 0218 	add.w	r2, r7, #24
 8006836:	2301      	movs	r3, #1
 8006838:	211a      	movs	r1, #26
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7ff fc2e 	bl	800609c <lsm6dsl_read_reg>
 8006840:	61f8      	str	r0, [r7, #28]
                               (uint8_t *)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 8006842:	7e3b      	ldrb	r3, [r7, #24]
 8006844:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006848:	b2d9      	uxtb	r1, r3
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	7893      	ldrb	r3, [r2, #2]
 800684e:	f361 0300 	bfi	r3, r1, #0, #1
 8006852:	7093      	strb	r3, [r2, #2]
      }
    }
  }

  return ret;
 8006854:	69fb      	ldr	r3, [r7, #28]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3720      	adds	r7, #32
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b084      	sub	sp, #16
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	460b      	mov	r3, r1
 8006868:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 800686a:	f107 0208 	add.w	r2, r7, #8
 800686e:	2301      	movs	r3, #1
 8006870:	210a      	movs	r1, #10
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7ff fc12 	bl	800609c <lsm6dsl_read_reg>
 8006878:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10f      	bne.n	80068a0 <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8006880:	78fb      	ldrb	r3, [r7, #3]
 8006882:	f003 0307 	and.w	r3, r3, #7
 8006886:	b2da      	uxtb	r2, r3
 8006888:	7a3b      	ldrb	r3, [r7, #8]
 800688a:	f362 0302 	bfi	r3, r2, #0, #3
 800688e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8006890:	f107 0208 	add.w	r2, r7, #8
 8006894:	2301      	movs	r3, #1
 8006896:	210a      	movs	r1, #10
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f7ff fc17 	bl	80060cc <lsm6dsl_write_reg>
 800689e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 80068a0:	68fb      	ldr	r3, [r7, #12]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b082      	sub	sp, #8
 80068ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80068b0:	2300      	movs	r3, #0
 80068b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80068b4:	2003      	movs	r0, #3
 80068b6:	f000 f961 	bl	8006b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80068ba:	2000      	movs	r0, #0
 80068bc:	f000 f80e 	bl	80068dc <HAL_InitTick>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d002      	beq.n	80068cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	71fb      	strb	r3, [r7, #7]
 80068ca:	e001      	b.n	80068d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80068cc:	f7fe fa58 	bl	8004d80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80068d0:	79fb      	ldrb	r3, [r7, #7]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
	...

080068dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80068e4:	2300      	movs	r3, #0
 80068e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80068e8:	4b17      	ldr	r3, [pc, #92]	; (8006948 <HAL_InitTick+0x6c>)
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d023      	beq.n	8006938 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80068f0:	4b16      	ldr	r3, [pc, #88]	; (800694c <HAL_InitTick+0x70>)
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	4b14      	ldr	r3, [pc, #80]	; (8006948 <HAL_InitTick+0x6c>)
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	4619      	mov	r1, r3
 80068fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006902:	fbb2 f3f3 	udiv	r3, r2, r3
 8006906:	4618      	mov	r0, r3
 8006908:	f000 f96d 	bl	8006be6 <HAL_SYSTICK_Config>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10f      	bne.n	8006932 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b0f      	cmp	r3, #15
 8006916:	d809      	bhi.n	800692c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006918:	2200      	movs	r2, #0
 800691a:	6879      	ldr	r1, [r7, #4]
 800691c:	f04f 30ff 	mov.w	r0, #4294967295
 8006920:	f000 f937 	bl	8006b92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006924:	4a0a      	ldr	r2, [pc, #40]	; (8006950 <HAL_InitTick+0x74>)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6013      	str	r3, [r2, #0]
 800692a:	e007      	b.n	800693c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	73fb      	strb	r3, [r7, #15]
 8006930:	e004      	b.n	800693c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	73fb      	strb	r3, [r7, #15]
 8006936:	e001      	b.n	800693c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800693c:	7bfb      	ldrb	r3, [r7, #15]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	20000014 	.word	0x20000014
 800694c:	2000000c 	.word	0x2000000c
 8006950:	20000010 	.word	0x20000010

08006954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006954:	b480      	push	{r7}
 8006956:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006958:	4b06      	ldr	r3, [pc, #24]	; (8006974 <HAL_IncTick+0x20>)
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	461a      	mov	r2, r3
 800695e:	4b06      	ldr	r3, [pc, #24]	; (8006978 <HAL_IncTick+0x24>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4413      	add	r3, r2
 8006964:	4a04      	ldr	r2, [pc, #16]	; (8006978 <HAL_IncTick+0x24>)
 8006966:	6013      	str	r3, [r2, #0]
}
 8006968:	bf00      	nop
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	20000014 	.word	0x20000014
 8006978:	200011e0 	.word	0x200011e0

0800697c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800697c:	b480      	push	{r7}
 800697e:	af00      	add	r7, sp, #0
  return uwTick;
 8006980:	4b03      	ldr	r3, [pc, #12]	; (8006990 <HAL_GetTick+0x14>)
 8006982:	681b      	ldr	r3, [r3, #0]
}
 8006984:	4618      	mov	r0, r3
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	200011e0 	.word	0x200011e0

08006994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800699c:	f7ff ffee 	bl	800697c <HAL_GetTick>
 80069a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ac:	d005      	beq.n	80069ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80069ae:	4b0a      	ldr	r3, [pc, #40]	; (80069d8 <HAL_Delay+0x44>)
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	461a      	mov	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4413      	add	r3, r2
 80069b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80069ba:	bf00      	nop
 80069bc:	f7ff ffde 	bl	800697c <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d8f7      	bhi.n	80069bc <HAL_Delay+0x28>
  {
  }
}
 80069cc:	bf00      	nop
 80069ce:	bf00      	nop
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	20000014 	.word	0x20000014

080069dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f003 0307 	and.w	r3, r3, #7
 80069ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80069ec:	4b0c      	ldr	r3, [pc, #48]	; (8006a20 <__NVIC_SetPriorityGrouping+0x44>)
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80069f8:	4013      	ands	r3, r2
 80069fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a0e:	4a04      	ldr	r2, [pc, #16]	; (8006a20 <__NVIC_SetPriorityGrouping+0x44>)
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	60d3      	str	r3, [r2, #12]
}
 8006a14:	bf00      	nop
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	e000ed00 	.word	0xe000ed00

08006a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a28:	4b04      	ldr	r3, [pc, #16]	; (8006a3c <__NVIC_GetPriorityGrouping+0x18>)
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	0a1b      	lsrs	r3, r3, #8
 8006a2e:	f003 0307 	and.w	r3, r3, #7
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	e000ed00 	.word	0xe000ed00

08006a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	4603      	mov	r3, r0
 8006a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	db0b      	blt.n	8006a6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a52:	79fb      	ldrb	r3, [r7, #7]
 8006a54:	f003 021f 	and.w	r2, r3, #31
 8006a58:	4907      	ldr	r1, [pc, #28]	; (8006a78 <__NVIC_EnableIRQ+0x38>)
 8006a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a5e:	095b      	lsrs	r3, r3, #5
 8006a60:	2001      	movs	r0, #1
 8006a62:	fa00 f202 	lsl.w	r2, r0, r2
 8006a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006a6a:	bf00      	nop
 8006a6c:	370c      	adds	r7, #12
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	e000e100 	.word	0xe000e100

08006a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	4603      	mov	r3, r0
 8006a84:	6039      	str	r1, [r7, #0]
 8006a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	db0a      	blt.n	8006aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	490c      	ldr	r1, [pc, #48]	; (8006ac8 <__NVIC_SetPriority+0x4c>)
 8006a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a9a:	0112      	lsls	r2, r2, #4
 8006a9c:	b2d2      	uxtb	r2, r2
 8006a9e:	440b      	add	r3, r1
 8006aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006aa4:	e00a      	b.n	8006abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	4908      	ldr	r1, [pc, #32]	; (8006acc <__NVIC_SetPriority+0x50>)
 8006aac:	79fb      	ldrb	r3, [r7, #7]
 8006aae:	f003 030f 	and.w	r3, r3, #15
 8006ab2:	3b04      	subs	r3, #4
 8006ab4:	0112      	lsls	r2, r2, #4
 8006ab6:	b2d2      	uxtb	r2, r2
 8006ab8:	440b      	add	r3, r1
 8006aba:	761a      	strb	r2, [r3, #24]
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	e000e100 	.word	0xe000e100
 8006acc:	e000ed00 	.word	0xe000ed00

08006ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b089      	sub	sp, #36	; 0x24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f003 0307 	and.w	r3, r3, #7
 8006ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	f1c3 0307 	rsb	r3, r3, #7
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	bf28      	it	cs
 8006aee:	2304      	movcs	r3, #4
 8006af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	3304      	adds	r3, #4
 8006af6:	2b06      	cmp	r3, #6
 8006af8:	d902      	bls.n	8006b00 <NVIC_EncodePriority+0x30>
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	3b03      	subs	r3, #3
 8006afe:	e000      	b.n	8006b02 <NVIC_EncodePriority+0x32>
 8006b00:	2300      	movs	r3, #0
 8006b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b04:	f04f 32ff 	mov.w	r2, #4294967295
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0e:	43da      	mvns	r2, r3
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	401a      	ands	r2, r3
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b18:	f04f 31ff 	mov.w	r1, #4294967295
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b22:	43d9      	mvns	r1, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b28:	4313      	orrs	r3, r2
         );
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3724      	adds	r7, #36	; 0x24
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
	...

08006b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b48:	d301      	bcc.n	8006b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e00f      	b.n	8006b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b4e:	4a0a      	ldr	r2, [pc, #40]	; (8006b78 <SysTick_Config+0x40>)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	3b01      	subs	r3, #1
 8006b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b56:	210f      	movs	r1, #15
 8006b58:	f04f 30ff 	mov.w	r0, #4294967295
 8006b5c:	f7ff ff8e 	bl	8006a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b60:	4b05      	ldr	r3, [pc, #20]	; (8006b78 <SysTick_Config+0x40>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b66:	4b04      	ldr	r3, [pc, #16]	; (8006b78 <SysTick_Config+0x40>)
 8006b68:	2207      	movs	r2, #7
 8006b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3708      	adds	r7, #8
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	e000e010 	.word	0xe000e010

08006b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7ff ff29 	bl	80069dc <__NVIC_SetPriorityGrouping>
}
 8006b8a:	bf00      	nop
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b086      	sub	sp, #24
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	4603      	mov	r3, r0
 8006b9a:	60b9      	str	r1, [r7, #8]
 8006b9c:	607a      	str	r2, [r7, #4]
 8006b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006ba4:	f7ff ff3e 	bl	8006a24 <__NVIC_GetPriorityGrouping>
 8006ba8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	68b9      	ldr	r1, [r7, #8]
 8006bae:	6978      	ldr	r0, [r7, #20]
 8006bb0:	f7ff ff8e 	bl	8006ad0 <NVIC_EncodePriority>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bba:	4611      	mov	r1, r2
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7ff ff5d 	bl	8006a7c <__NVIC_SetPriority>
}
 8006bc2:	bf00      	nop
 8006bc4:	3718      	adds	r7, #24
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b082      	sub	sp, #8
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7ff ff31 	bl	8006a40 <__NVIC_EnableIRQ>
}
 8006bde:	bf00      	nop
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b082      	sub	sp, #8
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7ff ffa2 	bl	8006b38 <SysTick_Config>
 8006bf4:	4603      	mov	r3, r0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
	...

08006c00 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e0ac      	b.n	8006d6c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 f8b2 	bl	8006d80 <DFSDM_GetChannelFromInstance>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	4a55      	ldr	r2, [pc, #340]	; (8006d74 <HAL_DFSDM_ChannelInit+0x174>)
 8006c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d001      	beq.n	8006c2c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e09f      	b.n	8006d6c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7fe f8cb 	bl	8004dc8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8006c32:	4b51      	ldr	r3, [pc, #324]	; (8006d78 <HAL_DFSDM_ChannelInit+0x178>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	3301      	adds	r3, #1
 8006c38:	4a4f      	ldr	r2, [pc, #316]	; (8006d78 <HAL_DFSDM_ChannelInit+0x178>)
 8006c3a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8006c3c:	4b4e      	ldr	r3, [pc, #312]	; (8006d78 <HAL_DFSDM_ChannelInit+0x178>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d125      	bne.n	8006c90 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8006c44:	4b4d      	ldr	r3, [pc, #308]	; (8006d7c <HAL_DFSDM_ChannelInit+0x17c>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a4c      	ldr	r2, [pc, #304]	; (8006d7c <HAL_DFSDM_ChannelInit+0x17c>)
 8006c4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c4e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8006c50:	4b4a      	ldr	r3, [pc, #296]	; (8006d7c <HAL_DFSDM_ChannelInit+0x17c>)
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	4948      	ldr	r1, [pc, #288]	; (8006d7c <HAL_DFSDM_ChannelInit+0x17c>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8006c5e:	4b47      	ldr	r3, [pc, #284]	; (8006d7c <HAL_DFSDM_ChannelInit+0x17c>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a46      	ldr	r2, [pc, #280]	; (8006d7c <HAL_DFSDM_ChannelInit+0x17c>)
 8006c64:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8006c68:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	791b      	ldrb	r3, [r3, #4]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d108      	bne.n	8006c84 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8006c72:	4b42      	ldr	r3, [pc, #264]	; (8006d7c <HAL_DFSDM_ChannelInit+0x17c>)
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	041b      	lsls	r3, r3, #16
 8006c7e:	493f      	ldr	r1, [pc, #252]	; (8006d7c <HAL_DFSDM_ChannelInit+0x17c>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8006c84:	4b3d      	ldr	r3, [pc, #244]	; (8006d7c <HAL_DFSDM_ChannelInit+0x17c>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a3c      	ldr	r2, [pc, #240]	; (8006d7c <HAL_DFSDM_ChannelInit+0x17c>)
 8006c8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c8e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8006c9e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6819      	ldr	r1, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8006cae:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8006cb4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f022 020f 	bic.w	r2, r2, #15
 8006ccc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6819      	ldr	r1, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	689a      	ldr	r2, [r3, #8]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8006cf4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6899      	ldr	r1, [r3, #8]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d04:	3b01      	subs	r3, #1
 8006d06:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8006d08:	431a      	orrs	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f002 0207 	and.w	r2, r2, #7
 8006d20:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6859      	ldr	r1, [r3, #4]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d32:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8006d34:	431a      	orrs	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d4c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f000 f810 	bl	8006d80 <DFSDM_GetChannelFromInstance>
 8006d60:	4602      	mov	r2, r0
 8006d62:	4904      	ldr	r1, [pc, #16]	; (8006d74 <HAL_DFSDM_ChannelInit+0x174>)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3708      	adds	r7, #8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	200011e8 	.word	0x200011e8
 8006d78:	200011e4 	.word	0x200011e4
 8006d7c:	40016000 	.word	0x40016000

08006d80 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a1c      	ldr	r2, [pc, #112]	; (8006dfc <DFSDM_GetChannelFromInstance+0x7c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d102      	bne.n	8006d96 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8006d90:	2300      	movs	r3, #0
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	e02b      	b.n	8006dee <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a19      	ldr	r2, [pc, #100]	; (8006e00 <DFSDM_GetChannelFromInstance+0x80>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d102      	bne.n	8006da4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	60fb      	str	r3, [r7, #12]
 8006da2:	e024      	b.n	8006dee <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a17      	ldr	r2, [pc, #92]	; (8006e04 <DFSDM_GetChannelFromInstance+0x84>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d102      	bne.n	8006db2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8006dac:	2302      	movs	r3, #2
 8006dae:	60fb      	str	r3, [r7, #12]
 8006db0:	e01d      	b.n	8006dee <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a14      	ldr	r2, [pc, #80]	; (8006e08 <DFSDM_GetChannelFromInstance+0x88>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d102      	bne.n	8006dc0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8006dba:	2304      	movs	r3, #4
 8006dbc:	60fb      	str	r3, [r7, #12]
 8006dbe:	e016      	b.n	8006dee <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a12      	ldr	r2, [pc, #72]	; (8006e0c <DFSDM_GetChannelFromInstance+0x8c>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d102      	bne.n	8006dce <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8006dc8:	2305      	movs	r3, #5
 8006dca:	60fb      	str	r3, [r7, #12]
 8006dcc:	e00f      	b.n	8006dee <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a0f      	ldr	r2, [pc, #60]	; (8006e10 <DFSDM_GetChannelFromInstance+0x90>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d102      	bne.n	8006ddc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8006dd6:	2306      	movs	r3, #6
 8006dd8:	60fb      	str	r3, [r7, #12]
 8006dda:	e008      	b.n	8006dee <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a0d      	ldr	r2, [pc, #52]	; (8006e14 <DFSDM_GetChannelFromInstance+0x94>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d102      	bne.n	8006dea <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8006de4:	2307      	movs	r3, #7
 8006de6:	60fb      	str	r3, [r7, #12]
 8006de8:	e001      	b.n	8006dee <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8006dea:	2303      	movs	r3, #3
 8006dec:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8006dee:	68fb      	ldr	r3, [r7, #12]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	40016000 	.word	0x40016000
 8006e00:	40016020 	.word	0x40016020
 8006e04:	40016040 	.word	0x40016040
 8006e08:	40016080 	.word	0x40016080
 8006e0c:	400160a0 	.word	0x400160a0
 8006e10:	400160c0 	.word	0x400160c0
 8006e14:	400160e0 	.word	0x400160e0

08006e18 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e20:	2300      	movs	r3, #0
 8006e22:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d005      	beq.n	8006e3c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2204      	movs	r2, #4
 8006e34:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	73fb      	strb	r3, [r7, #15]
 8006e3a:	e029      	b.n	8006e90 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f022 020e 	bic.w	r2, r2, #14
 8006e4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f022 0201 	bic.w	r2, r2, #1
 8006e5a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e60:	f003 021c 	and.w	r2, r3, #28
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e68:	2101      	movs	r1, #1
 8006e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8006e6e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d003      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	4798      	blx	r3
    }
  }
  return status;
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
	...

08006e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b087      	sub	sp, #28
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006eaa:	e17f      	b.n	80071ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	2101      	movs	r1, #1
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8006eb8:	4013      	ands	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f000 8171 	beq.w	80071a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f003 0303 	and.w	r3, r3, #3
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d005      	beq.n	8006edc <HAL_GPIO_Init+0x40>
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f003 0303 	and.w	r3, r3, #3
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d130      	bne.n	8006f3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	005b      	lsls	r3, r3, #1
 8006ee6:	2203      	movs	r2, #3
 8006ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8006eec:	43db      	mvns	r3, r3
 8006eee:	693a      	ldr	r2, [r7, #16]
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	68da      	ldr	r2, [r3, #12]
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	005b      	lsls	r3, r3, #1
 8006efc:	fa02 f303 	lsl.w	r3, r2, r3
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f12:	2201      	movs	r2, #1
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1a:	43db      	mvns	r3, r3
 8006f1c:	693a      	ldr	r2, [r7, #16]
 8006f1e:	4013      	ands	r3, r2
 8006f20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	091b      	lsrs	r3, r3, #4
 8006f28:	f003 0201 	and.w	r2, r3, #1
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	693a      	ldr	r2, [r7, #16]
 8006f3c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f003 0303 	and.w	r3, r3, #3
 8006f46:	2b03      	cmp	r3, #3
 8006f48:	d118      	bne.n	8006f7c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006f50:	2201      	movs	r2, #1
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	fa02 f303 	lsl.w	r3, r2, r3
 8006f58:	43db      	mvns	r3, r3
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	08db      	lsrs	r3, r3, #3
 8006f66:	f003 0201 	and.w	r2, r3, #1
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f003 0303 	and.w	r3, r3, #3
 8006f84:	2b03      	cmp	r3, #3
 8006f86:	d017      	beq.n	8006fb8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	005b      	lsls	r3, r3, #1
 8006f92:	2203      	movs	r2, #3
 8006f94:	fa02 f303 	lsl.w	r3, r2, r3
 8006f98:	43db      	mvns	r3, r3
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	689a      	ldr	r2, [r3, #8]
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	005b      	lsls	r3, r3, #1
 8006fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	f003 0303 	and.w	r3, r3, #3
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d123      	bne.n	800700c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	08da      	lsrs	r2, r3, #3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	3208      	adds	r2, #8
 8006fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	f003 0307 	and.w	r3, r3, #7
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	220f      	movs	r2, #15
 8006fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe0:	43db      	mvns	r3, r3
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	691a      	ldr	r2, [r3, #16]
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	f003 0307 	and.w	r3, r3, #7
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	08da      	lsrs	r2, r3, #3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	3208      	adds	r2, #8
 8007006:	6939      	ldr	r1, [r7, #16]
 8007008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	2203      	movs	r2, #3
 8007018:	fa02 f303 	lsl.w	r3, r2, r3
 800701c:	43db      	mvns	r3, r3
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	4013      	ands	r3, r2
 8007022:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f003 0203 	and.w	r2, r3, #3
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	005b      	lsls	r3, r3, #1
 8007030:	fa02 f303 	lsl.w	r3, r2, r3
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	4313      	orrs	r3, r2
 8007038:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 80ac 	beq.w	80071a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800704e:	4b5f      	ldr	r3, [pc, #380]	; (80071cc <HAL_GPIO_Init+0x330>)
 8007050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007052:	4a5e      	ldr	r2, [pc, #376]	; (80071cc <HAL_GPIO_Init+0x330>)
 8007054:	f043 0301 	orr.w	r3, r3, #1
 8007058:	6613      	str	r3, [r2, #96]	; 0x60
 800705a:	4b5c      	ldr	r3, [pc, #368]	; (80071cc <HAL_GPIO_Init+0x330>)
 800705c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	60bb      	str	r3, [r7, #8]
 8007064:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007066:	4a5a      	ldr	r2, [pc, #360]	; (80071d0 <HAL_GPIO_Init+0x334>)
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	089b      	lsrs	r3, r3, #2
 800706c:	3302      	adds	r3, #2
 800706e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007072:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	f003 0303 	and.w	r3, r3, #3
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	220f      	movs	r2, #15
 800707e:	fa02 f303 	lsl.w	r3, r2, r3
 8007082:	43db      	mvns	r3, r3
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	4013      	ands	r3, r2
 8007088:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007090:	d025      	beq.n	80070de <HAL_GPIO_Init+0x242>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a4f      	ldr	r2, [pc, #316]	; (80071d4 <HAL_GPIO_Init+0x338>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d01f      	beq.n	80070da <HAL_GPIO_Init+0x23e>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a4e      	ldr	r2, [pc, #312]	; (80071d8 <HAL_GPIO_Init+0x33c>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d019      	beq.n	80070d6 <HAL_GPIO_Init+0x23a>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a4d      	ldr	r2, [pc, #308]	; (80071dc <HAL_GPIO_Init+0x340>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d013      	beq.n	80070d2 <HAL_GPIO_Init+0x236>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a4c      	ldr	r2, [pc, #304]	; (80071e0 <HAL_GPIO_Init+0x344>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d00d      	beq.n	80070ce <HAL_GPIO_Init+0x232>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a4b      	ldr	r2, [pc, #300]	; (80071e4 <HAL_GPIO_Init+0x348>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d007      	beq.n	80070ca <HAL_GPIO_Init+0x22e>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a4a      	ldr	r2, [pc, #296]	; (80071e8 <HAL_GPIO_Init+0x34c>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d101      	bne.n	80070c6 <HAL_GPIO_Init+0x22a>
 80070c2:	2306      	movs	r3, #6
 80070c4:	e00c      	b.n	80070e0 <HAL_GPIO_Init+0x244>
 80070c6:	2307      	movs	r3, #7
 80070c8:	e00a      	b.n	80070e0 <HAL_GPIO_Init+0x244>
 80070ca:	2305      	movs	r3, #5
 80070cc:	e008      	b.n	80070e0 <HAL_GPIO_Init+0x244>
 80070ce:	2304      	movs	r3, #4
 80070d0:	e006      	b.n	80070e0 <HAL_GPIO_Init+0x244>
 80070d2:	2303      	movs	r3, #3
 80070d4:	e004      	b.n	80070e0 <HAL_GPIO_Init+0x244>
 80070d6:	2302      	movs	r3, #2
 80070d8:	e002      	b.n	80070e0 <HAL_GPIO_Init+0x244>
 80070da:	2301      	movs	r3, #1
 80070dc:	e000      	b.n	80070e0 <HAL_GPIO_Init+0x244>
 80070de:	2300      	movs	r3, #0
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	f002 0203 	and.w	r2, r2, #3
 80070e6:	0092      	lsls	r2, r2, #2
 80070e8:	4093      	lsls	r3, r2
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80070f0:	4937      	ldr	r1, [pc, #220]	; (80071d0 <HAL_GPIO_Init+0x334>)
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	089b      	lsrs	r3, r3, #2
 80070f6:	3302      	adds	r3, #2
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80070fe:	4b3b      	ldr	r3, [pc, #236]	; (80071ec <HAL_GPIO_Init+0x350>)
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	43db      	mvns	r3, r3
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	4013      	ands	r3, r2
 800710c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d003      	beq.n	8007122 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	4313      	orrs	r3, r2
 8007120:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007122:	4a32      	ldr	r2, [pc, #200]	; (80071ec <HAL_GPIO_Init+0x350>)
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007128:	4b30      	ldr	r3, [pc, #192]	; (80071ec <HAL_GPIO_Init+0x350>)
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	43db      	mvns	r3, r3
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	4013      	ands	r3, r2
 8007136:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007140:	2b00      	cmp	r3, #0
 8007142:	d003      	beq.n	800714c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	4313      	orrs	r3, r2
 800714a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800714c:	4a27      	ldr	r2, [pc, #156]	; (80071ec <HAL_GPIO_Init+0x350>)
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007152:	4b26      	ldr	r3, [pc, #152]	; (80071ec <HAL_GPIO_Init+0x350>)
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	43db      	mvns	r3, r3
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	4013      	ands	r3, r2
 8007160:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d003      	beq.n	8007176 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	4313      	orrs	r3, r2
 8007174:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007176:	4a1d      	ldr	r2, [pc, #116]	; (80071ec <HAL_GPIO_Init+0x350>)
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800717c:	4b1b      	ldr	r3, [pc, #108]	; (80071ec <HAL_GPIO_Init+0x350>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	43db      	mvns	r3, r3
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	4013      	ands	r3, r2
 800718a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d003      	beq.n	80071a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	4313      	orrs	r3, r2
 800719e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80071a0:	4a12      	ldr	r2, [pc, #72]	; (80071ec <HAL_GPIO_Init+0x350>)
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	3301      	adds	r3, #1
 80071aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	fa22 f303 	lsr.w	r3, r2, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f47f ae78 	bne.w	8006eac <HAL_GPIO_Init+0x10>
  }
}
 80071bc:	bf00      	nop
 80071be:	bf00      	nop
 80071c0:	371c      	adds	r7, #28
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	40021000 	.word	0x40021000
 80071d0:	40010000 	.word	0x40010000
 80071d4:	48000400 	.word	0x48000400
 80071d8:	48000800 	.word	0x48000800
 80071dc:	48000c00 	.word	0x48000c00
 80071e0:	48001000 	.word	0x48001000
 80071e4:	48001400 	.word	0x48001400
 80071e8:	48001800 	.word	0x48001800
 80071ec:	40010400 	.word	0x40010400

080071f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80071fa:	2300      	movs	r3, #0
 80071fc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80071fe:	e0cd      	b.n	800739c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007200:	2201      	movs	r2, #1
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	fa02 f303 	lsl.w	r3, r2, r3
 8007208:	683a      	ldr	r2, [r7, #0]
 800720a:	4013      	ands	r3, r2
 800720c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	f000 80c0 	beq.w	8007396 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8007216:	4a68      	ldr	r2, [pc, #416]	; (80073b8 <HAL_GPIO_DeInit+0x1c8>)
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	089b      	lsrs	r3, r3, #2
 800721c:	3302      	adds	r3, #2
 800721e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007222:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	f003 0303 	and.w	r3, r3, #3
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	220f      	movs	r2, #15
 800722e:	fa02 f303 	lsl.w	r3, r2, r3
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	4013      	ands	r3, r2
 8007236:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800723e:	d025      	beq.n	800728c <HAL_GPIO_DeInit+0x9c>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a5e      	ldr	r2, [pc, #376]	; (80073bc <HAL_GPIO_DeInit+0x1cc>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d01f      	beq.n	8007288 <HAL_GPIO_DeInit+0x98>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a5d      	ldr	r2, [pc, #372]	; (80073c0 <HAL_GPIO_DeInit+0x1d0>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d019      	beq.n	8007284 <HAL_GPIO_DeInit+0x94>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a5c      	ldr	r2, [pc, #368]	; (80073c4 <HAL_GPIO_DeInit+0x1d4>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d013      	beq.n	8007280 <HAL_GPIO_DeInit+0x90>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a5b      	ldr	r2, [pc, #364]	; (80073c8 <HAL_GPIO_DeInit+0x1d8>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d00d      	beq.n	800727c <HAL_GPIO_DeInit+0x8c>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a5a      	ldr	r2, [pc, #360]	; (80073cc <HAL_GPIO_DeInit+0x1dc>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d007      	beq.n	8007278 <HAL_GPIO_DeInit+0x88>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a59      	ldr	r2, [pc, #356]	; (80073d0 <HAL_GPIO_DeInit+0x1e0>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d101      	bne.n	8007274 <HAL_GPIO_DeInit+0x84>
 8007270:	2306      	movs	r3, #6
 8007272:	e00c      	b.n	800728e <HAL_GPIO_DeInit+0x9e>
 8007274:	2307      	movs	r3, #7
 8007276:	e00a      	b.n	800728e <HAL_GPIO_DeInit+0x9e>
 8007278:	2305      	movs	r3, #5
 800727a:	e008      	b.n	800728e <HAL_GPIO_DeInit+0x9e>
 800727c:	2304      	movs	r3, #4
 800727e:	e006      	b.n	800728e <HAL_GPIO_DeInit+0x9e>
 8007280:	2303      	movs	r3, #3
 8007282:	e004      	b.n	800728e <HAL_GPIO_DeInit+0x9e>
 8007284:	2302      	movs	r3, #2
 8007286:	e002      	b.n	800728e <HAL_GPIO_DeInit+0x9e>
 8007288:	2301      	movs	r3, #1
 800728a:	e000      	b.n	800728e <HAL_GPIO_DeInit+0x9e>
 800728c:	2300      	movs	r3, #0
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	f002 0203 	and.w	r2, r2, #3
 8007294:	0092      	lsls	r2, r2, #2
 8007296:	4093      	lsls	r3, r2
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	429a      	cmp	r2, r3
 800729c:	d132      	bne.n	8007304 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800729e:	4b4d      	ldr	r3, [pc, #308]	; (80073d4 <HAL_GPIO_DeInit+0x1e4>)
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	43db      	mvns	r3, r3
 80072a6:	494b      	ldr	r1, [pc, #300]	; (80073d4 <HAL_GPIO_DeInit+0x1e4>)
 80072a8:	4013      	ands	r3, r2
 80072aa:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80072ac:	4b49      	ldr	r3, [pc, #292]	; (80073d4 <HAL_GPIO_DeInit+0x1e4>)
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	43db      	mvns	r3, r3
 80072b4:	4947      	ldr	r1, [pc, #284]	; (80073d4 <HAL_GPIO_DeInit+0x1e4>)
 80072b6:	4013      	ands	r3, r2
 80072b8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80072ba:	4b46      	ldr	r3, [pc, #280]	; (80073d4 <HAL_GPIO_DeInit+0x1e4>)
 80072bc:	68da      	ldr	r2, [r3, #12]
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	43db      	mvns	r3, r3
 80072c2:	4944      	ldr	r1, [pc, #272]	; (80073d4 <HAL_GPIO_DeInit+0x1e4>)
 80072c4:	4013      	ands	r3, r2
 80072c6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80072c8:	4b42      	ldr	r3, [pc, #264]	; (80073d4 <HAL_GPIO_DeInit+0x1e4>)
 80072ca:	689a      	ldr	r2, [r3, #8]
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	43db      	mvns	r3, r3
 80072d0:	4940      	ldr	r1, [pc, #256]	; (80073d4 <HAL_GPIO_DeInit+0x1e4>)
 80072d2:	4013      	ands	r3, r2
 80072d4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f003 0303 	and.w	r3, r3, #3
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	220f      	movs	r2, #15
 80072e0:	fa02 f303 	lsl.w	r3, r2, r3
 80072e4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80072e6:	4a34      	ldr	r2, [pc, #208]	; (80073b8 <HAL_GPIO_DeInit+0x1c8>)
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	089b      	lsrs	r3, r3, #2
 80072ec:	3302      	adds	r3, #2
 80072ee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	43da      	mvns	r2, r3
 80072f6:	4830      	ldr	r0, [pc, #192]	; (80073b8 <HAL_GPIO_DeInit+0x1c8>)
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	089b      	lsrs	r3, r3, #2
 80072fc:	400a      	ands	r2, r1
 80072fe:	3302      	adds	r3, #2
 8007300:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	005b      	lsls	r3, r3, #1
 800730c:	2103      	movs	r1, #3
 800730e:	fa01 f303 	lsl.w	r3, r1, r3
 8007312:	431a      	orrs	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	08da      	lsrs	r2, r3, #3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	3208      	adds	r2, #8
 8007320:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	f003 0307 	and.w	r3, r3, #7
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	220f      	movs	r2, #15
 800732e:	fa02 f303 	lsl.w	r3, r2, r3
 8007332:	43db      	mvns	r3, r3
 8007334:	697a      	ldr	r2, [r7, #20]
 8007336:	08d2      	lsrs	r2, r2, #3
 8007338:	4019      	ands	r1, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	3208      	adds	r2, #8
 800733e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	689a      	ldr	r2, [r3, #8]
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	2103      	movs	r1, #3
 800734c:	fa01 f303 	lsl.w	r3, r1, r3
 8007350:	43db      	mvns	r3, r3
 8007352:	401a      	ands	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	2101      	movs	r1, #1
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	fa01 f303 	lsl.w	r3, r1, r3
 8007364:	43db      	mvns	r3, r3
 8007366:	401a      	ands	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	68da      	ldr	r2, [r3, #12]
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	005b      	lsls	r3, r3, #1
 8007374:	2103      	movs	r1, #3
 8007376:	fa01 f303 	lsl.w	r3, r1, r3
 800737a:	43db      	mvns	r3, r3
 800737c:	401a      	ands	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007386:	2101      	movs	r1, #1
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	fa01 f303 	lsl.w	r3, r1, r3
 800738e:	43db      	mvns	r3, r3
 8007390:	401a      	ands	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	3301      	adds	r3, #1
 800739a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800739c:	683a      	ldr	r2, [r7, #0]
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	fa22 f303 	lsr.w	r3, r2, r3
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f47f af2b 	bne.w	8007200 <HAL_GPIO_DeInit+0x10>
  }
}
 80073aa:	bf00      	nop
 80073ac:	bf00      	nop
 80073ae:	371c      	adds	r7, #28
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	40010000 	.word	0x40010000
 80073bc:	48000400 	.word	0x48000400
 80073c0:	48000800 	.word	0x48000800
 80073c4:	48000c00 	.word	0x48000c00
 80073c8:	48001000 	.word	0x48001000
 80073cc:	48001400 	.word	0x48001400
 80073d0:	48001800 	.word	0x48001800
 80073d4:	40010400 	.word	0x40010400

080073d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	460b      	mov	r3, r1
 80073e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	691a      	ldr	r2, [r3, #16]
 80073e8:	887b      	ldrh	r3, [r7, #2]
 80073ea:	4013      	ands	r3, r2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d002      	beq.n	80073f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80073f0:	2301      	movs	r3, #1
 80073f2:	73fb      	strb	r3, [r7, #15]
 80073f4:	e001      	b.n	80073fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80073f6:	2300      	movs	r3, #0
 80073f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80073fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3714      	adds	r7, #20
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	460b      	mov	r3, r1
 8007412:	807b      	strh	r3, [r7, #2]
 8007414:	4613      	mov	r3, r2
 8007416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007418:	787b      	ldrb	r3, [r7, #1]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d003      	beq.n	8007426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800741e:	887a      	ldrh	r2, [r7, #2]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007424:	e002      	b.n	800742c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007426:	887a      	ldrh	r2, [r7, #2]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	460b      	mov	r3, r1
 8007442:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	695b      	ldr	r3, [r3, #20]
 8007448:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800744a:	887a      	ldrh	r2, [r7, #2]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4013      	ands	r3, r2
 8007450:	041a      	lsls	r2, r3, #16
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	43d9      	mvns	r1, r3
 8007456:	887b      	ldrh	r3, [r7, #2]
 8007458:	400b      	ands	r3, r1
 800745a:	431a      	orrs	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	619a      	str	r2, [r3, #24]
}
 8007460:	bf00      	nop
 8007462:	3714      	adds	r7, #20
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	4603      	mov	r3, r0
 8007474:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007476:	4b08      	ldr	r3, [pc, #32]	; (8007498 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007478:	695a      	ldr	r2, [r3, #20]
 800747a:	88fb      	ldrh	r3, [r7, #6]
 800747c:	4013      	ands	r3, r2
 800747e:	2b00      	cmp	r3, #0
 8007480:	d006      	beq.n	8007490 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007482:	4a05      	ldr	r2, [pc, #20]	; (8007498 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007484:	88fb      	ldrh	r3, [r7, #6]
 8007486:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007488:	88fb      	ldrh	r3, [r7, #6]
 800748a:	4618      	mov	r0, r3
 800748c:	f7fc fb5c 	bl	8003b48 <HAL_GPIO_EXTI_Callback>
  }
}
 8007490:	bf00      	nop
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	40010400 	.word	0x40010400

0800749c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e081      	b.n	80075b2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d106      	bne.n	80074c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f8a8 	bl	8007618 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2224      	movs	r2, #36	; 0x24
 80074cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f022 0201 	bic.w	r2, r2, #1
 80074de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80074ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	689a      	ldr	r2, [r3, #8]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d107      	bne.n	8007516 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	689a      	ldr	r2, [r3, #8]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007512:	609a      	str	r2, [r3, #8]
 8007514:	e006      	b.n	8007524 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	689a      	ldr	r2, [r3, #8]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007522:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	2b02      	cmp	r3, #2
 800752a:	d104      	bne.n	8007536 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007534:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	6812      	ldr	r2, [r2, #0]
 8007540:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007548:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68da      	ldr	r2, [r3, #12]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007558:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	691a      	ldr	r2, [r3, #16]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	430a      	orrs	r2, r1
 8007572:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	69d9      	ldr	r1, [r3, #28]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a1a      	ldr	r2, [r3, #32]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	430a      	orrs	r2, r1
 8007582:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f042 0201 	orr.w	r2, r2, #1
 8007592:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2220      	movs	r2, #32
 800759e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b082      	sub	sp, #8
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d101      	bne.n	80075cc <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e021      	b.n	8007610 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2224      	movs	r2, #36	; 0x24
 80075d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f022 0201 	bic.w	r2, r2, #1
 80075e2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 f821 	bl	800762c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b088      	sub	sp, #32
 8007644:	af02      	add	r7, sp, #8
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	4608      	mov	r0, r1
 800764a:	4611      	mov	r1, r2
 800764c:	461a      	mov	r2, r3
 800764e:	4603      	mov	r3, r0
 8007650:	817b      	strh	r3, [r7, #10]
 8007652:	460b      	mov	r3, r1
 8007654:	813b      	strh	r3, [r7, #8]
 8007656:	4613      	mov	r3, r2
 8007658:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007660:	b2db      	uxtb	r3, r3
 8007662:	2b20      	cmp	r3, #32
 8007664:	f040 80f9 	bne.w	800785a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007668:	6a3b      	ldr	r3, [r7, #32]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d002      	beq.n	8007674 <HAL_I2C_Mem_Write+0x34>
 800766e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007670:	2b00      	cmp	r3, #0
 8007672:	d105      	bne.n	8007680 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800767a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e0ed      	b.n	800785c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007686:	2b01      	cmp	r3, #1
 8007688:	d101      	bne.n	800768e <HAL_I2C_Mem_Write+0x4e>
 800768a:	2302      	movs	r3, #2
 800768c:	e0e6      	b.n	800785c <HAL_I2C_Mem_Write+0x21c>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007696:	f7ff f971 	bl	800697c <HAL_GetTick>
 800769a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	2319      	movs	r3, #25
 80076a2:	2201      	movs	r2, #1
 80076a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 fadd 	bl	8007c68 <I2C_WaitOnFlagUntilTimeout>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d001      	beq.n	80076b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e0d1      	b.n	800785c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2221      	movs	r2, #33	; 0x21
 80076bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2240      	movs	r2, #64	; 0x40
 80076c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6a3a      	ldr	r2, [r7, #32]
 80076d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80076d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2200      	movs	r2, #0
 80076de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80076e0:	88f8      	ldrh	r0, [r7, #6]
 80076e2:	893a      	ldrh	r2, [r7, #8]
 80076e4:	8979      	ldrh	r1, [r7, #10]
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	9301      	str	r3, [sp, #4]
 80076ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	4603      	mov	r3, r0
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f000 f9ed 	bl	8007ad0 <I2C_RequestMemoryWrite>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d005      	beq.n	8007708 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e0a9      	b.n	800785c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800770c:	b29b      	uxth	r3, r3
 800770e:	2bff      	cmp	r3, #255	; 0xff
 8007710:	d90e      	bls.n	8007730 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	22ff      	movs	r2, #255	; 0xff
 8007716:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800771c:	b2da      	uxtb	r2, r3
 800771e:	8979      	ldrh	r1, [r7, #10]
 8007720:	2300      	movs	r3, #0
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 fc45 	bl	8007fb8 <I2C_TransferConfig>
 800772e:	e00f      	b.n	8007750 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007734:	b29a      	uxth	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800773e:	b2da      	uxtb	r2, r3
 8007740:	8979      	ldrh	r1, [r7, #10]
 8007742:	2300      	movs	r3, #0
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f000 fc34 	bl	8007fb8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007750:	697a      	ldr	r2, [r7, #20]
 8007752:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	f000 fac7 	bl	8007ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d001      	beq.n	8007764 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e07b      	b.n	800785c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007768:	781a      	ldrb	r2, [r3, #0]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007774:	1c5a      	adds	r2, r3, #1
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800777e:	b29b      	uxth	r3, r3
 8007780:	3b01      	subs	r3, #1
 8007782:	b29a      	uxth	r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800778c:	3b01      	subs	r3, #1
 800778e:	b29a      	uxth	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007798:	b29b      	uxth	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d034      	beq.n	8007808 <HAL_I2C_Mem_Write+0x1c8>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d130      	bne.n	8007808 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	9300      	str	r3, [sp, #0]
 80077aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ac:	2200      	movs	r2, #0
 80077ae:	2180      	movs	r1, #128	; 0x80
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f000 fa59 	bl	8007c68 <I2C_WaitOnFlagUntilTimeout>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d001      	beq.n	80077c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e04d      	b.n	800785c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	2bff      	cmp	r3, #255	; 0xff
 80077c8:	d90e      	bls.n	80077e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	22ff      	movs	r2, #255	; 0xff
 80077ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077d4:	b2da      	uxtb	r2, r3
 80077d6:	8979      	ldrh	r1, [r7, #10]
 80077d8:	2300      	movs	r3, #0
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f000 fbe9 	bl	8007fb8 <I2C_TransferConfig>
 80077e6:	e00f      	b.n	8007808 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077f6:	b2da      	uxtb	r2, r3
 80077f8:	8979      	ldrh	r1, [r7, #10]
 80077fa:	2300      	movs	r3, #0
 80077fc:	9300      	str	r3, [sp, #0]
 80077fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f000 fbd8 	bl	8007fb8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800780c:	b29b      	uxth	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	d19e      	bne.n	8007750 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f000 faa6 	bl	8007d68 <I2C_WaitOnSTOPFlagUntilTimeout>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d001      	beq.n	8007826 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	e01a      	b.n	800785c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2220      	movs	r2, #32
 800782c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6859      	ldr	r1, [r3, #4]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	4b0a      	ldr	r3, [pc, #40]	; (8007864 <HAL_I2C_Mem_Write+0x224>)
 800783a:	400b      	ands	r3, r1
 800783c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2220      	movs	r2, #32
 8007842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007856:	2300      	movs	r3, #0
 8007858:	e000      	b.n	800785c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800785a:	2302      	movs	r3, #2
  }
}
 800785c:	4618      	mov	r0, r3
 800785e:	3718      	adds	r7, #24
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	fe00e800 	.word	0xfe00e800

08007868 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b088      	sub	sp, #32
 800786c:	af02      	add	r7, sp, #8
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	4608      	mov	r0, r1
 8007872:	4611      	mov	r1, r2
 8007874:	461a      	mov	r2, r3
 8007876:	4603      	mov	r3, r0
 8007878:	817b      	strh	r3, [r7, #10]
 800787a:	460b      	mov	r3, r1
 800787c:	813b      	strh	r3, [r7, #8]
 800787e:	4613      	mov	r3, r2
 8007880:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b20      	cmp	r3, #32
 800788c:	f040 80fd 	bne.w	8007a8a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <HAL_I2C_Mem_Read+0x34>
 8007896:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007898:	2b00      	cmp	r3, #0
 800789a:	d105      	bne.n	80078a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e0f1      	b.n	8007a8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d101      	bne.n	80078b6 <HAL_I2C_Mem_Read+0x4e>
 80078b2:	2302      	movs	r3, #2
 80078b4:	e0ea      	b.n	8007a8c <HAL_I2C_Mem_Read+0x224>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80078be:	f7ff f85d 	bl	800697c <HAL_GetTick>
 80078c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	2319      	movs	r3, #25
 80078ca:	2201      	movs	r2, #1
 80078cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f000 f9c9 	bl	8007c68 <I2C_WaitOnFlagUntilTimeout>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d001      	beq.n	80078e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	e0d5      	b.n	8007a8c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2222      	movs	r2, #34	; 0x22
 80078e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2240      	movs	r2, #64	; 0x40
 80078ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6a3a      	ldr	r2, [r7, #32]
 80078fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007900:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007908:	88f8      	ldrh	r0, [r7, #6]
 800790a:	893a      	ldrh	r2, [r7, #8]
 800790c:	8979      	ldrh	r1, [r7, #10]
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	9301      	str	r3, [sp, #4]
 8007912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	4603      	mov	r3, r0
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f000 f92d 	bl	8007b78 <I2C_RequestMemoryRead>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d005      	beq.n	8007930 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e0ad      	b.n	8007a8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007934:	b29b      	uxth	r3, r3
 8007936:	2bff      	cmp	r3, #255	; 0xff
 8007938:	d90e      	bls.n	8007958 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	22ff      	movs	r2, #255	; 0xff
 800793e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007944:	b2da      	uxtb	r2, r3
 8007946:	8979      	ldrh	r1, [r7, #10]
 8007948:	4b52      	ldr	r3, [pc, #328]	; (8007a94 <HAL_I2C_Mem_Read+0x22c>)
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f000 fb31 	bl	8007fb8 <I2C_TransferConfig>
 8007956:	e00f      	b.n	8007978 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800795c:	b29a      	uxth	r2, r3
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007966:	b2da      	uxtb	r2, r3
 8007968:	8979      	ldrh	r1, [r7, #10]
 800796a:	4b4a      	ldr	r3, [pc, #296]	; (8007a94 <HAL_I2C_Mem_Read+0x22c>)
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f000 fb20 	bl	8007fb8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797e:	2200      	movs	r2, #0
 8007980:	2104      	movs	r1, #4
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 f970 	bl	8007c68 <I2C_WaitOnFlagUntilTimeout>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d001      	beq.n	8007992 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e07c      	b.n	8007a8c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799c:	b2d2      	uxtb	r2, r2
 800799e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a4:	1c5a      	adds	r2, r3, #1
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ae:	3b01      	subs	r3, #1
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	3b01      	subs	r3, #1
 80079be:	b29a      	uxth	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d034      	beq.n	8007a38 <HAL_I2C_Mem_Read+0x1d0>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d130      	bne.n	8007a38 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	9300      	str	r3, [sp, #0]
 80079da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079dc:	2200      	movs	r2, #0
 80079de:	2180      	movs	r1, #128	; 0x80
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f000 f941 	bl	8007c68 <I2C_WaitOnFlagUntilTimeout>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d001      	beq.n	80079f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e04d      	b.n	8007a8c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	2bff      	cmp	r3, #255	; 0xff
 80079f8:	d90e      	bls.n	8007a18 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	22ff      	movs	r2, #255	; 0xff
 80079fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a04:	b2da      	uxtb	r2, r3
 8007a06:	8979      	ldrh	r1, [r7, #10]
 8007a08:	2300      	movs	r3, #0
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f000 fad1 	bl	8007fb8 <I2C_TransferConfig>
 8007a16:	e00f      	b.n	8007a38 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a26:	b2da      	uxtb	r2, r3
 8007a28:	8979      	ldrh	r1, [r7, #10]
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f000 fac0 	bl	8007fb8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d19a      	bne.n	8007978 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a46:	68f8      	ldr	r0, [r7, #12]
 8007a48:	f000 f98e 	bl	8007d68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e01a      	b.n	8007a8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2220      	movs	r2, #32
 8007a5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	6859      	ldr	r1, [r3, #4]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	4b0b      	ldr	r3, [pc, #44]	; (8007a98 <HAL_I2C_Mem_Read+0x230>)
 8007a6a:	400b      	ands	r3, r1
 8007a6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2220      	movs	r2, #32
 8007a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a86:	2300      	movs	r3, #0
 8007a88:	e000      	b.n	8007a8c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007a8a:	2302      	movs	r3, #2
  }
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3718      	adds	r7, #24
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	80002400 	.word	0x80002400
 8007a98:	fe00e800 	.word	0xfe00e800

08007a9c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007aaa:	b2db      	uxtb	r3, r3
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af02      	add	r7, sp, #8
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	4608      	mov	r0, r1
 8007ada:	4611      	mov	r1, r2
 8007adc:	461a      	mov	r2, r3
 8007ade:	4603      	mov	r3, r0
 8007ae0:	817b      	strh	r3, [r7, #10]
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	813b      	strh	r3, [r7, #8]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007aea:	88fb      	ldrh	r3, [r7, #6]
 8007aec:	b2da      	uxtb	r2, r3
 8007aee:	8979      	ldrh	r1, [r7, #10]
 8007af0:	4b20      	ldr	r3, [pc, #128]	; (8007b74 <I2C_RequestMemoryWrite+0xa4>)
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f000 fa5d 	bl	8007fb8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007afe:	69fa      	ldr	r2, [r7, #28]
 8007b00:	69b9      	ldr	r1, [r7, #24]
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f000 f8f0 	bl	8007ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e02c      	b.n	8007b6c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b12:	88fb      	ldrh	r3, [r7, #6]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d105      	bne.n	8007b24 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b18:	893b      	ldrh	r3, [r7, #8]
 8007b1a:	b2da      	uxtb	r2, r3
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	629a      	str	r2, [r3, #40]	; 0x28
 8007b22:	e015      	b.n	8007b50 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007b24:	893b      	ldrh	r3, [r7, #8]
 8007b26:	0a1b      	lsrs	r3, r3, #8
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b32:	69fa      	ldr	r2, [r7, #28]
 8007b34:	69b9      	ldr	r1, [r7, #24]
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f000 f8d6 	bl	8007ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d001      	beq.n	8007b46 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e012      	b.n	8007b6c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b46:	893b      	ldrh	r3, [r7, #8]
 8007b48:	b2da      	uxtb	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	2200      	movs	r2, #0
 8007b58:	2180      	movs	r1, #128	; 0x80
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	f000 f884 	bl	8007c68 <I2C_WaitOnFlagUntilTimeout>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d001      	beq.n	8007b6a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e000      	b.n	8007b6c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	80002000 	.word	0x80002000

08007b78 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b086      	sub	sp, #24
 8007b7c:	af02      	add	r7, sp, #8
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	4608      	mov	r0, r1
 8007b82:	4611      	mov	r1, r2
 8007b84:	461a      	mov	r2, r3
 8007b86:	4603      	mov	r3, r0
 8007b88:	817b      	strh	r3, [r7, #10]
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	813b      	strh	r3, [r7, #8]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007b92:	88fb      	ldrh	r3, [r7, #6]
 8007b94:	b2da      	uxtb	r2, r3
 8007b96:	8979      	ldrh	r1, [r7, #10]
 8007b98:	4b20      	ldr	r3, [pc, #128]	; (8007c1c <I2C_RequestMemoryRead+0xa4>)
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f000 fa0a 	bl	8007fb8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ba4:	69fa      	ldr	r2, [r7, #28]
 8007ba6:	69b9      	ldr	r1, [r7, #24]
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f000 f89d 	bl	8007ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d001      	beq.n	8007bb8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e02c      	b.n	8007c12 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007bb8:	88fb      	ldrh	r3, [r7, #6]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d105      	bne.n	8007bca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007bbe:	893b      	ldrh	r3, [r7, #8]
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	629a      	str	r2, [r3, #40]	; 0x28
 8007bc8:	e015      	b.n	8007bf6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007bca:	893b      	ldrh	r3, [r7, #8]
 8007bcc:	0a1b      	lsrs	r3, r3, #8
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bd8:	69fa      	ldr	r2, [r7, #28]
 8007bda:	69b9      	ldr	r1, [r7, #24]
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f000 f883 	bl	8007ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e012      	b.n	8007c12 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007bec:	893b      	ldrh	r3, [r7, #8]
 8007bee:	b2da      	uxtb	r2, r3
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	9300      	str	r3, [sp, #0]
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	2140      	movs	r1, #64	; 0x40
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f000 f831 	bl	8007c68 <I2C_WaitOnFlagUntilTimeout>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d001      	beq.n	8007c10 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e000      	b.n	8007c12 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	80002000 	.word	0x80002000

08007c20 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	f003 0302 	and.w	r3, r3, #2
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d103      	bne.n	8007c3e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	f003 0301 	and.w	r3, r3, #1
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d007      	beq.n	8007c5c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	699a      	ldr	r2, [r3, #24]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f042 0201 	orr.w	r2, r2, #1
 8007c5a:	619a      	str	r2, [r3, #24]
  }
}
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	603b      	str	r3, [r7, #0]
 8007c74:	4613      	mov	r3, r2
 8007c76:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c78:	e022      	b.n	8007cc0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c80:	d01e      	beq.n	8007cc0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c82:	f7fe fe7b 	bl	800697c <HAL_GetTick>
 8007c86:	4602      	mov	r2, r0
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	1ad3      	subs	r3, r2, r3
 8007c8c:	683a      	ldr	r2, [r7, #0]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d302      	bcc.n	8007c98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d113      	bne.n	8007cc0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c9c:	f043 0220 	orr.w	r2, r3, #32
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2220      	movs	r2, #32
 8007ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e00f      	b.n	8007ce0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	699a      	ldr	r2, [r3, #24]
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	4013      	ands	r3, r2
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	bf0c      	ite	eq
 8007cd0:	2301      	moveq	r3, #1
 8007cd2:	2300      	movne	r3, #0
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	79fb      	ldrb	r3, [r7, #7]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d0cd      	beq.n	8007c7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007cf4:	e02c      	b.n	8007d50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	68b9      	ldr	r1, [r7, #8]
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f000 f870 	bl	8007de0 <I2C_IsErrorOccurred>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d001      	beq.n	8007d0a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e02a      	b.n	8007d60 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d10:	d01e      	beq.n	8007d50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d12:	f7fe fe33 	bl	800697c <HAL_GetTick>
 8007d16:	4602      	mov	r2, r0
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d302      	bcc.n	8007d28 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d113      	bne.n	8007d50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d2c:	f043 0220 	orr.w	r2, r3, #32
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2220      	movs	r2, #32
 8007d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e007      	b.n	8007d60 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	f003 0302 	and.w	r3, r3, #2
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d1cb      	bne.n	8007cf6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d74:	e028      	b.n	8007dc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	68b9      	ldr	r1, [r7, #8]
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f000 f830 	bl	8007de0 <I2C_IsErrorOccurred>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d001      	beq.n	8007d8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e026      	b.n	8007dd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d8a:	f7fe fdf7 	bl	800697c <HAL_GetTick>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	1ad3      	subs	r3, r2, r3
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d302      	bcc.n	8007da0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d113      	bne.n	8007dc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007da4:	f043 0220 	orr.w	r2, r3, #32
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2220      	movs	r2, #32
 8007db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e007      	b.n	8007dd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	f003 0320 	and.w	r3, r3, #32
 8007dd2:	2b20      	cmp	r3, #32
 8007dd4:	d1cf      	bne.n	8007d76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b08a      	sub	sp, #40	; 0x28
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dec:	2300      	movs	r3, #0
 8007dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	f003 0310 	and.w	r3, r3, #16
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d075      	beq.n	8007ef8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2210      	movs	r2, #16
 8007e12:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007e14:	e056      	b.n	8007ec4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e1c:	d052      	beq.n	8007ec4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007e1e:	f7fe fdad 	bl	800697c <HAL_GetTick>
 8007e22:	4602      	mov	r2, r0
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d302      	bcc.n	8007e34 <I2C_IsErrorOccurred+0x54>
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d147      	bne.n	8007ec4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e3e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e46:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	699b      	ldr	r3, [r3, #24]
 8007e4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e56:	d12e      	bne.n	8007eb6 <I2C_IsErrorOccurred+0xd6>
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e5e:	d02a      	beq.n	8007eb6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007e60:	7cfb      	ldrb	r3, [r7, #19]
 8007e62:	2b20      	cmp	r3, #32
 8007e64:	d027      	beq.n	8007eb6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	685a      	ldr	r2, [r3, #4]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e74:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007e76:	f7fe fd81 	bl	800697c <HAL_GetTick>
 8007e7a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e7c:	e01b      	b.n	8007eb6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007e7e:	f7fe fd7d 	bl	800697c <HAL_GetTick>
 8007e82:	4602      	mov	r2, r0
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	2b19      	cmp	r3, #25
 8007e8a:	d914      	bls.n	8007eb6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e90:	f043 0220 	orr.w	r2, r3, #32
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2220      	movs	r2, #32
 8007e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	f003 0320 	and.w	r3, r3, #32
 8007ec0:	2b20      	cmp	r3, #32
 8007ec2:	d1dc      	bne.n	8007e7e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	699b      	ldr	r3, [r3, #24]
 8007eca:	f003 0320 	and.w	r3, r3, #32
 8007ece:	2b20      	cmp	r3, #32
 8007ed0:	d003      	beq.n	8007eda <I2C_IsErrorOccurred+0xfa>
 8007ed2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d09d      	beq.n	8007e16 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007eda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d103      	bne.n	8007eea <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2220      	movs	r2, #32
 8007ee8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007eea:	6a3b      	ldr	r3, [r7, #32]
 8007eec:	f043 0304 	orr.w	r3, r3, #4
 8007ef0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00b      	beq.n	8007f22 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
 8007f0c:	f043 0301 	orr.w	r3, r3, #1
 8007f10:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00b      	beq.n	8007f44 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007f2c:	6a3b      	ldr	r3, [r7, #32]
 8007f2e:	f043 0308 	orr.w	r3, r3, #8
 8007f32:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007f3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00b      	beq.n	8007f66 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	f043 0302 	orr.w	r3, r3, #2
 8007f54:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007f66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d01c      	beq.n	8007fa8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f7ff fe56 	bl	8007c20 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6859      	ldr	r1, [r3, #4]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	4b0d      	ldr	r3, [pc, #52]	; (8007fb4 <I2C_IsErrorOccurred+0x1d4>)
 8007f80:	400b      	ands	r3, r1
 8007f82:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f88:	6a3b      	ldr	r3, [r7, #32]
 8007f8a:	431a      	orrs	r2, r3
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2220      	movs	r2, #32
 8007f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3728      	adds	r7, #40	; 0x28
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	fe00e800 	.word	0xfe00e800

08007fb8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b087      	sub	sp, #28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	607b      	str	r3, [r7, #4]
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	817b      	strh	r3, [r7, #10]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007fca:	897b      	ldrh	r3, [r7, #10]
 8007fcc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007fd0:	7a7b      	ldrb	r3, [r7, #9]
 8007fd2:	041b      	lsls	r3, r3, #16
 8007fd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007fd8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007fde:	6a3b      	ldr	r3, [r7, #32]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fe6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	6a3b      	ldr	r3, [r7, #32]
 8007ff0:	0d5b      	lsrs	r3, r3, #21
 8007ff2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007ff6:	4b08      	ldr	r3, [pc, #32]	; (8008018 <I2C_TransferConfig+0x60>)
 8007ff8:	430b      	orrs	r3, r1
 8007ffa:	43db      	mvns	r3, r3
 8007ffc:	ea02 0103 	and.w	r1, r2, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	697a      	ldr	r2, [r7, #20]
 8008006:	430a      	orrs	r2, r1
 8008008:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800800a:	bf00      	nop
 800800c:	371c      	adds	r7, #28
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	03ff63ff 	.word	0x03ff63ff

0800801c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800802c:	b2db      	uxtb	r3, r3
 800802e:	2b20      	cmp	r3, #32
 8008030:	d138      	bne.n	80080a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008038:	2b01      	cmp	r3, #1
 800803a:	d101      	bne.n	8008040 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800803c:	2302      	movs	r3, #2
 800803e:	e032      	b.n	80080a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2224      	movs	r2, #36	; 0x24
 800804c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f022 0201 	bic.w	r2, r2, #1
 800805e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800806e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	6819      	ldr	r1, [r3, #0]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	683a      	ldr	r2, [r7, #0]
 800807c:	430a      	orrs	r2, r1
 800807e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f042 0201 	orr.w	r2, r2, #1
 800808e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2220      	movs	r2, #32
 8008094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80080a0:	2300      	movs	r3, #0
 80080a2:	e000      	b.n	80080a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80080a4:	2302      	movs	r3, #2
  }
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr

080080b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b085      	sub	sp, #20
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	2b20      	cmp	r3, #32
 80080c6:	d139      	bne.n	800813c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d101      	bne.n	80080d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80080d2:	2302      	movs	r3, #2
 80080d4:	e033      	b.n	800813e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2224      	movs	r2, #36	; 0x24
 80080e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f022 0201 	bic.w	r2, r2, #1
 80080f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008104:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	021b      	lsls	r3, r3, #8
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	4313      	orrs	r3, r2
 800810e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f042 0201 	orr.w	r2, r2, #1
 8008126:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2220      	movs	r2, #32
 800812c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008138:	2300      	movs	r3, #0
 800813a:	e000      	b.n	800813e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800813c:	2302      	movs	r3, #2
  }
}
 800813e:	4618      	mov	r0, r3
 8008140:	3714      	adds	r7, #20
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800814a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800814c:	b08f      	sub	sp, #60	; 0x3c
 800814e:	af0a      	add	r7, sp, #40	; 0x28
 8008150:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d101      	bne.n	800815c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e116      	b.n	800838a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b00      	cmp	r3, #0
 800816c:	d106      	bne.n	800817c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f7fd f81c 	bl	80051b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2203      	movs	r2, #3
 8008180:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800818c:	2b00      	cmp	r3, #0
 800818e:	d102      	bne.n	8008196 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4618      	mov	r0, r3
 800819c:	f004 fa8b 	bl	800c6b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	603b      	str	r3, [r7, #0]
 80081a6:	687e      	ldr	r6, [r7, #4]
 80081a8:	466d      	mov	r5, sp
 80081aa:	f106 0410 	add.w	r4, r6, #16
 80081ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80081b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80081b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80081b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80081b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80081ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80081be:	1d33      	adds	r3, r6, #4
 80081c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081c2:	6838      	ldr	r0, [r7, #0]
 80081c4:	f004 fa4b 	bl	800c65e <USB_CoreInit>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d005      	beq.n	80081da <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2202      	movs	r2, #2
 80081d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e0d7      	b.n	800838a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2100      	movs	r1, #0
 80081e0:	4618      	mov	r0, r3
 80081e2:	f004 fa79 	bl	800c6d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80081e6:	2300      	movs	r3, #0
 80081e8:	73fb      	strb	r3, [r7, #15]
 80081ea:	e04a      	b.n	8008282 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80081ec:	7bfa      	ldrb	r2, [r7, #15]
 80081ee:	6879      	ldr	r1, [r7, #4]
 80081f0:	4613      	mov	r3, r2
 80081f2:	00db      	lsls	r3, r3, #3
 80081f4:	4413      	add	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	440b      	add	r3, r1
 80081fa:	333d      	adds	r3, #61	; 0x3d
 80081fc:	2201      	movs	r2, #1
 80081fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008200:	7bfa      	ldrb	r2, [r7, #15]
 8008202:	6879      	ldr	r1, [r7, #4]
 8008204:	4613      	mov	r3, r2
 8008206:	00db      	lsls	r3, r3, #3
 8008208:	4413      	add	r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	440b      	add	r3, r1
 800820e:	333c      	adds	r3, #60	; 0x3c
 8008210:	7bfa      	ldrb	r2, [r7, #15]
 8008212:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008214:	7bfa      	ldrb	r2, [r7, #15]
 8008216:	7bfb      	ldrb	r3, [r7, #15]
 8008218:	b298      	uxth	r0, r3
 800821a:	6879      	ldr	r1, [r7, #4]
 800821c:	4613      	mov	r3, r2
 800821e:	00db      	lsls	r3, r3, #3
 8008220:	4413      	add	r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	440b      	add	r3, r1
 8008226:	3344      	adds	r3, #68	; 0x44
 8008228:	4602      	mov	r2, r0
 800822a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800822c:	7bfa      	ldrb	r2, [r7, #15]
 800822e:	6879      	ldr	r1, [r7, #4]
 8008230:	4613      	mov	r3, r2
 8008232:	00db      	lsls	r3, r3, #3
 8008234:	4413      	add	r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	440b      	add	r3, r1
 800823a:	3340      	adds	r3, #64	; 0x40
 800823c:	2200      	movs	r2, #0
 800823e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008240:	7bfa      	ldrb	r2, [r7, #15]
 8008242:	6879      	ldr	r1, [r7, #4]
 8008244:	4613      	mov	r3, r2
 8008246:	00db      	lsls	r3, r3, #3
 8008248:	4413      	add	r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	440b      	add	r3, r1
 800824e:	3348      	adds	r3, #72	; 0x48
 8008250:	2200      	movs	r2, #0
 8008252:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008254:	7bfa      	ldrb	r2, [r7, #15]
 8008256:	6879      	ldr	r1, [r7, #4]
 8008258:	4613      	mov	r3, r2
 800825a:	00db      	lsls	r3, r3, #3
 800825c:	4413      	add	r3, r2
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	440b      	add	r3, r1
 8008262:	334c      	adds	r3, #76	; 0x4c
 8008264:	2200      	movs	r2, #0
 8008266:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008268:	7bfa      	ldrb	r2, [r7, #15]
 800826a:	6879      	ldr	r1, [r7, #4]
 800826c:	4613      	mov	r3, r2
 800826e:	00db      	lsls	r3, r3, #3
 8008270:	4413      	add	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	440b      	add	r3, r1
 8008276:	3354      	adds	r3, #84	; 0x54
 8008278:	2200      	movs	r2, #0
 800827a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800827c:	7bfb      	ldrb	r3, [r7, #15]
 800827e:	3301      	adds	r3, #1
 8008280:	73fb      	strb	r3, [r7, #15]
 8008282:	7bfa      	ldrb	r2, [r7, #15]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	429a      	cmp	r2, r3
 800828a:	d3af      	bcc.n	80081ec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800828c:	2300      	movs	r3, #0
 800828e:	73fb      	strb	r3, [r7, #15]
 8008290:	e044      	b.n	800831c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008292:	7bfa      	ldrb	r2, [r7, #15]
 8008294:	6879      	ldr	r1, [r7, #4]
 8008296:	4613      	mov	r3, r2
 8008298:	00db      	lsls	r3, r3, #3
 800829a:	4413      	add	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	440b      	add	r3, r1
 80082a0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80082a4:	2200      	movs	r2, #0
 80082a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80082a8:	7bfa      	ldrb	r2, [r7, #15]
 80082aa:	6879      	ldr	r1, [r7, #4]
 80082ac:	4613      	mov	r3, r2
 80082ae:	00db      	lsls	r3, r3, #3
 80082b0:	4413      	add	r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	440b      	add	r3, r1
 80082b6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80082ba:	7bfa      	ldrb	r2, [r7, #15]
 80082bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80082be:	7bfa      	ldrb	r2, [r7, #15]
 80082c0:	6879      	ldr	r1, [r7, #4]
 80082c2:	4613      	mov	r3, r2
 80082c4:	00db      	lsls	r3, r3, #3
 80082c6:	4413      	add	r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	440b      	add	r3, r1
 80082cc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80082d0:	2200      	movs	r2, #0
 80082d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80082d4:	7bfa      	ldrb	r2, [r7, #15]
 80082d6:	6879      	ldr	r1, [r7, #4]
 80082d8:	4613      	mov	r3, r2
 80082da:	00db      	lsls	r3, r3, #3
 80082dc:	4413      	add	r3, r2
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	440b      	add	r3, r1
 80082e2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80082e6:	2200      	movs	r2, #0
 80082e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80082ea:	7bfa      	ldrb	r2, [r7, #15]
 80082ec:	6879      	ldr	r1, [r7, #4]
 80082ee:	4613      	mov	r3, r2
 80082f0:	00db      	lsls	r3, r3, #3
 80082f2:	4413      	add	r3, r2
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	440b      	add	r3, r1
 80082f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80082fc:	2200      	movs	r2, #0
 80082fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008300:	7bfa      	ldrb	r2, [r7, #15]
 8008302:	6879      	ldr	r1, [r7, #4]
 8008304:	4613      	mov	r3, r2
 8008306:	00db      	lsls	r3, r3, #3
 8008308:	4413      	add	r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	440b      	add	r3, r1
 800830e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008312:	2200      	movs	r2, #0
 8008314:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008316:	7bfb      	ldrb	r3, [r7, #15]
 8008318:	3301      	adds	r3, #1
 800831a:	73fb      	strb	r3, [r7, #15]
 800831c:	7bfa      	ldrb	r2, [r7, #15]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	429a      	cmp	r2, r3
 8008324:	d3b5      	bcc.n	8008292 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	603b      	str	r3, [r7, #0]
 800832c:	687e      	ldr	r6, [r7, #4]
 800832e:	466d      	mov	r5, sp
 8008330:	f106 0410 	add.w	r4, r6, #16
 8008334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800833a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800833c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008340:	e885 0003 	stmia.w	r5, {r0, r1}
 8008344:	1d33      	adds	r3, r6, #4
 8008346:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008348:	6838      	ldr	r0, [r7, #0]
 800834a:	f004 fa11 	bl	800c770 <USB_DevInit>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d005      	beq.n	8008360 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2202      	movs	r2, #2
 8008358:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e014      	b.n	800838a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008374:	2b01      	cmp	r3, #1
 8008376:	d102      	bne.n	800837e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 f80a 	bl	8008392 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4618      	mov	r0, r3
 8008384:	f004 fbbd 	bl	800cb02 <USB_DevDisconnect>

  return HAL_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3714      	adds	r7, #20
 800838e:	46bd      	mov	sp, r7
 8008390:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008392 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008392:	b480      	push	{r7}
 8008394:	b085      	sub	sp, #20
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083c4:	f043 0303 	orr.w	r3, r3, #3
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
	...

080083dc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80083dc:	b480      	push	{r7}
 80083de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083e0:	4b05      	ldr	r3, [pc, #20]	; (80083f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a04      	ldr	r2, [pc, #16]	; (80083f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80083e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083ea:	6013      	str	r3, [r2, #0]
}
 80083ec:	bf00      	nop
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	40007000 	.word	0x40007000

080083fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80083fc:	b480      	push	{r7}
 80083fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008400:	4b04      	ldr	r3, [pc, #16]	; (8008414 <HAL_PWREx_GetVoltageRange+0x18>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008408:	4618      	mov	r0, r3
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	40007000 	.word	0x40007000

08008418 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008418:	b480      	push	{r7}
 800841a:	b085      	sub	sp, #20
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008426:	d130      	bne.n	800848a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008428:	4b23      	ldr	r3, [pc, #140]	; (80084b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008434:	d038      	beq.n	80084a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008436:	4b20      	ldr	r3, [pc, #128]	; (80084b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800843e:	4a1e      	ldr	r2, [pc, #120]	; (80084b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008440:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008444:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008446:	4b1d      	ldr	r3, [pc, #116]	; (80084bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2232      	movs	r2, #50	; 0x32
 800844c:	fb02 f303 	mul.w	r3, r2, r3
 8008450:	4a1b      	ldr	r2, [pc, #108]	; (80084c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008452:	fba2 2303 	umull	r2, r3, r2, r3
 8008456:	0c9b      	lsrs	r3, r3, #18
 8008458:	3301      	adds	r3, #1
 800845a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800845c:	e002      	b.n	8008464 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	3b01      	subs	r3, #1
 8008462:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008464:	4b14      	ldr	r3, [pc, #80]	; (80084b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008466:	695b      	ldr	r3, [r3, #20]
 8008468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800846c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008470:	d102      	bne.n	8008478 <HAL_PWREx_ControlVoltageScaling+0x60>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d1f2      	bne.n	800845e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008478:	4b0f      	ldr	r3, [pc, #60]	; (80084b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800847a:	695b      	ldr	r3, [r3, #20]
 800847c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008484:	d110      	bne.n	80084a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008486:	2303      	movs	r3, #3
 8008488:	e00f      	b.n	80084aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800848a:	4b0b      	ldr	r3, [pc, #44]	; (80084b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008496:	d007      	beq.n	80084a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008498:	4b07      	ldr	r3, [pc, #28]	; (80084b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80084a0:	4a05      	ldr	r2, [pc, #20]	; (80084b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80084a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80084a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3714      	adds	r7, #20
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	40007000 	.word	0x40007000
 80084bc:	2000000c 	.word	0x2000000c
 80084c0:	431bde83 	.word	0x431bde83

080084c4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80084c4:	b480      	push	{r7}
 80084c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80084c8:	4b05      	ldr	r3, [pc, #20]	; (80084e0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	4a04      	ldr	r2, [pc, #16]	; (80084e0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80084ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80084d2:	6053      	str	r3, [r2, #4]
}
 80084d4:	bf00      	nop
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	40007000 	.word	0x40007000

080084e4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b086      	sub	sp, #24
 80084e8:	af02      	add	r7, sp, #8
 80084ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80084ec:	f7fe fa46 	bl	800697c <HAL_GetTick>
 80084f0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d101      	bne.n	80084fc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	e063      	b.n	80085c4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008502:	b2db      	uxtb	r3, r3
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10b      	bne.n	8008520 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f7fc fcbd 	bl	8004e90 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008516:	f241 3188 	movw	r1, #5000	; 0x1388
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 f858 	bl	80085d0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	3b01      	subs	r3, #1
 8008530:	021a      	lsls	r2, r3, #8
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	430a      	orrs	r2, r1
 8008538:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853e:	9300      	str	r3, [sp, #0]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	2120      	movs	r1, #32
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f850 	bl	80085ec <QSPI_WaitFlagStateUntilTimeout>
 800854c:	4603      	mov	r3, r0
 800854e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008550:	7afb      	ldrb	r3, [r7, #11]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d131      	bne.n	80085ba <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008560:	f023 0310 	bic.w	r3, r3, #16
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	6852      	ldr	r2, [r2, #4]
 8008568:	0611      	lsls	r1, r2, #24
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	68d2      	ldr	r2, [r2, #12]
 800856e:	4311      	orrs	r1, r2
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	6812      	ldr	r2, [r2, #0]
 8008574:	430b      	orrs	r3, r1
 8008576:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	685a      	ldr	r2, [r3, #4]
 800857e:	4b13      	ldr	r3, [pc, #76]	; (80085cc <HAL_QSPI_Init+0xe8>)
 8008580:	4013      	ands	r3, r2
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	6912      	ldr	r2, [r2, #16]
 8008586:	0411      	lsls	r1, r2, #16
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	6952      	ldr	r2, [r2, #20]
 800858c:	4311      	orrs	r1, r2
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	6992      	ldr	r2, [r2, #24]
 8008592:	4311      	orrs	r1, r2
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	6812      	ldr	r2, [r2, #0]
 8008598:	430b      	orrs	r3, r1
 800859a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f042 0201 	orr.w	r2, r2, #1
 80085aa:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80085c2:	7afb      	ldrb	r3, [r7, #11]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	ffe0f8fe 	.word	0xffe0f8fe

080085d0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	641a      	str	r2, [r3, #64]	; 0x40
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	603b      	str	r3, [r7, #0]
 80085f8:	4613      	mov	r3, r2
 80085fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80085fc:	e01a      	b.n	8008634 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008604:	d016      	beq.n	8008634 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008606:	f7fe f9b9 	bl	800697c <HAL_GetTick>
 800860a:	4602      	mov	r2, r0
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	1ad3      	subs	r3, r2, r3
 8008610:	69ba      	ldr	r2, [r7, #24]
 8008612:	429a      	cmp	r2, r3
 8008614:	d302      	bcc.n	800861c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10b      	bne.n	8008634 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2204      	movs	r2, #4
 8008620:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008628:	f043 0201 	orr.w	r2, r3, #1
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e00e      	b.n	8008652 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	689a      	ldr	r2, [r3, #8]
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	4013      	ands	r3, r2
 800863e:	2b00      	cmp	r3, #0
 8008640:	bf14      	ite	ne
 8008642:	2301      	movne	r3, #1
 8008644:	2300      	moveq	r3, #0
 8008646:	b2db      	uxtb	r3, r3
 8008648:	461a      	mov	r2, r3
 800864a:	79fb      	ldrb	r3, [r7, #7]
 800864c:	429a      	cmp	r2, r3
 800864e:	d1d6      	bne.n	80085fe <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
	...

0800865c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b088      	sub	sp, #32
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e3ca      	b.n	8008e04 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800866e:	4b97      	ldr	r3, [pc, #604]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f003 030c 	and.w	r3, r3, #12
 8008676:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008678:	4b94      	ldr	r3, [pc, #592]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	f003 0303 	and.w	r3, r3, #3
 8008680:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 0310 	and.w	r3, r3, #16
 800868a:	2b00      	cmp	r3, #0
 800868c:	f000 80e4 	beq.w	8008858 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d007      	beq.n	80086a6 <HAL_RCC_OscConfig+0x4a>
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	2b0c      	cmp	r3, #12
 800869a:	f040 808b 	bne.w	80087b4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	f040 8087 	bne.w	80087b4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80086a6:	4b89      	ldr	r3, [pc, #548]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 0302 	and.w	r3, r3, #2
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d005      	beq.n	80086be <HAL_RCC_OscConfig+0x62>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d101      	bne.n	80086be <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	e3a2      	b.n	8008e04 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a1a      	ldr	r2, [r3, #32]
 80086c2:	4b82      	ldr	r3, [pc, #520]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 0308 	and.w	r3, r3, #8
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d004      	beq.n	80086d8 <HAL_RCC_OscConfig+0x7c>
 80086ce:	4b7f      	ldr	r3, [pc, #508]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086d6:	e005      	b.n	80086e4 <HAL_RCC_OscConfig+0x88>
 80086d8:	4b7c      	ldr	r3, [pc, #496]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 80086da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086de:	091b      	lsrs	r3, r3, #4
 80086e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d223      	bcs.n	8008730 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a1b      	ldr	r3, [r3, #32]
 80086ec:	4618      	mov	r0, r3
 80086ee:	f000 fd55 	bl	800919c <RCC_SetFlashLatencyFromMSIRange>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d001      	beq.n	80086fc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	e383      	b.n	8008e04 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80086fc:	4b73      	ldr	r3, [pc, #460]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a72      	ldr	r2, [pc, #456]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 8008702:	f043 0308 	orr.w	r3, r3, #8
 8008706:	6013      	str	r3, [r2, #0]
 8008708:	4b70      	ldr	r3, [pc, #448]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a1b      	ldr	r3, [r3, #32]
 8008714:	496d      	ldr	r1, [pc, #436]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 8008716:	4313      	orrs	r3, r2
 8008718:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800871a:	4b6c      	ldr	r3, [pc, #432]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	69db      	ldr	r3, [r3, #28]
 8008726:	021b      	lsls	r3, r3, #8
 8008728:	4968      	ldr	r1, [pc, #416]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 800872a:	4313      	orrs	r3, r2
 800872c:	604b      	str	r3, [r1, #4]
 800872e:	e025      	b.n	800877c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008730:	4b66      	ldr	r3, [pc, #408]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a65      	ldr	r2, [pc, #404]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 8008736:	f043 0308 	orr.w	r3, r3, #8
 800873a:	6013      	str	r3, [r2, #0]
 800873c:	4b63      	ldr	r3, [pc, #396]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a1b      	ldr	r3, [r3, #32]
 8008748:	4960      	ldr	r1, [pc, #384]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 800874a:	4313      	orrs	r3, r2
 800874c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800874e:	4b5f      	ldr	r3, [pc, #380]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	69db      	ldr	r3, [r3, #28]
 800875a:	021b      	lsls	r3, r3, #8
 800875c:	495b      	ldr	r1, [pc, #364]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 800875e:	4313      	orrs	r3, r2
 8008760:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d109      	bne.n	800877c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a1b      	ldr	r3, [r3, #32]
 800876c:	4618      	mov	r0, r3
 800876e:	f000 fd15 	bl	800919c <RCC_SetFlashLatencyFromMSIRange>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d001      	beq.n	800877c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	e343      	b.n	8008e04 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800877c:	f000 fc4a 	bl	8009014 <HAL_RCC_GetSysClockFreq>
 8008780:	4602      	mov	r2, r0
 8008782:	4b52      	ldr	r3, [pc, #328]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	091b      	lsrs	r3, r3, #4
 8008788:	f003 030f 	and.w	r3, r3, #15
 800878c:	4950      	ldr	r1, [pc, #320]	; (80088d0 <HAL_RCC_OscConfig+0x274>)
 800878e:	5ccb      	ldrb	r3, [r1, r3]
 8008790:	f003 031f 	and.w	r3, r3, #31
 8008794:	fa22 f303 	lsr.w	r3, r2, r3
 8008798:	4a4e      	ldr	r2, [pc, #312]	; (80088d4 <HAL_RCC_OscConfig+0x278>)
 800879a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800879c:	4b4e      	ldr	r3, [pc, #312]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7fe f89b 	bl	80068dc <HAL_InitTick>
 80087a6:	4603      	mov	r3, r0
 80087a8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80087aa:	7bfb      	ldrb	r3, [r7, #15]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d052      	beq.n	8008856 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
 80087b2:	e327      	b.n	8008e04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	699b      	ldr	r3, [r3, #24]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d032      	beq.n	8008822 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80087bc:	4b43      	ldr	r3, [pc, #268]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a42      	ldr	r2, [pc, #264]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 80087c2:	f043 0301 	orr.w	r3, r3, #1
 80087c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80087c8:	f7fe f8d8 	bl	800697c <HAL_GetTick>
 80087cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80087ce:	e008      	b.n	80087e2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80087d0:	f7fe f8d4 	bl	800697c <HAL_GetTick>
 80087d4:	4602      	mov	r2, r0
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d901      	bls.n	80087e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80087de:	2303      	movs	r3, #3
 80087e0:	e310      	b.n	8008e04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80087e2:	4b3a      	ldr	r3, [pc, #232]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 0302 	and.w	r3, r3, #2
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d0f0      	beq.n	80087d0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80087ee:	4b37      	ldr	r3, [pc, #220]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a36      	ldr	r2, [pc, #216]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 80087f4:	f043 0308 	orr.w	r3, r3, #8
 80087f8:	6013      	str	r3, [r2, #0]
 80087fa:	4b34      	ldr	r3, [pc, #208]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a1b      	ldr	r3, [r3, #32]
 8008806:	4931      	ldr	r1, [pc, #196]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 8008808:	4313      	orrs	r3, r2
 800880a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800880c:	4b2f      	ldr	r3, [pc, #188]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	69db      	ldr	r3, [r3, #28]
 8008818:	021b      	lsls	r3, r3, #8
 800881a:	492c      	ldr	r1, [pc, #176]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 800881c:	4313      	orrs	r3, r2
 800881e:	604b      	str	r3, [r1, #4]
 8008820:	e01a      	b.n	8008858 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008822:	4b2a      	ldr	r3, [pc, #168]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a29      	ldr	r2, [pc, #164]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 8008828:	f023 0301 	bic.w	r3, r3, #1
 800882c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800882e:	f7fe f8a5 	bl	800697c <HAL_GetTick>
 8008832:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008834:	e008      	b.n	8008848 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008836:	f7fe f8a1 	bl	800697c <HAL_GetTick>
 800883a:	4602      	mov	r2, r0
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	2b02      	cmp	r3, #2
 8008842:	d901      	bls.n	8008848 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8008844:	2303      	movs	r3, #3
 8008846:	e2dd      	b.n	8008e04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008848:	4b20      	ldr	r3, [pc, #128]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 0302 	and.w	r3, r3, #2
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1f0      	bne.n	8008836 <HAL_RCC_OscConfig+0x1da>
 8008854:	e000      	b.n	8008858 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008856:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 0301 	and.w	r3, r3, #1
 8008860:	2b00      	cmp	r3, #0
 8008862:	d074      	beq.n	800894e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	2b08      	cmp	r3, #8
 8008868:	d005      	beq.n	8008876 <HAL_RCC_OscConfig+0x21a>
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	2b0c      	cmp	r3, #12
 800886e:	d10e      	bne.n	800888e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	2b03      	cmp	r3, #3
 8008874:	d10b      	bne.n	800888e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008876:	4b15      	ldr	r3, [pc, #84]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800887e:	2b00      	cmp	r3, #0
 8008880:	d064      	beq.n	800894c <HAL_RCC_OscConfig+0x2f0>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d160      	bne.n	800894c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	e2ba      	b.n	8008e04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008896:	d106      	bne.n	80088a6 <HAL_RCC_OscConfig+0x24a>
 8008898:	4b0c      	ldr	r3, [pc, #48]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a0b      	ldr	r2, [pc, #44]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 800889e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088a2:	6013      	str	r3, [r2, #0]
 80088a4:	e026      	b.n	80088f4 <HAL_RCC_OscConfig+0x298>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80088ae:	d115      	bne.n	80088dc <HAL_RCC_OscConfig+0x280>
 80088b0:	4b06      	ldr	r3, [pc, #24]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a05      	ldr	r2, [pc, #20]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 80088b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088ba:	6013      	str	r3, [r2, #0]
 80088bc:	4b03      	ldr	r3, [pc, #12]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a02      	ldr	r2, [pc, #8]	; (80088cc <HAL_RCC_OscConfig+0x270>)
 80088c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088c6:	6013      	str	r3, [r2, #0]
 80088c8:	e014      	b.n	80088f4 <HAL_RCC_OscConfig+0x298>
 80088ca:	bf00      	nop
 80088cc:	40021000 	.word	0x40021000
 80088d0:	0800f480 	.word	0x0800f480
 80088d4:	2000000c 	.word	0x2000000c
 80088d8:	20000010 	.word	0x20000010
 80088dc:	4ba0      	ldr	r3, [pc, #640]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a9f      	ldr	r2, [pc, #636]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 80088e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088e6:	6013      	str	r3, [r2, #0]
 80088e8:	4b9d      	ldr	r3, [pc, #628]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a9c      	ldr	r2, [pc, #624]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 80088ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d013      	beq.n	8008924 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088fc:	f7fe f83e 	bl	800697c <HAL_GetTick>
 8008900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008902:	e008      	b.n	8008916 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008904:	f7fe f83a 	bl	800697c <HAL_GetTick>
 8008908:	4602      	mov	r2, r0
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	2b64      	cmp	r3, #100	; 0x64
 8008910:	d901      	bls.n	8008916 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008912:	2303      	movs	r3, #3
 8008914:	e276      	b.n	8008e04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008916:	4b92      	ldr	r3, [pc, #584]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d0f0      	beq.n	8008904 <HAL_RCC_OscConfig+0x2a8>
 8008922:	e014      	b.n	800894e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008924:	f7fe f82a 	bl	800697c <HAL_GetTick>
 8008928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800892a:	e008      	b.n	800893e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800892c:	f7fe f826 	bl	800697c <HAL_GetTick>
 8008930:	4602      	mov	r2, r0
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	2b64      	cmp	r3, #100	; 0x64
 8008938:	d901      	bls.n	800893e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800893a:	2303      	movs	r3, #3
 800893c:	e262      	b.n	8008e04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800893e:	4b88      	ldr	r3, [pc, #544]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1f0      	bne.n	800892c <HAL_RCC_OscConfig+0x2d0>
 800894a:	e000      	b.n	800894e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800894c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 0302 	and.w	r3, r3, #2
 8008956:	2b00      	cmp	r3, #0
 8008958:	d060      	beq.n	8008a1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	2b04      	cmp	r3, #4
 800895e:	d005      	beq.n	800896c <HAL_RCC_OscConfig+0x310>
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	2b0c      	cmp	r3, #12
 8008964:	d119      	bne.n	800899a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	2b02      	cmp	r3, #2
 800896a:	d116      	bne.n	800899a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800896c:	4b7c      	ldr	r3, [pc, #496]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008974:	2b00      	cmp	r3, #0
 8008976:	d005      	beq.n	8008984 <HAL_RCC_OscConfig+0x328>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d101      	bne.n	8008984 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	e23f      	b.n	8008e04 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008984:	4b76      	ldr	r3, [pc, #472]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	061b      	lsls	r3, r3, #24
 8008992:	4973      	ldr	r1, [pc, #460]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 8008994:	4313      	orrs	r3, r2
 8008996:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008998:	e040      	b.n	8008a1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d023      	beq.n	80089ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80089a2:	4b6f      	ldr	r3, [pc, #444]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a6e      	ldr	r2, [pc, #440]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 80089a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ae:	f7fd ffe5 	bl	800697c <HAL_GetTick>
 80089b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80089b4:	e008      	b.n	80089c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089b6:	f7fd ffe1 	bl	800697c <HAL_GetTick>
 80089ba:	4602      	mov	r2, r0
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	1ad3      	subs	r3, r2, r3
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d901      	bls.n	80089c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e21d      	b.n	8008e04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80089c8:	4b65      	ldr	r3, [pc, #404]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d0f0      	beq.n	80089b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089d4:	4b62      	ldr	r3, [pc, #392]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	061b      	lsls	r3, r3, #24
 80089e2:	495f      	ldr	r1, [pc, #380]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 80089e4:	4313      	orrs	r3, r2
 80089e6:	604b      	str	r3, [r1, #4]
 80089e8:	e018      	b.n	8008a1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089ea:	4b5d      	ldr	r3, [pc, #372]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a5c      	ldr	r2, [pc, #368]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 80089f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089f6:	f7fd ffc1 	bl	800697c <HAL_GetTick>
 80089fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80089fc:	e008      	b.n	8008a10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089fe:	f7fd ffbd 	bl	800697c <HAL_GetTick>
 8008a02:	4602      	mov	r2, r0
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d901      	bls.n	8008a10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	e1f9      	b.n	8008e04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008a10:	4b53      	ldr	r3, [pc, #332]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1f0      	bne.n	80089fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 0308 	and.w	r3, r3, #8
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d03c      	beq.n	8008aa2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	695b      	ldr	r3, [r3, #20]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d01c      	beq.n	8008a6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a30:	4b4b      	ldr	r3, [pc, #300]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 8008a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a36:	4a4a      	ldr	r2, [pc, #296]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 8008a38:	f043 0301 	orr.w	r3, r3, #1
 8008a3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a40:	f7fd ff9c 	bl	800697c <HAL_GetTick>
 8008a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008a46:	e008      	b.n	8008a5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a48:	f7fd ff98 	bl	800697c <HAL_GetTick>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d901      	bls.n	8008a5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008a56:	2303      	movs	r3, #3
 8008a58:	e1d4      	b.n	8008e04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008a5a:	4b41      	ldr	r3, [pc, #260]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 8008a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a60:	f003 0302 	and.w	r3, r3, #2
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d0ef      	beq.n	8008a48 <HAL_RCC_OscConfig+0x3ec>
 8008a68:	e01b      	b.n	8008aa2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a6a:	4b3d      	ldr	r3, [pc, #244]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 8008a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a70:	4a3b      	ldr	r2, [pc, #236]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 8008a72:	f023 0301 	bic.w	r3, r3, #1
 8008a76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a7a:	f7fd ff7f 	bl	800697c <HAL_GetTick>
 8008a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008a80:	e008      	b.n	8008a94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a82:	f7fd ff7b 	bl	800697c <HAL_GetTick>
 8008a86:	4602      	mov	r2, r0
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	d901      	bls.n	8008a94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008a90:	2303      	movs	r3, #3
 8008a92:	e1b7      	b.n	8008e04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008a94:	4b32      	ldr	r3, [pc, #200]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 8008a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a9a:	f003 0302 	and.w	r3, r3, #2
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d1ef      	bne.n	8008a82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f003 0304 	and.w	r3, r3, #4
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f000 80a6 	beq.w	8008bfc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008ab4:	4b2a      	ldr	r3, [pc, #168]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 8008ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d10d      	bne.n	8008adc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ac0:	4b27      	ldr	r3, [pc, #156]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 8008ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ac4:	4a26      	ldr	r2, [pc, #152]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 8008ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008aca:	6593      	str	r3, [r2, #88]	; 0x58
 8008acc:	4b24      	ldr	r3, [pc, #144]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 8008ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ad4:	60bb      	str	r3, [r7, #8]
 8008ad6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008adc:	4b21      	ldr	r3, [pc, #132]	; (8008b64 <HAL_RCC_OscConfig+0x508>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d118      	bne.n	8008b1a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008ae8:	4b1e      	ldr	r3, [pc, #120]	; (8008b64 <HAL_RCC_OscConfig+0x508>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a1d      	ldr	r2, [pc, #116]	; (8008b64 <HAL_RCC_OscConfig+0x508>)
 8008aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008af2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008af4:	f7fd ff42 	bl	800697c <HAL_GetTick>
 8008af8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008afa:	e008      	b.n	8008b0e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008afc:	f7fd ff3e 	bl	800697c <HAL_GetTick>
 8008b00:	4602      	mov	r2, r0
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	1ad3      	subs	r3, r2, r3
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d901      	bls.n	8008b0e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	e17a      	b.n	8008e04 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b0e:	4b15      	ldr	r3, [pc, #84]	; (8008b64 <HAL_RCC_OscConfig+0x508>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d0f0      	beq.n	8008afc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d108      	bne.n	8008b34 <HAL_RCC_OscConfig+0x4d8>
 8008b22:	4b0f      	ldr	r3, [pc, #60]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 8008b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b28:	4a0d      	ldr	r2, [pc, #52]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 8008b2a:	f043 0301 	orr.w	r3, r3, #1
 8008b2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008b32:	e029      	b.n	8008b88 <HAL_RCC_OscConfig+0x52c>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	2b05      	cmp	r3, #5
 8008b3a:	d115      	bne.n	8008b68 <HAL_RCC_OscConfig+0x50c>
 8008b3c:	4b08      	ldr	r3, [pc, #32]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 8008b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b42:	4a07      	ldr	r2, [pc, #28]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 8008b44:	f043 0304 	orr.w	r3, r3, #4
 8008b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008b4c:	4b04      	ldr	r3, [pc, #16]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 8008b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b52:	4a03      	ldr	r2, [pc, #12]	; (8008b60 <HAL_RCC_OscConfig+0x504>)
 8008b54:	f043 0301 	orr.w	r3, r3, #1
 8008b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008b5c:	e014      	b.n	8008b88 <HAL_RCC_OscConfig+0x52c>
 8008b5e:	bf00      	nop
 8008b60:	40021000 	.word	0x40021000
 8008b64:	40007000 	.word	0x40007000
 8008b68:	4b9c      	ldr	r3, [pc, #624]	; (8008ddc <HAL_RCC_OscConfig+0x780>)
 8008b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b6e:	4a9b      	ldr	r2, [pc, #620]	; (8008ddc <HAL_RCC_OscConfig+0x780>)
 8008b70:	f023 0301 	bic.w	r3, r3, #1
 8008b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008b78:	4b98      	ldr	r3, [pc, #608]	; (8008ddc <HAL_RCC_OscConfig+0x780>)
 8008b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b7e:	4a97      	ldr	r2, [pc, #604]	; (8008ddc <HAL_RCC_OscConfig+0x780>)
 8008b80:	f023 0304 	bic.w	r3, r3, #4
 8008b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d016      	beq.n	8008bbe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b90:	f7fd fef4 	bl	800697c <HAL_GetTick>
 8008b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b96:	e00a      	b.n	8008bae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b98:	f7fd fef0 	bl	800697c <HAL_GetTick>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	1ad3      	subs	r3, r2, r3
 8008ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d901      	bls.n	8008bae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008baa:	2303      	movs	r3, #3
 8008bac:	e12a      	b.n	8008e04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008bae:	4b8b      	ldr	r3, [pc, #556]	; (8008ddc <HAL_RCC_OscConfig+0x780>)
 8008bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bb4:	f003 0302 	and.w	r3, r3, #2
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d0ed      	beq.n	8008b98 <HAL_RCC_OscConfig+0x53c>
 8008bbc:	e015      	b.n	8008bea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bbe:	f7fd fedd 	bl	800697c <HAL_GetTick>
 8008bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008bc4:	e00a      	b.n	8008bdc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bc6:	f7fd fed9 	bl	800697c <HAL_GetTick>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d901      	bls.n	8008bdc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	e113      	b.n	8008e04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008bdc:	4b7f      	ldr	r3, [pc, #508]	; (8008ddc <HAL_RCC_OscConfig+0x780>)
 8008bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008be2:	f003 0302 	and.w	r3, r3, #2
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1ed      	bne.n	8008bc6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008bea:	7ffb      	ldrb	r3, [r7, #31]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d105      	bne.n	8008bfc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bf0:	4b7a      	ldr	r3, [pc, #488]	; (8008ddc <HAL_RCC_OscConfig+0x780>)
 8008bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bf4:	4a79      	ldr	r2, [pc, #484]	; (8008ddc <HAL_RCC_OscConfig+0x780>)
 8008bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bfa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f000 80fe 	beq.w	8008e02 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	f040 80d0 	bne.w	8008db0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008c10:	4b72      	ldr	r3, [pc, #456]	; (8008ddc <HAL_RCC_OscConfig+0x780>)
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f003 0203 	and.w	r2, r3, #3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d130      	bne.n	8008c86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d127      	bne.n	8008c86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c40:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d11f      	bne.n	8008c86 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008c50:	2a07      	cmp	r2, #7
 8008c52:	bf14      	ite	ne
 8008c54:	2201      	movne	r2, #1
 8008c56:	2200      	moveq	r2, #0
 8008c58:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d113      	bne.n	8008c86 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c68:	085b      	lsrs	r3, r3, #1
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d109      	bne.n	8008c86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7c:	085b      	lsrs	r3, r3, #1
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d06e      	beq.n	8008d64 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	2b0c      	cmp	r3, #12
 8008c8a:	d069      	beq.n	8008d60 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008c8c:	4b53      	ldr	r3, [pc, #332]	; (8008ddc <HAL_RCC_OscConfig+0x780>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d105      	bne.n	8008ca4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008c98:	4b50      	ldr	r3, [pc, #320]	; (8008ddc <HAL_RCC_OscConfig+0x780>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d001      	beq.n	8008ca8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e0ad      	b.n	8008e04 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008ca8:	4b4c      	ldr	r3, [pc, #304]	; (8008ddc <HAL_RCC_OscConfig+0x780>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a4b      	ldr	r2, [pc, #300]	; (8008ddc <HAL_RCC_OscConfig+0x780>)
 8008cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008cb2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008cb4:	f7fd fe62 	bl	800697c <HAL_GetTick>
 8008cb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008cba:	e008      	b.n	8008cce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cbc:	f7fd fe5e 	bl	800697c <HAL_GetTick>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	d901      	bls.n	8008cce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	e09a      	b.n	8008e04 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008cce:	4b43      	ldr	r3, [pc, #268]	; (8008ddc <HAL_RCC_OscConfig+0x780>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1f0      	bne.n	8008cbc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008cda:	4b40      	ldr	r3, [pc, #256]	; (8008ddc <HAL_RCC_OscConfig+0x780>)
 8008cdc:	68da      	ldr	r2, [r3, #12]
 8008cde:	4b40      	ldr	r3, [pc, #256]	; (8008de0 <HAL_RCC_OscConfig+0x784>)
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008cea:	3a01      	subs	r2, #1
 8008cec:	0112      	lsls	r2, r2, #4
 8008cee:	4311      	orrs	r1, r2
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008cf4:	0212      	lsls	r2, r2, #8
 8008cf6:	4311      	orrs	r1, r2
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008cfc:	0852      	lsrs	r2, r2, #1
 8008cfe:	3a01      	subs	r2, #1
 8008d00:	0552      	lsls	r2, r2, #21
 8008d02:	4311      	orrs	r1, r2
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008d08:	0852      	lsrs	r2, r2, #1
 8008d0a:	3a01      	subs	r2, #1
 8008d0c:	0652      	lsls	r2, r2, #25
 8008d0e:	4311      	orrs	r1, r2
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008d14:	0912      	lsrs	r2, r2, #4
 8008d16:	0452      	lsls	r2, r2, #17
 8008d18:	430a      	orrs	r2, r1
 8008d1a:	4930      	ldr	r1, [pc, #192]	; (8008ddc <HAL_RCC_OscConfig+0x780>)
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008d20:	4b2e      	ldr	r3, [pc, #184]	; (8008ddc <HAL_RCC_OscConfig+0x780>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a2d      	ldr	r2, [pc, #180]	; (8008ddc <HAL_RCC_OscConfig+0x780>)
 8008d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008d2c:	4b2b      	ldr	r3, [pc, #172]	; (8008ddc <HAL_RCC_OscConfig+0x780>)
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	4a2a      	ldr	r2, [pc, #168]	; (8008ddc <HAL_RCC_OscConfig+0x780>)
 8008d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008d38:	f7fd fe20 	bl	800697c <HAL_GetTick>
 8008d3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d3e:	e008      	b.n	8008d52 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d40:	f7fd fe1c 	bl	800697c <HAL_GetTick>
 8008d44:	4602      	mov	r2, r0
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	1ad3      	subs	r3, r2, r3
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d901      	bls.n	8008d52 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e058      	b.n	8008e04 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d52:	4b22      	ldr	r3, [pc, #136]	; (8008ddc <HAL_RCC_OscConfig+0x780>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d0f0      	beq.n	8008d40 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008d5e:	e050      	b.n	8008e02 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008d60:	2301      	movs	r3, #1
 8008d62:	e04f      	b.n	8008e04 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d64:	4b1d      	ldr	r3, [pc, #116]	; (8008ddc <HAL_RCC_OscConfig+0x780>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d148      	bne.n	8008e02 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008d70:	4b1a      	ldr	r3, [pc, #104]	; (8008ddc <HAL_RCC_OscConfig+0x780>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a19      	ldr	r2, [pc, #100]	; (8008ddc <HAL_RCC_OscConfig+0x780>)
 8008d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d7a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008d7c:	4b17      	ldr	r3, [pc, #92]	; (8008ddc <HAL_RCC_OscConfig+0x780>)
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	4a16      	ldr	r2, [pc, #88]	; (8008ddc <HAL_RCC_OscConfig+0x780>)
 8008d82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008d88:	f7fd fdf8 	bl	800697c <HAL_GetTick>
 8008d8c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d8e:	e008      	b.n	8008da2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d90:	f7fd fdf4 	bl	800697c <HAL_GetTick>
 8008d94:	4602      	mov	r2, r0
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	1ad3      	subs	r3, r2, r3
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	d901      	bls.n	8008da2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8008d9e:	2303      	movs	r3, #3
 8008da0:	e030      	b.n	8008e04 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008da2:	4b0e      	ldr	r3, [pc, #56]	; (8008ddc <HAL_RCC_OscConfig+0x780>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d0f0      	beq.n	8008d90 <HAL_RCC_OscConfig+0x734>
 8008dae:	e028      	b.n	8008e02 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	2b0c      	cmp	r3, #12
 8008db4:	d023      	beq.n	8008dfe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008db6:	4b09      	ldr	r3, [pc, #36]	; (8008ddc <HAL_RCC_OscConfig+0x780>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a08      	ldr	r2, [pc, #32]	; (8008ddc <HAL_RCC_OscConfig+0x780>)
 8008dbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dc2:	f7fd fddb 	bl	800697c <HAL_GetTick>
 8008dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008dc8:	e00c      	b.n	8008de4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dca:	f7fd fdd7 	bl	800697c <HAL_GetTick>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	1ad3      	subs	r3, r2, r3
 8008dd4:	2b02      	cmp	r3, #2
 8008dd6:	d905      	bls.n	8008de4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	e013      	b.n	8008e04 <HAL_RCC_OscConfig+0x7a8>
 8008ddc:	40021000 	.word	0x40021000
 8008de0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008de4:	4b09      	ldr	r3, [pc, #36]	; (8008e0c <HAL_RCC_OscConfig+0x7b0>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1ec      	bne.n	8008dca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008df0:	4b06      	ldr	r3, [pc, #24]	; (8008e0c <HAL_RCC_OscConfig+0x7b0>)
 8008df2:	68da      	ldr	r2, [r3, #12]
 8008df4:	4905      	ldr	r1, [pc, #20]	; (8008e0c <HAL_RCC_OscConfig+0x7b0>)
 8008df6:	4b06      	ldr	r3, [pc, #24]	; (8008e10 <HAL_RCC_OscConfig+0x7b4>)
 8008df8:	4013      	ands	r3, r2
 8008dfa:	60cb      	str	r3, [r1, #12]
 8008dfc:	e001      	b.n	8008e02 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e000      	b.n	8008e04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3720      	adds	r7, #32
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	40021000 	.word	0x40021000
 8008e10:	feeefffc 	.word	0xfeeefffc

08008e14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d101      	bne.n	8008e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	e0e7      	b.n	8008ff8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008e28:	4b75      	ldr	r3, [pc, #468]	; (8009000 <HAL_RCC_ClockConfig+0x1ec>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f003 0307 	and.w	r3, r3, #7
 8008e30:	683a      	ldr	r2, [r7, #0]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d910      	bls.n	8008e58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e36:	4b72      	ldr	r3, [pc, #456]	; (8009000 <HAL_RCC_ClockConfig+0x1ec>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f023 0207 	bic.w	r2, r3, #7
 8008e3e:	4970      	ldr	r1, [pc, #448]	; (8009000 <HAL_RCC_ClockConfig+0x1ec>)
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e46:	4b6e      	ldr	r3, [pc, #440]	; (8009000 <HAL_RCC_ClockConfig+0x1ec>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f003 0307 	and.w	r3, r3, #7
 8008e4e:	683a      	ldr	r2, [r7, #0]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d001      	beq.n	8008e58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	e0cf      	b.n	8008ff8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 0302 	and.w	r3, r3, #2
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d010      	beq.n	8008e86 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	689a      	ldr	r2, [r3, #8]
 8008e68:	4b66      	ldr	r3, [pc, #408]	; (8009004 <HAL_RCC_ClockConfig+0x1f0>)
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d908      	bls.n	8008e86 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e74:	4b63      	ldr	r3, [pc, #396]	; (8009004 <HAL_RCC_ClockConfig+0x1f0>)
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	4960      	ldr	r1, [pc, #384]	; (8009004 <HAL_RCC_ClockConfig+0x1f0>)
 8008e82:	4313      	orrs	r3, r2
 8008e84:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 0301 	and.w	r3, r3, #1
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d04c      	beq.n	8008f2c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	2b03      	cmp	r3, #3
 8008e98:	d107      	bne.n	8008eaa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e9a:	4b5a      	ldr	r3, [pc, #360]	; (8009004 <HAL_RCC_ClockConfig+0x1f0>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d121      	bne.n	8008eea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e0a6      	b.n	8008ff8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d107      	bne.n	8008ec2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008eb2:	4b54      	ldr	r3, [pc, #336]	; (8009004 <HAL_RCC_ClockConfig+0x1f0>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d115      	bne.n	8008eea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e09a      	b.n	8008ff8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d107      	bne.n	8008eda <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008eca:	4b4e      	ldr	r3, [pc, #312]	; (8009004 <HAL_RCC_ClockConfig+0x1f0>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 0302 	and.w	r3, r3, #2
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d109      	bne.n	8008eea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e08e      	b.n	8008ff8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008eda:	4b4a      	ldr	r3, [pc, #296]	; (8009004 <HAL_RCC_ClockConfig+0x1f0>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d101      	bne.n	8008eea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e086      	b.n	8008ff8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008eea:	4b46      	ldr	r3, [pc, #280]	; (8009004 <HAL_RCC_ClockConfig+0x1f0>)
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	f023 0203 	bic.w	r2, r3, #3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	4943      	ldr	r1, [pc, #268]	; (8009004 <HAL_RCC_ClockConfig+0x1f0>)
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008efc:	f7fd fd3e 	bl	800697c <HAL_GetTick>
 8008f00:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f02:	e00a      	b.n	8008f1a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f04:	f7fd fd3a 	bl	800697c <HAL_GetTick>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	1ad3      	subs	r3, r2, r3
 8008f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d901      	bls.n	8008f1a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008f16:	2303      	movs	r3, #3
 8008f18:	e06e      	b.n	8008ff8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f1a:	4b3a      	ldr	r3, [pc, #232]	; (8009004 <HAL_RCC_ClockConfig+0x1f0>)
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	f003 020c 	and.w	r2, r3, #12
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d1eb      	bne.n	8008f04 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f003 0302 	and.w	r3, r3, #2
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d010      	beq.n	8008f5a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	689a      	ldr	r2, [r3, #8]
 8008f3c:	4b31      	ldr	r3, [pc, #196]	; (8009004 <HAL_RCC_ClockConfig+0x1f0>)
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d208      	bcs.n	8008f5a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f48:	4b2e      	ldr	r3, [pc, #184]	; (8009004 <HAL_RCC_ClockConfig+0x1f0>)
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	492b      	ldr	r1, [pc, #172]	; (8009004 <HAL_RCC_ClockConfig+0x1f0>)
 8008f56:	4313      	orrs	r3, r2
 8008f58:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008f5a:	4b29      	ldr	r3, [pc, #164]	; (8009000 <HAL_RCC_ClockConfig+0x1ec>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f003 0307 	and.w	r3, r3, #7
 8008f62:	683a      	ldr	r2, [r7, #0]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d210      	bcs.n	8008f8a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f68:	4b25      	ldr	r3, [pc, #148]	; (8009000 <HAL_RCC_ClockConfig+0x1ec>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f023 0207 	bic.w	r2, r3, #7
 8008f70:	4923      	ldr	r1, [pc, #140]	; (8009000 <HAL_RCC_ClockConfig+0x1ec>)
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	4313      	orrs	r3, r2
 8008f76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f78:	4b21      	ldr	r3, [pc, #132]	; (8009000 <HAL_RCC_ClockConfig+0x1ec>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f003 0307 	and.w	r3, r3, #7
 8008f80:	683a      	ldr	r2, [r7, #0]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d001      	beq.n	8008f8a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	e036      	b.n	8008ff8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f003 0304 	and.w	r3, r3, #4
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d008      	beq.n	8008fa8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008f96:	4b1b      	ldr	r3, [pc, #108]	; (8009004 <HAL_RCC_ClockConfig+0x1f0>)
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	4918      	ldr	r1, [pc, #96]	; (8009004 <HAL_RCC_ClockConfig+0x1f0>)
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 0308 	and.w	r3, r3, #8
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d009      	beq.n	8008fc8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008fb4:	4b13      	ldr	r3, [pc, #76]	; (8009004 <HAL_RCC_ClockConfig+0x1f0>)
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	691b      	ldr	r3, [r3, #16]
 8008fc0:	00db      	lsls	r3, r3, #3
 8008fc2:	4910      	ldr	r1, [pc, #64]	; (8009004 <HAL_RCC_ClockConfig+0x1f0>)
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008fc8:	f000 f824 	bl	8009014 <HAL_RCC_GetSysClockFreq>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	4b0d      	ldr	r3, [pc, #52]	; (8009004 <HAL_RCC_ClockConfig+0x1f0>)
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	091b      	lsrs	r3, r3, #4
 8008fd4:	f003 030f 	and.w	r3, r3, #15
 8008fd8:	490b      	ldr	r1, [pc, #44]	; (8009008 <HAL_RCC_ClockConfig+0x1f4>)
 8008fda:	5ccb      	ldrb	r3, [r1, r3]
 8008fdc:	f003 031f 	and.w	r3, r3, #31
 8008fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8008fe4:	4a09      	ldr	r2, [pc, #36]	; (800900c <HAL_RCC_ClockConfig+0x1f8>)
 8008fe6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008fe8:	4b09      	ldr	r3, [pc, #36]	; (8009010 <HAL_RCC_ClockConfig+0x1fc>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7fd fc75 	bl	80068dc <HAL_InitTick>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	72fb      	strb	r3, [r7, #11]

  return status;
 8008ff6:	7afb      	ldrb	r3, [r7, #11]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	40022000 	.word	0x40022000
 8009004:	40021000 	.word	0x40021000
 8009008:	0800f480 	.word	0x0800f480
 800900c:	2000000c 	.word	0x2000000c
 8009010:	20000010 	.word	0x20000010

08009014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009014:	b480      	push	{r7}
 8009016:	b089      	sub	sp, #36	; 0x24
 8009018:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800901a:	2300      	movs	r3, #0
 800901c:	61fb      	str	r3, [r7, #28]
 800901e:	2300      	movs	r3, #0
 8009020:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009022:	4b3e      	ldr	r3, [pc, #248]	; (800911c <HAL_RCC_GetSysClockFreq+0x108>)
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	f003 030c 	and.w	r3, r3, #12
 800902a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800902c:	4b3b      	ldr	r3, [pc, #236]	; (800911c <HAL_RCC_GetSysClockFreq+0x108>)
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	f003 0303 	and.w	r3, r3, #3
 8009034:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d005      	beq.n	8009048 <HAL_RCC_GetSysClockFreq+0x34>
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	2b0c      	cmp	r3, #12
 8009040:	d121      	bne.n	8009086 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2b01      	cmp	r3, #1
 8009046:	d11e      	bne.n	8009086 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009048:	4b34      	ldr	r3, [pc, #208]	; (800911c <HAL_RCC_GetSysClockFreq+0x108>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 0308 	and.w	r3, r3, #8
 8009050:	2b00      	cmp	r3, #0
 8009052:	d107      	bne.n	8009064 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009054:	4b31      	ldr	r3, [pc, #196]	; (800911c <HAL_RCC_GetSysClockFreq+0x108>)
 8009056:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800905a:	0a1b      	lsrs	r3, r3, #8
 800905c:	f003 030f 	and.w	r3, r3, #15
 8009060:	61fb      	str	r3, [r7, #28]
 8009062:	e005      	b.n	8009070 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009064:	4b2d      	ldr	r3, [pc, #180]	; (800911c <HAL_RCC_GetSysClockFreq+0x108>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	091b      	lsrs	r3, r3, #4
 800906a:	f003 030f 	and.w	r3, r3, #15
 800906e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009070:	4a2b      	ldr	r2, [pc, #172]	; (8009120 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009078:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d10d      	bne.n	800909c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009084:	e00a      	b.n	800909c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	2b04      	cmp	r3, #4
 800908a:	d102      	bne.n	8009092 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800908c:	4b25      	ldr	r3, [pc, #148]	; (8009124 <HAL_RCC_GetSysClockFreq+0x110>)
 800908e:	61bb      	str	r3, [r7, #24]
 8009090:	e004      	b.n	800909c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	2b08      	cmp	r3, #8
 8009096:	d101      	bne.n	800909c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009098:	4b23      	ldr	r3, [pc, #140]	; (8009128 <HAL_RCC_GetSysClockFreq+0x114>)
 800909a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	2b0c      	cmp	r3, #12
 80090a0:	d134      	bne.n	800910c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80090a2:	4b1e      	ldr	r3, [pc, #120]	; (800911c <HAL_RCC_GetSysClockFreq+0x108>)
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	f003 0303 	and.w	r3, r3, #3
 80090aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d003      	beq.n	80090ba <HAL_RCC_GetSysClockFreq+0xa6>
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	2b03      	cmp	r3, #3
 80090b6:	d003      	beq.n	80090c0 <HAL_RCC_GetSysClockFreq+0xac>
 80090b8:	e005      	b.n	80090c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80090ba:	4b1a      	ldr	r3, [pc, #104]	; (8009124 <HAL_RCC_GetSysClockFreq+0x110>)
 80090bc:	617b      	str	r3, [r7, #20]
      break;
 80090be:	e005      	b.n	80090cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80090c0:	4b19      	ldr	r3, [pc, #100]	; (8009128 <HAL_RCC_GetSysClockFreq+0x114>)
 80090c2:	617b      	str	r3, [r7, #20]
      break;
 80090c4:	e002      	b.n	80090cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	617b      	str	r3, [r7, #20]
      break;
 80090ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80090cc:	4b13      	ldr	r3, [pc, #76]	; (800911c <HAL_RCC_GetSysClockFreq+0x108>)
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	091b      	lsrs	r3, r3, #4
 80090d2:	f003 0307 	and.w	r3, r3, #7
 80090d6:	3301      	adds	r3, #1
 80090d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80090da:	4b10      	ldr	r3, [pc, #64]	; (800911c <HAL_RCC_GetSysClockFreq+0x108>)
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	0a1b      	lsrs	r3, r3, #8
 80090e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090e4:	697a      	ldr	r2, [r7, #20]
 80090e6:	fb03 f202 	mul.w	r2, r3, r2
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80090f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80090f2:	4b0a      	ldr	r3, [pc, #40]	; (800911c <HAL_RCC_GetSysClockFreq+0x108>)
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	0e5b      	lsrs	r3, r3, #25
 80090f8:	f003 0303 	and.w	r3, r3, #3
 80090fc:	3301      	adds	r3, #1
 80090fe:	005b      	lsls	r3, r3, #1
 8009100:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009102:	697a      	ldr	r2, [r7, #20]
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	fbb2 f3f3 	udiv	r3, r2, r3
 800910a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800910c:	69bb      	ldr	r3, [r7, #24]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3724      	adds	r7, #36	; 0x24
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr
 800911a:	bf00      	nop
 800911c:	40021000 	.word	0x40021000
 8009120:	0800f498 	.word	0x0800f498
 8009124:	00f42400 	.word	0x00f42400
 8009128:	007a1200 	.word	0x007a1200

0800912c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800912c:	b480      	push	{r7}
 800912e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009130:	4b03      	ldr	r3, [pc, #12]	; (8009140 <HAL_RCC_GetHCLKFreq+0x14>)
 8009132:	681b      	ldr	r3, [r3, #0]
}
 8009134:	4618      	mov	r0, r3
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	2000000c 	.word	0x2000000c

08009144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009148:	f7ff fff0 	bl	800912c <HAL_RCC_GetHCLKFreq>
 800914c:	4602      	mov	r2, r0
 800914e:	4b06      	ldr	r3, [pc, #24]	; (8009168 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	0a1b      	lsrs	r3, r3, #8
 8009154:	f003 0307 	and.w	r3, r3, #7
 8009158:	4904      	ldr	r1, [pc, #16]	; (800916c <HAL_RCC_GetPCLK1Freq+0x28>)
 800915a:	5ccb      	ldrb	r3, [r1, r3]
 800915c:	f003 031f 	and.w	r3, r3, #31
 8009160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009164:	4618      	mov	r0, r3
 8009166:	bd80      	pop	{r7, pc}
 8009168:	40021000 	.word	0x40021000
 800916c:	0800f490 	.word	0x0800f490

08009170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009174:	f7ff ffda 	bl	800912c <HAL_RCC_GetHCLKFreq>
 8009178:	4602      	mov	r2, r0
 800917a:	4b06      	ldr	r3, [pc, #24]	; (8009194 <HAL_RCC_GetPCLK2Freq+0x24>)
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	0adb      	lsrs	r3, r3, #11
 8009180:	f003 0307 	and.w	r3, r3, #7
 8009184:	4904      	ldr	r1, [pc, #16]	; (8009198 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009186:	5ccb      	ldrb	r3, [r1, r3]
 8009188:	f003 031f 	and.w	r3, r3, #31
 800918c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009190:	4618      	mov	r0, r3
 8009192:	bd80      	pop	{r7, pc}
 8009194:	40021000 	.word	0x40021000
 8009198:	0800f490 	.word	0x0800f490

0800919c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b086      	sub	sp, #24
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80091a4:	2300      	movs	r3, #0
 80091a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80091a8:	4b2a      	ldr	r3, [pc, #168]	; (8009254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80091aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d003      	beq.n	80091bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80091b4:	f7ff f922 	bl	80083fc <HAL_PWREx_GetVoltageRange>
 80091b8:	6178      	str	r0, [r7, #20]
 80091ba:	e014      	b.n	80091e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80091bc:	4b25      	ldr	r3, [pc, #148]	; (8009254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80091be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091c0:	4a24      	ldr	r2, [pc, #144]	; (8009254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80091c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091c6:	6593      	str	r3, [r2, #88]	; 0x58
 80091c8:	4b22      	ldr	r3, [pc, #136]	; (8009254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80091ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091d0:	60fb      	str	r3, [r7, #12]
 80091d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80091d4:	f7ff f912 	bl	80083fc <HAL_PWREx_GetVoltageRange>
 80091d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80091da:	4b1e      	ldr	r3, [pc, #120]	; (8009254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80091dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091de:	4a1d      	ldr	r2, [pc, #116]	; (8009254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80091e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091ec:	d10b      	bne.n	8009206 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2b80      	cmp	r3, #128	; 0x80
 80091f2:	d919      	bls.n	8009228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2ba0      	cmp	r3, #160	; 0xa0
 80091f8:	d902      	bls.n	8009200 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80091fa:	2302      	movs	r3, #2
 80091fc:	613b      	str	r3, [r7, #16]
 80091fe:	e013      	b.n	8009228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009200:	2301      	movs	r3, #1
 8009202:	613b      	str	r3, [r7, #16]
 8009204:	e010      	b.n	8009228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2b80      	cmp	r3, #128	; 0x80
 800920a:	d902      	bls.n	8009212 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800920c:	2303      	movs	r3, #3
 800920e:	613b      	str	r3, [r7, #16]
 8009210:	e00a      	b.n	8009228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2b80      	cmp	r3, #128	; 0x80
 8009216:	d102      	bne.n	800921e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009218:	2302      	movs	r3, #2
 800921a:	613b      	str	r3, [r7, #16]
 800921c:	e004      	b.n	8009228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2b70      	cmp	r3, #112	; 0x70
 8009222:	d101      	bne.n	8009228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009224:	2301      	movs	r3, #1
 8009226:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009228:	4b0b      	ldr	r3, [pc, #44]	; (8009258 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f023 0207 	bic.w	r2, r3, #7
 8009230:	4909      	ldr	r1, [pc, #36]	; (8009258 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	4313      	orrs	r3, r2
 8009236:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009238:	4b07      	ldr	r3, [pc, #28]	; (8009258 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f003 0307 	and.w	r3, r3, #7
 8009240:	693a      	ldr	r2, [r7, #16]
 8009242:	429a      	cmp	r2, r3
 8009244:	d001      	beq.n	800924a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	e000      	b.n	800924c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3718      	adds	r7, #24
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	40021000 	.word	0x40021000
 8009258:	40022000 	.word	0x40022000

0800925c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b086      	sub	sp, #24
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009264:	2300      	movs	r3, #0
 8009266:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009268:	2300      	movs	r3, #0
 800926a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009274:	2b00      	cmp	r3, #0
 8009276:	d041      	beq.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800927c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009280:	d02a      	beq.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009282:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009286:	d824      	bhi.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009288:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800928c:	d008      	beq.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800928e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009292:	d81e      	bhi.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00a      	beq.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009298:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800929c:	d010      	beq.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800929e:	e018      	b.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80092a0:	4b86      	ldr	r3, [pc, #536]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	4a85      	ldr	r2, [pc, #532]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80092ac:	e015      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	3304      	adds	r3, #4
 80092b2:	2100      	movs	r1, #0
 80092b4:	4618      	mov	r0, r3
 80092b6:	f000 facb 	bl	8009850 <RCCEx_PLLSAI1_Config>
 80092ba:	4603      	mov	r3, r0
 80092bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80092be:	e00c      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	3320      	adds	r3, #32
 80092c4:	2100      	movs	r1, #0
 80092c6:	4618      	mov	r0, r3
 80092c8:	f000 fbb6 	bl	8009a38 <RCCEx_PLLSAI2_Config>
 80092cc:	4603      	mov	r3, r0
 80092ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80092d0:	e003      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	74fb      	strb	r3, [r7, #19]
      break;
 80092d6:	e000      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80092d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092da:	7cfb      	ldrb	r3, [r7, #19]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d10b      	bne.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80092e0:	4b76      	ldr	r3, [pc, #472]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092ee:	4973      	ldr	r1, [pc, #460]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092f0:	4313      	orrs	r3, r2
 80092f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80092f6:	e001      	b.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092f8:	7cfb      	ldrb	r3, [r7, #19]
 80092fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d041      	beq.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800930c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009310:	d02a      	beq.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8009312:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009316:	d824      	bhi.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009318:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800931c:	d008      	beq.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800931e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009322:	d81e      	bhi.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00a      	beq.n	800933e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8009328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800932c:	d010      	beq.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800932e:	e018      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009330:	4b62      	ldr	r3, [pc, #392]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	4a61      	ldr	r2, [pc, #388]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800933a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800933c:	e015      	b.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	3304      	adds	r3, #4
 8009342:	2100      	movs	r1, #0
 8009344:	4618      	mov	r0, r3
 8009346:	f000 fa83 	bl	8009850 <RCCEx_PLLSAI1_Config>
 800934a:	4603      	mov	r3, r0
 800934c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800934e:	e00c      	b.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	3320      	adds	r3, #32
 8009354:	2100      	movs	r1, #0
 8009356:	4618      	mov	r0, r3
 8009358:	f000 fb6e 	bl	8009a38 <RCCEx_PLLSAI2_Config>
 800935c:	4603      	mov	r3, r0
 800935e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009360:	e003      	b.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009362:	2301      	movs	r3, #1
 8009364:	74fb      	strb	r3, [r7, #19]
      break;
 8009366:	e000      	b.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8009368:	bf00      	nop
    }

    if(ret == HAL_OK)
 800936a:	7cfb      	ldrb	r3, [r7, #19]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d10b      	bne.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009370:	4b52      	ldr	r3, [pc, #328]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009376:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800937e:	494f      	ldr	r1, [pc, #316]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009380:	4313      	orrs	r3, r2
 8009382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009386:	e001      	b.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009388:	7cfb      	ldrb	r3, [r7, #19]
 800938a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009394:	2b00      	cmp	r3, #0
 8009396:	f000 80a0 	beq.w	80094da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800939a:	2300      	movs	r3, #0
 800939c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800939e:	4b47      	ldr	r3, [pc, #284]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80093a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d101      	bne.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 80093aa:	2301      	movs	r3, #1
 80093ac:	e000      	b.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80093ae:	2300      	movs	r3, #0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00d      	beq.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80093b4:	4b41      	ldr	r3, [pc, #260]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80093b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093b8:	4a40      	ldr	r2, [pc, #256]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80093ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093be:	6593      	str	r3, [r2, #88]	; 0x58
 80093c0:	4b3e      	ldr	r3, [pc, #248]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80093c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093c8:	60bb      	str	r3, [r7, #8]
 80093ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80093cc:	2301      	movs	r3, #1
 80093ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80093d0:	4b3b      	ldr	r3, [pc, #236]	; (80094c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a3a      	ldr	r2, [pc, #232]	; (80094c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80093d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80093dc:	f7fd face 	bl	800697c <HAL_GetTick>
 80093e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80093e2:	e009      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093e4:	f7fd faca 	bl	800697c <HAL_GetTick>
 80093e8:	4602      	mov	r2, r0
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	1ad3      	subs	r3, r2, r3
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	d902      	bls.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80093f2:	2303      	movs	r3, #3
 80093f4:	74fb      	strb	r3, [r7, #19]
        break;
 80093f6:	e005      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80093f8:	4b31      	ldr	r3, [pc, #196]	; (80094c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009400:	2b00      	cmp	r3, #0
 8009402:	d0ef      	beq.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8009404:	7cfb      	ldrb	r3, [r7, #19]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d15c      	bne.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800940a:	4b2c      	ldr	r3, [pc, #176]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800940c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009410:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009414:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d01f      	beq.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009422:	697a      	ldr	r2, [r7, #20]
 8009424:	429a      	cmp	r2, r3
 8009426:	d019      	beq.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009428:	4b24      	ldr	r3, [pc, #144]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800942a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800942e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009432:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009434:	4b21      	ldr	r3, [pc, #132]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800943a:	4a20      	ldr	r2, [pc, #128]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800943c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009444:	4b1d      	ldr	r3, [pc, #116]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800944a:	4a1c      	ldr	r2, [pc, #112]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800944c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009454:	4a19      	ldr	r2, [pc, #100]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	f003 0301 	and.w	r3, r3, #1
 8009462:	2b00      	cmp	r3, #0
 8009464:	d016      	beq.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009466:	f7fd fa89 	bl	800697c <HAL_GetTick>
 800946a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800946c:	e00b      	b.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800946e:	f7fd fa85 	bl	800697c <HAL_GetTick>
 8009472:	4602      	mov	r2, r0
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	1ad3      	subs	r3, r2, r3
 8009478:	f241 3288 	movw	r2, #5000	; 0x1388
 800947c:	4293      	cmp	r3, r2
 800947e:	d902      	bls.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8009480:	2303      	movs	r3, #3
 8009482:	74fb      	strb	r3, [r7, #19]
            break;
 8009484:	e006      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009486:	4b0d      	ldr	r3, [pc, #52]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800948c:	f003 0302 	and.w	r3, r3, #2
 8009490:	2b00      	cmp	r3, #0
 8009492:	d0ec      	beq.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8009494:	7cfb      	ldrb	r3, [r7, #19]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10c      	bne.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800949a:	4b08      	ldr	r3, [pc, #32]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800949c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094aa:	4904      	ldr	r1, [pc, #16]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80094ac:	4313      	orrs	r3, r2
 80094ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80094b2:	e009      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80094b4:	7cfb      	ldrb	r3, [r7, #19]
 80094b6:	74bb      	strb	r3, [r7, #18]
 80094b8:	e006      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80094ba:	bf00      	nop
 80094bc:	40021000 	.word	0x40021000
 80094c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094c4:	7cfb      	ldrb	r3, [r7, #19]
 80094c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80094c8:	7c7b      	ldrb	r3, [r7, #17]
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d105      	bne.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80094ce:	4b9e      	ldr	r3, [pc, #632]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80094d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094d2:	4a9d      	ldr	r2, [pc, #628]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80094d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f003 0301 	and.w	r3, r3, #1
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00a      	beq.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80094e6:	4b98      	ldr	r3, [pc, #608]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80094e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094ec:	f023 0203 	bic.w	r2, r3, #3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f4:	4994      	ldr	r1, [pc, #592]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80094f6:	4313      	orrs	r3, r2
 80094f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f003 0302 	and.w	r3, r3, #2
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00a      	beq.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009508:	4b8f      	ldr	r3, [pc, #572]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800950a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800950e:	f023 020c 	bic.w	r2, r3, #12
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009516:	498c      	ldr	r1, [pc, #560]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009518:	4313      	orrs	r3, r2
 800951a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f003 0304 	and.w	r3, r3, #4
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00a      	beq.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800952a:	4b87      	ldr	r3, [pc, #540]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800952c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009530:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009538:	4983      	ldr	r1, [pc, #524]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800953a:	4313      	orrs	r3, r2
 800953c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f003 0308 	and.w	r3, r3, #8
 8009548:	2b00      	cmp	r3, #0
 800954a:	d00a      	beq.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800954c:	4b7e      	ldr	r3, [pc, #504]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800954e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009552:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800955a:	497b      	ldr	r1, [pc, #492]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800955c:	4313      	orrs	r3, r2
 800955e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f003 0310 	and.w	r3, r3, #16
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00a      	beq.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800956e:	4b76      	ldr	r3, [pc, #472]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009574:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800957c:	4972      	ldr	r1, [pc, #456]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800957e:	4313      	orrs	r3, r2
 8009580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f003 0320 	and.w	r3, r3, #32
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00a      	beq.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009590:	4b6d      	ldr	r3, [pc, #436]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009596:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800959e:	496a      	ldr	r1, [pc, #424]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095a0:	4313      	orrs	r3, r2
 80095a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00a      	beq.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80095b2:	4b65      	ldr	r3, [pc, #404]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095c0:	4961      	ldr	r1, [pc, #388]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095c2:	4313      	orrs	r3, r2
 80095c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d00a      	beq.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80095d4:	4b5c      	ldr	r3, [pc, #368]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095e2:	4959      	ldr	r1, [pc, #356]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095e4:	4313      	orrs	r3, r2
 80095e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00a      	beq.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80095f6:	4b54      	ldr	r3, [pc, #336]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009604:	4950      	ldr	r1, [pc, #320]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009606:	4313      	orrs	r3, r2
 8009608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00a      	beq.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009618:	4b4b      	ldr	r3, [pc, #300]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800961a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800961e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009626:	4948      	ldr	r1, [pc, #288]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009628:	4313      	orrs	r3, r2
 800962a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00a      	beq.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800963a:	4b43      	ldr	r3, [pc, #268]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800963c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009640:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009648:	493f      	ldr	r1, [pc, #252]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800964a:	4313      	orrs	r3, r2
 800964c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009658:	2b00      	cmp	r3, #0
 800965a:	d028      	beq.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800965c:	4b3a      	ldr	r3, [pc, #232]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800965e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009662:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800966a:	4937      	ldr	r1, [pc, #220]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800966c:	4313      	orrs	r3, r2
 800966e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009676:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800967a:	d106      	bne.n	800968a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800967c:	4b32      	ldr	r3, [pc, #200]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	4a31      	ldr	r2, [pc, #196]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009686:	60d3      	str	r3, [r2, #12]
 8009688:	e011      	b.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800968e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009692:	d10c      	bne.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	3304      	adds	r3, #4
 8009698:	2101      	movs	r1, #1
 800969a:	4618      	mov	r0, r3
 800969c:	f000 f8d8 	bl	8009850 <RCCEx_PLLSAI1_Config>
 80096a0:	4603      	mov	r3, r0
 80096a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80096a4:	7cfb      	ldrb	r3, [r7, #19]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d001      	beq.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80096aa:	7cfb      	ldrb	r3, [r7, #19]
 80096ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d028      	beq.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80096ba:	4b23      	ldr	r3, [pc, #140]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80096bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096c8:	491f      	ldr	r1, [pc, #124]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80096ca:	4313      	orrs	r3, r2
 80096cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096d8:	d106      	bne.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80096da:	4b1b      	ldr	r3, [pc, #108]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	4a1a      	ldr	r2, [pc, #104]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80096e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096e4:	60d3      	str	r3, [r2, #12]
 80096e6:	e011      	b.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80096f0:	d10c      	bne.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	3304      	adds	r3, #4
 80096f6:	2101      	movs	r1, #1
 80096f8:	4618      	mov	r0, r3
 80096fa:	f000 f8a9 	bl	8009850 <RCCEx_PLLSAI1_Config>
 80096fe:	4603      	mov	r3, r0
 8009700:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009702:	7cfb      	ldrb	r3, [r7, #19]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d001      	beq.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8009708:	7cfb      	ldrb	r3, [r7, #19]
 800970a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009714:	2b00      	cmp	r3, #0
 8009716:	d02b      	beq.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009718:	4b0b      	ldr	r3, [pc, #44]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800971a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800971e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009726:	4908      	ldr	r1, [pc, #32]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009728:	4313      	orrs	r3, r2
 800972a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009732:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009736:	d109      	bne.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009738:	4b03      	ldr	r3, [pc, #12]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	4a02      	ldr	r2, [pc, #8]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800973e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009742:	60d3      	str	r3, [r2, #12]
 8009744:	e014      	b.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8009746:	bf00      	nop
 8009748:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009750:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009754:	d10c      	bne.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	3304      	adds	r3, #4
 800975a:	2101      	movs	r1, #1
 800975c:	4618      	mov	r0, r3
 800975e:	f000 f877 	bl	8009850 <RCCEx_PLLSAI1_Config>
 8009762:	4603      	mov	r3, r0
 8009764:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009766:	7cfb      	ldrb	r3, [r7, #19]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d001      	beq.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800976c:	7cfb      	ldrb	r3, [r7, #19]
 800976e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009778:	2b00      	cmp	r3, #0
 800977a:	d02f      	beq.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800977c:	4b2b      	ldr	r3, [pc, #172]	; (800982c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800977e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009782:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800978a:	4928      	ldr	r1, [pc, #160]	; (800982c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800978c:	4313      	orrs	r3, r2
 800978e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800979a:	d10d      	bne.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	3304      	adds	r3, #4
 80097a0:	2102      	movs	r1, #2
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 f854 	bl	8009850 <RCCEx_PLLSAI1_Config>
 80097a8:	4603      	mov	r3, r0
 80097aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80097ac:	7cfb      	ldrb	r3, [r7, #19]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d014      	beq.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80097b2:	7cfb      	ldrb	r3, [r7, #19]
 80097b4:	74bb      	strb	r3, [r7, #18]
 80097b6:	e011      	b.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097c0:	d10c      	bne.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	3320      	adds	r3, #32
 80097c6:	2102      	movs	r1, #2
 80097c8:	4618      	mov	r0, r3
 80097ca:	f000 f935 	bl	8009a38 <RCCEx_PLLSAI2_Config>
 80097ce:	4603      	mov	r3, r0
 80097d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80097d2:	7cfb      	ldrb	r3, [r7, #19]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d001      	beq.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80097d8:	7cfb      	ldrb	r3, [r7, #19]
 80097da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d00a      	beq.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80097e8:	4b10      	ldr	r3, [pc, #64]	; (800982c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80097ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097f6:	490d      	ldr	r1, [pc, #52]	; (800982c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80097f8:	4313      	orrs	r3, r2
 80097fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009806:	2b00      	cmp	r3, #0
 8009808:	d00b      	beq.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800980a:	4b08      	ldr	r3, [pc, #32]	; (800982c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800980c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009810:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800981a:	4904      	ldr	r1, [pc, #16]	; (800982c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800981c:	4313      	orrs	r3, r2
 800981e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009822:	7cbb      	ldrb	r3, [r7, #18]
}
 8009824:	4618      	mov	r0, r3
 8009826:	3718      	adds	r7, #24
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	40021000 	.word	0x40021000

08009830 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8009830:	b480      	push	{r7}
 8009832:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8009834:	4b05      	ldr	r3, [pc, #20]	; (800984c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a04      	ldr	r2, [pc, #16]	; (800984c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800983a:	f043 0304 	orr.w	r3, r3, #4
 800983e:	6013      	str	r3, [r2, #0]
}
 8009840:	bf00      	nop
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop
 800984c:	40021000 	.word	0x40021000

08009850 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800985a:	2300      	movs	r3, #0
 800985c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800985e:	4b75      	ldr	r3, [pc, #468]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	f003 0303 	and.w	r3, r3, #3
 8009866:	2b00      	cmp	r3, #0
 8009868:	d018      	beq.n	800989c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800986a:	4b72      	ldr	r3, [pc, #456]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	f003 0203 	and.w	r2, r3, #3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	429a      	cmp	r2, r3
 8009878:	d10d      	bne.n	8009896 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
       ||
 800987e:	2b00      	cmp	r3, #0
 8009880:	d009      	beq.n	8009896 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009882:	4b6c      	ldr	r3, [pc, #432]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	091b      	lsrs	r3, r3, #4
 8009888:	f003 0307 	and.w	r3, r3, #7
 800988c:	1c5a      	adds	r2, r3, #1
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	685b      	ldr	r3, [r3, #4]
       ||
 8009892:	429a      	cmp	r2, r3
 8009894:	d047      	beq.n	8009926 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	73fb      	strb	r3, [r7, #15]
 800989a:	e044      	b.n	8009926 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2b03      	cmp	r3, #3
 80098a2:	d018      	beq.n	80098d6 <RCCEx_PLLSAI1_Config+0x86>
 80098a4:	2b03      	cmp	r3, #3
 80098a6:	d825      	bhi.n	80098f4 <RCCEx_PLLSAI1_Config+0xa4>
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d002      	beq.n	80098b2 <RCCEx_PLLSAI1_Config+0x62>
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d009      	beq.n	80098c4 <RCCEx_PLLSAI1_Config+0x74>
 80098b0:	e020      	b.n	80098f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80098b2:	4b60      	ldr	r3, [pc, #384]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f003 0302 	and.w	r3, r3, #2
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d11d      	bne.n	80098fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80098c2:	e01a      	b.n	80098fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80098c4:	4b5b      	ldr	r3, [pc, #364]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d116      	bne.n	80098fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80098d4:	e013      	b.n	80098fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80098d6:	4b57      	ldr	r3, [pc, #348]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d10f      	bne.n	8009902 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80098e2:	4b54      	ldr	r3, [pc, #336]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d109      	bne.n	8009902 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80098f2:	e006      	b.n	8009902 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	73fb      	strb	r3, [r7, #15]
      break;
 80098f8:	e004      	b.n	8009904 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80098fa:	bf00      	nop
 80098fc:	e002      	b.n	8009904 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80098fe:	bf00      	nop
 8009900:	e000      	b.n	8009904 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009902:	bf00      	nop
    }

    if(status == HAL_OK)
 8009904:	7bfb      	ldrb	r3, [r7, #15]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d10d      	bne.n	8009926 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800990a:	4b4a      	ldr	r3, [pc, #296]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6819      	ldr	r1, [r3, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	3b01      	subs	r3, #1
 800991c:	011b      	lsls	r3, r3, #4
 800991e:	430b      	orrs	r3, r1
 8009920:	4944      	ldr	r1, [pc, #272]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009922:	4313      	orrs	r3, r2
 8009924:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009926:	7bfb      	ldrb	r3, [r7, #15]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d17d      	bne.n	8009a28 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800992c:	4b41      	ldr	r3, [pc, #260]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a40      	ldr	r2, [pc, #256]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009932:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009936:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009938:	f7fd f820 	bl	800697c <HAL_GetTick>
 800993c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800993e:	e009      	b.n	8009954 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009940:	f7fd f81c 	bl	800697c <HAL_GetTick>
 8009944:	4602      	mov	r2, r0
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	1ad3      	subs	r3, r2, r3
 800994a:	2b02      	cmp	r3, #2
 800994c:	d902      	bls.n	8009954 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800994e:	2303      	movs	r3, #3
 8009950:	73fb      	strb	r3, [r7, #15]
        break;
 8009952:	e005      	b.n	8009960 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009954:	4b37      	ldr	r3, [pc, #220]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800995c:	2b00      	cmp	r3, #0
 800995e:	d1ef      	bne.n	8009940 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009960:	7bfb      	ldrb	r3, [r7, #15]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d160      	bne.n	8009a28 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d111      	bne.n	8009990 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800996c:	4b31      	ldr	r3, [pc, #196]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 800996e:	691b      	ldr	r3, [r3, #16]
 8009970:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	6892      	ldr	r2, [r2, #8]
 800997c:	0211      	lsls	r1, r2, #8
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	68d2      	ldr	r2, [r2, #12]
 8009982:	0912      	lsrs	r2, r2, #4
 8009984:	0452      	lsls	r2, r2, #17
 8009986:	430a      	orrs	r2, r1
 8009988:	492a      	ldr	r1, [pc, #168]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 800998a:	4313      	orrs	r3, r2
 800998c:	610b      	str	r3, [r1, #16]
 800998e:	e027      	b.n	80099e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	2b01      	cmp	r3, #1
 8009994:	d112      	bne.n	80099bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009996:	4b27      	ldr	r3, [pc, #156]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009998:	691b      	ldr	r3, [r3, #16]
 800999a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800999e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	6892      	ldr	r2, [r2, #8]
 80099a6:	0211      	lsls	r1, r2, #8
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	6912      	ldr	r2, [r2, #16]
 80099ac:	0852      	lsrs	r2, r2, #1
 80099ae:	3a01      	subs	r2, #1
 80099b0:	0552      	lsls	r2, r2, #21
 80099b2:	430a      	orrs	r2, r1
 80099b4:	491f      	ldr	r1, [pc, #124]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 80099b6:	4313      	orrs	r3, r2
 80099b8:	610b      	str	r3, [r1, #16]
 80099ba:	e011      	b.n	80099e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80099bc:	4b1d      	ldr	r3, [pc, #116]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80099c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	6892      	ldr	r2, [r2, #8]
 80099cc:	0211      	lsls	r1, r2, #8
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	6952      	ldr	r2, [r2, #20]
 80099d2:	0852      	lsrs	r2, r2, #1
 80099d4:	3a01      	subs	r2, #1
 80099d6:	0652      	lsls	r2, r2, #25
 80099d8:	430a      	orrs	r2, r1
 80099da:	4916      	ldr	r1, [pc, #88]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 80099dc:	4313      	orrs	r3, r2
 80099de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80099e0:	4b14      	ldr	r3, [pc, #80]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a13      	ldr	r2, [pc, #76]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 80099e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80099ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099ec:	f7fc ffc6 	bl	800697c <HAL_GetTick>
 80099f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80099f2:	e009      	b.n	8009a08 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80099f4:	f7fc ffc2 	bl	800697c <HAL_GetTick>
 80099f8:	4602      	mov	r2, r0
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	1ad3      	subs	r3, r2, r3
 80099fe:	2b02      	cmp	r3, #2
 8009a00:	d902      	bls.n	8009a08 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8009a02:	2303      	movs	r3, #3
 8009a04:	73fb      	strb	r3, [r7, #15]
          break;
 8009a06:	e005      	b.n	8009a14 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009a08:	4b0a      	ldr	r3, [pc, #40]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d0ef      	beq.n	80099f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d106      	bne.n	8009a28 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009a1a:	4b06      	ldr	r3, [pc, #24]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009a1c:	691a      	ldr	r2, [r3, #16]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	699b      	ldr	r3, [r3, #24]
 8009a22:	4904      	ldr	r1, [pc, #16]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009a24:	4313      	orrs	r3, r2
 8009a26:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	40021000 	.word	0x40021000

08009a38 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009a46:	4b6a      	ldr	r3, [pc, #424]	; (8009bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	f003 0303 	and.w	r3, r3, #3
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d018      	beq.n	8009a84 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8009a52:	4b67      	ldr	r3, [pc, #412]	; (8009bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	f003 0203 	and.w	r2, r3, #3
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d10d      	bne.n	8009a7e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
       ||
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d009      	beq.n	8009a7e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8009a6a:	4b61      	ldr	r3, [pc, #388]	; (8009bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	091b      	lsrs	r3, r3, #4
 8009a70:	f003 0307 	and.w	r3, r3, #7
 8009a74:	1c5a      	adds	r2, r3, #1
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	685b      	ldr	r3, [r3, #4]
       ||
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d047      	beq.n	8009b0e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	73fb      	strb	r3, [r7, #15]
 8009a82:	e044      	b.n	8009b0e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2b03      	cmp	r3, #3
 8009a8a:	d018      	beq.n	8009abe <RCCEx_PLLSAI2_Config+0x86>
 8009a8c:	2b03      	cmp	r3, #3
 8009a8e:	d825      	bhi.n	8009adc <RCCEx_PLLSAI2_Config+0xa4>
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d002      	beq.n	8009a9a <RCCEx_PLLSAI2_Config+0x62>
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	d009      	beq.n	8009aac <RCCEx_PLLSAI2_Config+0x74>
 8009a98:	e020      	b.n	8009adc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009a9a:	4b55      	ldr	r3, [pc, #340]	; (8009bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f003 0302 	and.w	r3, r3, #2
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d11d      	bne.n	8009ae2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009aaa:	e01a      	b.n	8009ae2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009aac:	4b50      	ldr	r3, [pc, #320]	; (8009bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d116      	bne.n	8009ae6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009abc:	e013      	b.n	8009ae6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009abe:	4b4c      	ldr	r3, [pc, #304]	; (8009bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d10f      	bne.n	8009aea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009aca:	4b49      	ldr	r3, [pc, #292]	; (8009bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d109      	bne.n	8009aea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009ada:	e006      	b.n	8009aea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	73fb      	strb	r3, [r7, #15]
      break;
 8009ae0:	e004      	b.n	8009aec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009ae2:	bf00      	nop
 8009ae4:	e002      	b.n	8009aec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009ae6:	bf00      	nop
 8009ae8:	e000      	b.n	8009aec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009aea:	bf00      	nop
    }

    if(status == HAL_OK)
 8009aec:	7bfb      	ldrb	r3, [r7, #15]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d10d      	bne.n	8009b0e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009af2:	4b3f      	ldr	r3, [pc, #252]	; (8009bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6819      	ldr	r1, [r3, #0]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	3b01      	subs	r3, #1
 8009b04:	011b      	lsls	r3, r3, #4
 8009b06:	430b      	orrs	r3, r1
 8009b08:	4939      	ldr	r1, [pc, #228]	; (8009bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009b0e:	7bfb      	ldrb	r3, [r7, #15]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d167      	bne.n	8009be4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009b14:	4b36      	ldr	r3, [pc, #216]	; (8009bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a35      	ldr	r2, [pc, #212]	; (8009bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b20:	f7fc ff2c 	bl	800697c <HAL_GetTick>
 8009b24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009b26:	e009      	b.n	8009b3c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009b28:	f7fc ff28 	bl	800697c <HAL_GetTick>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	d902      	bls.n	8009b3c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009b36:	2303      	movs	r3, #3
 8009b38:	73fb      	strb	r3, [r7, #15]
        break;
 8009b3a:	e005      	b.n	8009b48 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009b3c:	4b2c      	ldr	r3, [pc, #176]	; (8009bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d1ef      	bne.n	8009b28 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009b48:	7bfb      	ldrb	r3, [r7, #15]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d14a      	bne.n	8009be4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d111      	bne.n	8009b78 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009b54:	4b26      	ldr	r3, [pc, #152]	; (8009bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b56:	695b      	ldr	r3, [r3, #20]
 8009b58:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	6892      	ldr	r2, [r2, #8]
 8009b64:	0211      	lsls	r1, r2, #8
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	68d2      	ldr	r2, [r2, #12]
 8009b6a:	0912      	lsrs	r2, r2, #4
 8009b6c:	0452      	lsls	r2, r2, #17
 8009b6e:	430a      	orrs	r2, r1
 8009b70:	491f      	ldr	r1, [pc, #124]	; (8009bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b72:	4313      	orrs	r3, r2
 8009b74:	614b      	str	r3, [r1, #20]
 8009b76:	e011      	b.n	8009b9c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009b78:	4b1d      	ldr	r3, [pc, #116]	; (8009bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b7a:	695b      	ldr	r3, [r3, #20]
 8009b7c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009b80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	6892      	ldr	r2, [r2, #8]
 8009b88:	0211      	lsls	r1, r2, #8
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	6912      	ldr	r2, [r2, #16]
 8009b8e:	0852      	lsrs	r2, r2, #1
 8009b90:	3a01      	subs	r2, #1
 8009b92:	0652      	lsls	r2, r2, #25
 8009b94:	430a      	orrs	r2, r1
 8009b96:	4916      	ldr	r1, [pc, #88]	; (8009bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009b9c:	4b14      	ldr	r3, [pc, #80]	; (8009bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a13      	ldr	r2, [pc, #76]	; (8009bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ba6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ba8:	f7fc fee8 	bl	800697c <HAL_GetTick>
 8009bac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009bae:	e009      	b.n	8009bc4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009bb0:	f7fc fee4 	bl	800697c <HAL_GetTick>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	1ad3      	subs	r3, r2, r3
 8009bba:	2b02      	cmp	r3, #2
 8009bbc:	d902      	bls.n	8009bc4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8009bbe:	2303      	movs	r3, #3
 8009bc0:	73fb      	strb	r3, [r7, #15]
          break;
 8009bc2:	e005      	b.n	8009bd0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009bc4:	4b0a      	ldr	r3, [pc, #40]	; (8009bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d0ef      	beq.n	8009bb0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8009bd0:	7bfb      	ldrb	r3, [r7, #15]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d106      	bne.n	8009be4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009bd6:	4b06      	ldr	r3, [pc, #24]	; (8009bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009bd8:	695a      	ldr	r2, [r3, #20]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	695b      	ldr	r3, [r3, #20]
 8009bde:	4904      	ldr	r1, [pc, #16]	; (8009bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009be0:	4313      	orrs	r3, r2
 8009be2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	40021000 	.word	0x40021000

08009bf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d101      	bne.n	8009c06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	e095      	b.n	8009d32 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d108      	bne.n	8009c20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c16:	d009      	beq.n	8009c2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	61da      	str	r2, [r3, #28]
 8009c1e:	e005      	b.n	8009c2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d106      	bne.n	8009c4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2200      	movs	r2, #0
 8009c42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f7fb f966 	bl	8004f18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2202      	movs	r2, #2
 8009c50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009c6c:	d902      	bls.n	8009c74 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	60fb      	str	r3, [r7, #12]
 8009c72:	e002      	b.n	8009c7a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c78:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009c82:	d007      	beq.n	8009c94 <HAL_SPI_Init+0xa0>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009c8c:	d002      	beq.n	8009c94 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009ca4:	431a      	orrs	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	691b      	ldr	r3, [r3, #16]
 8009caa:	f003 0302 	and.w	r3, r3, #2
 8009cae:	431a      	orrs	r2, r3
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	695b      	ldr	r3, [r3, #20]
 8009cb4:	f003 0301 	and.w	r3, r3, #1
 8009cb8:	431a      	orrs	r2, r3
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	699b      	ldr	r3, [r3, #24]
 8009cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009cc2:	431a      	orrs	r2, r3
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	69db      	ldr	r3, [r3, #28]
 8009cc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ccc:	431a      	orrs	r2, r3
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a1b      	ldr	r3, [r3, #32]
 8009cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cd6:	ea42 0103 	orr.w	r1, r2, r3
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cde:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	430a      	orrs	r2, r1
 8009ce8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	699b      	ldr	r3, [r3, #24]
 8009cee:	0c1b      	lsrs	r3, r3, #16
 8009cf0:	f003 0204 	and.w	r2, r3, #4
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf8:	f003 0310 	and.w	r3, r3, #16
 8009cfc:	431a      	orrs	r2, r3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d02:	f003 0308 	and.w	r3, r3, #8
 8009d06:	431a      	orrs	r2, r3
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009d10:	ea42 0103 	orr.w	r1, r2, r3
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	430a      	orrs	r2, r1
 8009d20:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2200      	movs	r2, #0
 8009d26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b082      	sub	sp, #8
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d101      	bne.n	8009d4c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	e01a      	b.n	8009d82 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2202      	movs	r2, #2
 8009d50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d62:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f7fb f91b 	bl	8004fa0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3708      	adds	r7, #8
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b088      	sub	sp, #32
 8009d8e:	af02      	add	r7, sp, #8
 8009d90:	60f8      	str	r0, [r7, #12]
 8009d92:	60b9      	str	r1, [r7, #8]
 8009d94:	603b      	str	r3, [r7, #0]
 8009d96:	4613      	mov	r3, r2
 8009d98:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009da6:	d112      	bne.n	8009dce <HAL_SPI_Receive+0x44>
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d10e      	bne.n	8009dce <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2204      	movs	r2, #4
 8009db4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009db8:	88fa      	ldrh	r2, [r7, #6]
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	4613      	mov	r3, r2
 8009dc0:	68ba      	ldr	r2, [r7, #8]
 8009dc2:	68b9      	ldr	r1, [r7, #8]
 8009dc4:	68f8      	ldr	r0, [r7, #12]
 8009dc6:	f000 f910 	bl	8009fea <HAL_SPI_TransmitReceive>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	e109      	b.n	8009fe2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d101      	bne.n	8009ddc <HAL_SPI_Receive+0x52>
 8009dd8:	2302      	movs	r3, #2
 8009dda:	e102      	b.n	8009fe2 <HAL_SPI_Receive+0x258>
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2201      	movs	r2, #1
 8009de0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009de4:	f7fc fdca 	bl	800697c <HAL_GetTick>
 8009de8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	d002      	beq.n	8009dfc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009df6:	2302      	movs	r3, #2
 8009df8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009dfa:	e0e9      	b.n	8009fd0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d002      	beq.n	8009e08 <HAL_SPI_Receive+0x7e>
 8009e02:	88fb      	ldrh	r3, [r7, #6]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d102      	bne.n	8009e0e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009e0c:	e0e0      	b.n	8009fd0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2204      	movs	r2, #4
 8009e12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	68ba      	ldr	r2, [r7, #8]
 8009e20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	88fa      	ldrh	r2, [r7, #6]
 8009e26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	88fa      	ldrh	r2, [r7, #6]
 8009e2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2200      	movs	r2, #0
 8009e36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2200      	movs	r2, #0
 8009e42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2200      	movs	r2, #0
 8009e48:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	68db      	ldr	r3, [r3, #12]
 8009e54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009e58:	d908      	bls.n	8009e6c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	685a      	ldr	r2, [r3, #4]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009e68:	605a      	str	r2, [r3, #4]
 8009e6a:	e007      	b.n	8009e7c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	685a      	ldr	r2, [r3, #4]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009e7a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e84:	d10f      	bne.n	8009ea6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009ea4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb0:	2b40      	cmp	r3, #64	; 0x40
 8009eb2:	d007      	beq.n	8009ec4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ec2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009ecc:	d867      	bhi.n	8009f9e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009ece:	e030      	b.n	8009f32 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	f003 0301 	and.w	r3, r3, #1
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d117      	bne.n	8009f0e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f103 020c 	add.w	r2, r3, #12
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eea:	7812      	ldrb	r2, [r2, #0]
 8009eec:	b2d2      	uxtb	r2, r2
 8009eee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef4:	1c5a      	adds	r2, r3, #1
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	3b01      	subs	r3, #1
 8009f04:	b29a      	uxth	r2, r3
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009f0c:	e011      	b.n	8009f32 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f0e:	f7fc fd35 	bl	800697c <HAL_GetTick>
 8009f12:	4602      	mov	r2, r0
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	1ad3      	subs	r3, r2, r3
 8009f18:	683a      	ldr	r2, [r7, #0]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d803      	bhi.n	8009f26 <HAL_SPI_Receive+0x19c>
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f24:	d102      	bne.n	8009f2c <HAL_SPI_Receive+0x1a2>
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d102      	bne.n	8009f32 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8009f2c:	2303      	movs	r3, #3
 8009f2e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009f30:	e04e      	b.n	8009fd0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d1c8      	bne.n	8009ed0 <HAL_SPI_Receive+0x146>
 8009f3e:	e034      	b.n	8009faa <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	f003 0301 	and.w	r3, r3, #1
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d115      	bne.n	8009f7a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	68da      	ldr	r2, [r3, #12]
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f58:	b292      	uxth	r2, r2
 8009f5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f60:	1c9a      	adds	r2, r3, #2
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	b29a      	uxth	r2, r3
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009f78:	e011      	b.n	8009f9e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f7a:	f7fc fcff 	bl	800697c <HAL_GetTick>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	1ad3      	subs	r3, r2, r3
 8009f84:	683a      	ldr	r2, [r7, #0]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d803      	bhi.n	8009f92 <HAL_SPI_Receive+0x208>
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f90:	d102      	bne.n	8009f98 <HAL_SPI_Receive+0x20e>
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d102      	bne.n	8009f9e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8009f98:	2303      	movs	r3, #3
 8009f9a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009f9c:	e018      	b.n	8009fd0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d1ca      	bne.n	8009f40 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009faa:	693a      	ldr	r2, [r7, #16]
 8009fac:	6839      	ldr	r1, [r7, #0]
 8009fae:	68f8      	ldr	r0, [r7, #12]
 8009fb0:	f001 f802 	bl	800afb8 <SPI_EndRxTransaction>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d002      	beq.n	8009fc0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2220      	movs	r2, #32
 8009fbe:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d002      	beq.n	8009fce <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	75fb      	strb	r3, [r7, #23]
 8009fcc:	e000      	b.n	8009fd0 <HAL_SPI_Receive+0x246>
  }

error :
 8009fce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3718      	adds	r7, #24
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b08a      	sub	sp, #40	; 0x28
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	60f8      	str	r0, [r7, #12]
 8009ff2:	60b9      	str	r1, [r7, #8]
 8009ff4:	607a      	str	r2, [r7, #4]
 8009ff6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d101      	bne.n	800a010 <HAL_SPI_TransmitReceive+0x26>
 800a00c:	2302      	movs	r3, #2
 800a00e:	e1fb      	b.n	800a408 <HAL_SPI_TransmitReceive+0x41e>
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2201      	movs	r2, #1
 800a014:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a018:	f7fc fcb0 	bl	800697c <HAL_GetTick>
 800a01c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a024:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a02c:	887b      	ldrh	r3, [r7, #2]
 800a02e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a030:	887b      	ldrh	r3, [r7, #2]
 800a032:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a034:	7efb      	ldrb	r3, [r7, #27]
 800a036:	2b01      	cmp	r3, #1
 800a038:	d00e      	beq.n	800a058 <HAL_SPI_TransmitReceive+0x6e>
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a040:	d106      	bne.n	800a050 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d102      	bne.n	800a050 <HAL_SPI_TransmitReceive+0x66>
 800a04a:	7efb      	ldrb	r3, [r7, #27]
 800a04c:	2b04      	cmp	r3, #4
 800a04e:	d003      	beq.n	800a058 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a050:	2302      	movs	r3, #2
 800a052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a056:	e1cd      	b.n	800a3f4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d005      	beq.n	800a06a <HAL_SPI_TransmitReceive+0x80>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d002      	beq.n	800a06a <HAL_SPI_TransmitReceive+0x80>
 800a064:	887b      	ldrh	r3, [r7, #2]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d103      	bne.n	800a072 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a070:	e1c0      	b.n	800a3f4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	2b04      	cmp	r3, #4
 800a07c:	d003      	beq.n	800a086 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2205      	movs	r2, #5
 800a082:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2200      	movs	r2, #0
 800a08a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	887a      	ldrh	r2, [r7, #2]
 800a096:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	887a      	ldrh	r2, [r7, #2]
 800a09e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	68ba      	ldr	r2, [r7, #8]
 800a0a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	887a      	ldrh	r2, [r7, #2]
 800a0ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	887a      	ldrh	r2, [r7, #2]
 800a0b2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a0c8:	d802      	bhi.n	800a0d0 <HAL_SPI_TransmitReceive+0xe6>
 800a0ca:	8a3b      	ldrh	r3, [r7, #16]
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d908      	bls.n	800a0e2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	685a      	ldr	r2, [r3, #4]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a0de:	605a      	str	r2, [r3, #4]
 800a0e0:	e007      	b.n	800a0f2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	685a      	ldr	r2, [r3, #4]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a0f0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0fc:	2b40      	cmp	r3, #64	; 0x40
 800a0fe:	d007      	beq.n	800a110 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a10e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a118:	d97c      	bls.n	800a214 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d002      	beq.n	800a128 <HAL_SPI_TransmitReceive+0x13e>
 800a122:	8a7b      	ldrh	r3, [r7, #18]
 800a124:	2b01      	cmp	r3, #1
 800a126:	d169      	bne.n	800a1fc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a12c:	881a      	ldrh	r2, [r3, #0]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a138:	1c9a      	adds	r2, r3, #2
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a142:	b29b      	uxth	r3, r3
 800a144:	3b01      	subs	r3, #1
 800a146:	b29a      	uxth	r2, r3
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a14c:	e056      	b.n	800a1fc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	f003 0302 	and.w	r3, r3, #2
 800a158:	2b02      	cmp	r3, #2
 800a15a:	d11b      	bne.n	800a194 <HAL_SPI_TransmitReceive+0x1aa>
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a160:	b29b      	uxth	r3, r3
 800a162:	2b00      	cmp	r3, #0
 800a164:	d016      	beq.n	800a194 <HAL_SPI_TransmitReceive+0x1aa>
 800a166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d113      	bne.n	800a194 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a170:	881a      	ldrh	r2, [r3, #0]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a17c:	1c9a      	adds	r2, r3, #2
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a186:	b29b      	uxth	r3, r3
 800a188:	3b01      	subs	r3, #1
 800a18a:	b29a      	uxth	r2, r3
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a190:	2300      	movs	r3, #0
 800a192:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	f003 0301 	and.w	r3, r3, #1
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d11c      	bne.n	800a1dc <HAL_SPI_TransmitReceive+0x1f2>
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d016      	beq.n	800a1dc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	68da      	ldr	r2, [r3, #12]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b8:	b292      	uxth	r2, r2
 800a1ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c0:	1c9a      	adds	r2, r3, #2
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	b29a      	uxth	r2, r3
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a1dc:	f7fc fbce 	bl	800697c <HAL_GetTick>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	69fb      	ldr	r3, [r7, #28]
 800a1e4:	1ad3      	subs	r3, r2, r3
 800a1e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d807      	bhi.n	800a1fc <HAL_SPI_TransmitReceive+0x212>
 800a1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f2:	d003      	beq.n	800a1fc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800a1f4:	2303      	movs	r3, #3
 800a1f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a1fa:	e0fb      	b.n	800a3f4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a200:	b29b      	uxth	r3, r3
 800a202:	2b00      	cmp	r3, #0
 800a204:	d1a3      	bne.n	800a14e <HAL_SPI_TransmitReceive+0x164>
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d19d      	bne.n	800a14e <HAL_SPI_TransmitReceive+0x164>
 800a212:	e0df      	b.n	800a3d4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d003      	beq.n	800a224 <HAL_SPI_TransmitReceive+0x23a>
 800a21c:	8a7b      	ldrh	r3, [r7, #18]
 800a21e:	2b01      	cmp	r3, #1
 800a220:	f040 80cb 	bne.w	800a3ba <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a228:	b29b      	uxth	r3, r3
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d912      	bls.n	800a254 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a232:	881a      	ldrh	r2, [r3, #0]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a23e:	1c9a      	adds	r2, r3, #2
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a248:	b29b      	uxth	r3, r3
 800a24a:	3b02      	subs	r3, #2
 800a24c:	b29a      	uxth	r2, r3
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a252:	e0b2      	b.n	800a3ba <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	330c      	adds	r3, #12
 800a25e:	7812      	ldrb	r2, [r2, #0]
 800a260:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a266:	1c5a      	adds	r2, r3, #1
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a270:	b29b      	uxth	r3, r3
 800a272:	3b01      	subs	r3, #1
 800a274:	b29a      	uxth	r2, r3
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a27a:	e09e      	b.n	800a3ba <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	f003 0302 	and.w	r3, r3, #2
 800a286:	2b02      	cmp	r3, #2
 800a288:	d134      	bne.n	800a2f4 <HAL_SPI_TransmitReceive+0x30a>
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a28e:	b29b      	uxth	r3, r3
 800a290:	2b00      	cmp	r3, #0
 800a292:	d02f      	beq.n	800a2f4 <HAL_SPI_TransmitReceive+0x30a>
 800a294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a296:	2b01      	cmp	r3, #1
 800a298:	d12c      	bne.n	800a2f4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d912      	bls.n	800a2ca <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a8:	881a      	ldrh	r2, [r3, #0]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b4:	1c9a      	adds	r2, r3, #2
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	3b02      	subs	r3, #2
 800a2c2:	b29a      	uxth	r2, r3
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a2c8:	e012      	b.n	800a2f0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	330c      	adds	r3, #12
 800a2d4:	7812      	ldrb	r2, [r2, #0]
 800a2d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2dc:	1c5a      	adds	r2, r3, #1
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	3b01      	subs	r3, #1
 800a2ea:	b29a      	uxth	r2, r3
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	f003 0301 	and.w	r3, r3, #1
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d148      	bne.n	800a394 <HAL_SPI_TransmitReceive+0x3aa>
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a308:	b29b      	uxth	r3, r3
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d042      	beq.n	800a394 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a314:	b29b      	uxth	r3, r3
 800a316:	2b01      	cmp	r3, #1
 800a318:	d923      	bls.n	800a362 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	68da      	ldr	r2, [r3, #12]
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a324:	b292      	uxth	r2, r2
 800a326:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32c:	1c9a      	adds	r2, r3, #2
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a338:	b29b      	uxth	r3, r3
 800a33a:	3b02      	subs	r3, #2
 800a33c:	b29a      	uxth	r2, r3
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	d81f      	bhi.n	800a390 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	685a      	ldr	r2, [r3, #4]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a35e:	605a      	str	r2, [r3, #4]
 800a360:	e016      	b.n	800a390 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f103 020c 	add.w	r2, r3, #12
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a36e:	7812      	ldrb	r2, [r2, #0]
 800a370:	b2d2      	uxtb	r2, r2
 800a372:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a378:	1c5a      	adds	r2, r3, #1
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a384:	b29b      	uxth	r3, r3
 800a386:	3b01      	subs	r3, #1
 800a388:	b29a      	uxth	r2, r3
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a390:	2301      	movs	r3, #1
 800a392:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a394:	f7fc faf2 	bl	800697c <HAL_GetTick>
 800a398:	4602      	mov	r2, r0
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	1ad3      	subs	r3, r2, r3
 800a39e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d803      	bhi.n	800a3ac <HAL_SPI_TransmitReceive+0x3c2>
 800a3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3aa:	d102      	bne.n	800a3b2 <HAL_SPI_TransmitReceive+0x3c8>
 800a3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d103      	bne.n	800a3ba <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a3b8:	e01c      	b.n	800a3f4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	f47f af5b 	bne.w	800a27c <HAL_SPI_TransmitReceive+0x292>
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	f47f af54 	bne.w	800a27c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a3d4:	69fa      	ldr	r2, [r7, #28]
 800a3d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a3d8:	68f8      	ldr	r0, [r7, #12]
 800a3da:	f000 fe45 	bl	800b068 <SPI_EndRxTxTransaction>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d006      	beq.n	800a3f2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2220      	movs	r2, #32
 800a3ee:	661a      	str	r2, [r3, #96]	; 0x60
 800a3f0:	e000      	b.n	800a3f4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800a3f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2200      	movs	r2, #0
 800a400:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a404:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3728      	adds	r7, #40	; 0x28
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a410:	b480      	push	{r7}
 800a412:	b087      	sub	sp, #28
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	4613      	mov	r3, r2
 800a41c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a41e:	2300      	movs	r3, #0
 800a420:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d101      	bne.n	800a430 <HAL_SPI_Transmit_IT+0x20>
 800a42c:	2302      	movs	r3, #2
 800a42e:	e072      	b.n	800a516 <HAL_SPI_Transmit_IT+0x106>
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2201      	movs	r2, #1
 800a434:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d002      	beq.n	800a444 <HAL_SPI_Transmit_IT+0x34>
 800a43e:	88fb      	ldrh	r3, [r7, #6]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d102      	bne.n	800a44a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 800a444:	2301      	movs	r3, #1
 800a446:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a448:	e060      	b.n	800a50c <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a450:	b2db      	uxtb	r3, r3
 800a452:	2b01      	cmp	r3, #1
 800a454:	d002      	beq.n	800a45c <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800a456:	2302      	movs	r3, #2
 800a458:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a45a:	e057      	b.n	800a50c <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2203      	movs	r2, #3
 800a460:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2200      	movs	r2, #0
 800a468:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	68ba      	ldr	r2, [r7, #8]
 800a46e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	88fa      	ldrh	r2, [r7, #6]
 800a474:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	88fa      	ldrh	r2, [r7, #6]
 800a47a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2200      	movs	r2, #0
 800a480:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2200      	movs	r2, #0
 800a486:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2200      	movs	r2, #0
 800a48e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2200      	movs	r2, #0
 800a496:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	68db      	ldr	r3, [r3, #12]
 800a49c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a4a0:	d903      	bls.n	800a4aa <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	4a1f      	ldr	r2, [pc, #124]	; (800a524 <HAL_SPI_Transmit_IT+0x114>)
 800a4a6:	651a      	str	r2, [r3, #80]	; 0x50
 800a4a8:	e002      	b.n	800a4b0 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	4a1e      	ldr	r2, [pc, #120]	; (800a528 <HAL_SPI_Transmit_IT+0x118>)
 800a4ae:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4b8:	d10f      	bne.n	800a4da <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a4d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	685a      	ldr	r2, [r3, #4]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800a4e8:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4f4:	2b40      	cmp	r3, #64	; 0x40
 800a4f6:	d008      	beq.n	800a50a <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	681a      	ldr	r2, [r3, #0]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a506:	601a      	str	r2, [r3, #0]
 800a508:	e000      	b.n	800a50c <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 800a50a:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2200      	movs	r2, #0
 800a510:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a514:	7dfb      	ldrb	r3, [r7, #23]
}
 800a516:	4618      	mov	r0, r3
 800a518:	371c      	adds	r7, #28
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr
 800a522:	bf00      	nop
 800a524:	0800ad37 	.word	0x0800ad37
 800a528:	0800acf1 	.word	0x0800acf1

0800a52c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b086      	sub	sp, #24
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	4613      	mov	r3, r2
 800a538:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a53a:	2300      	movs	r3, #0
 800a53c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d110      	bne.n	800a568 <HAL_SPI_Receive_IT+0x3c>
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a54e:	d10b      	bne.n	800a568 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2204      	movs	r2, #4
 800a554:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800a558:	88fb      	ldrh	r3, [r7, #6]
 800a55a:	68ba      	ldr	r2, [r7, #8]
 800a55c:	68b9      	ldr	r1, [r7, #8]
 800a55e:	68f8      	ldr	r0, [r7, #12]
 800a560:	f000 f894 	bl	800a68c <HAL_SPI_TransmitReceive_IT>
 800a564:	4603      	mov	r3, r0
 800a566:	e089      	b.n	800a67c <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d101      	bne.n	800a576 <HAL_SPI_Receive_IT+0x4a>
 800a572:	2302      	movs	r3, #2
 800a574:	e082      	b.n	800a67c <HAL_SPI_Receive_IT+0x150>
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2201      	movs	r2, #1
 800a57a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a584:	b2db      	uxtb	r3, r3
 800a586:	2b01      	cmp	r3, #1
 800a588:	d002      	beq.n	800a590 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800a58a:	2302      	movs	r3, #2
 800a58c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a58e:	e070      	b.n	800a672 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d002      	beq.n	800a59c <HAL_SPI_Receive_IT+0x70>
 800a596:	88fb      	ldrh	r3, [r7, #6]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d102      	bne.n	800a5a2 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 800a59c:	2301      	movs	r3, #1
 800a59e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a5a0:	e067      	b.n	800a672 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2204      	movs	r2, #4
 800a5a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	68ba      	ldr	r2, [r7, #8]
 800a5b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	88fa      	ldrh	r2, [r7, #6]
 800a5ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	88fa      	ldrh	r2, [r7, #6]
 800a5c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a5e6:	d90b      	bls.n	800a600 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	685a      	ldr	r2, [r3, #4]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a5f6:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	4a22      	ldr	r2, [pc, #136]	; (800a684 <HAL_SPI_Receive_IT+0x158>)
 800a5fc:	64da      	str	r2, [r3, #76]	; 0x4c
 800a5fe:	e00a      	b.n	800a616 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	685a      	ldr	r2, [r3, #4]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a60e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	4a1d      	ldr	r2, [pc, #116]	; (800a688 <HAL_SPI_Receive_IT+0x15c>)
 800a614:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a61e:	d10f      	bne.n	800a640 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a62e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a63e:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	685a      	ldr	r2, [r3, #4]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800a64e:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a65a:	2b40      	cmp	r3, #64	; 0x40
 800a65c:	d008      	beq.n	800a670 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a66c:	601a      	str	r2, [r3, #0]
 800a66e:	e000      	b.n	800a672 <HAL_SPI_Receive_IT+0x146>
  }

error :
 800a670:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2200      	movs	r2, #0
 800a676:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a67a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3718      	adds	r7, #24
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}
 800a684:	0800aca5 	.word	0x0800aca5
 800a688:	0800ac55 	.word	0x0800ac55

0800a68c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b087      	sub	sp, #28
 800a690:	af00      	add	r7, sp, #0
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	60b9      	str	r1, [r7, #8]
 800a696:	607a      	str	r2, [r7, #4]
 800a698:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a69a:	2300      	movs	r3, #0
 800a69c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d101      	bne.n	800a6ac <HAL_SPI_TransmitReceive_IT+0x20>
 800a6a8:	2302      	movs	r3, #2
 800a6aa:	e091      	b.n	800a7d0 <HAL_SPI_TransmitReceive_IT+0x144>
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a6ba:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a6c2:	7dbb      	ldrb	r3, [r7, #22]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d00d      	beq.n	800a6e4 <HAL_SPI_TransmitReceive_IT+0x58>
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a6ce:	d106      	bne.n	800a6de <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d102      	bne.n	800a6de <HAL_SPI_TransmitReceive_IT+0x52>
 800a6d8:	7dbb      	ldrb	r3, [r7, #22]
 800a6da:	2b04      	cmp	r3, #4
 800a6dc:	d002      	beq.n	800a6e4 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800a6de:	2302      	movs	r3, #2
 800a6e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a6e2:	e070      	b.n	800a7c6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d005      	beq.n	800a6f6 <HAL_SPI_TransmitReceive_IT+0x6a>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d002      	beq.n	800a6f6 <HAL_SPI_TransmitReceive_IT+0x6a>
 800a6f0:	887b      	ldrh	r3, [r7, #2]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d102      	bne.n	800a6fc <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a6fa:	e064      	b.n	800a7c6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a702:	b2db      	uxtb	r3, r3
 800a704:	2b04      	cmp	r3, #4
 800a706:	d003      	beq.n	800a710 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2205      	movs	r2, #5
 800a70c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2200      	movs	r2, #0
 800a714:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	68ba      	ldr	r2, [r7, #8]
 800a71a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	887a      	ldrh	r2, [r7, #2]
 800a720:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	887a      	ldrh	r2, [r7, #2]
 800a726:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	887a      	ldrh	r2, [r7, #2]
 800a732:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	887a      	ldrh	r2, [r7, #2]
 800a73a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a746:	d906      	bls.n	800a756 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	4a24      	ldr	r2, [pc, #144]	; (800a7dc <HAL_SPI_TransmitReceive_IT+0x150>)
 800a74c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	4a23      	ldr	r2, [pc, #140]	; (800a7e0 <HAL_SPI_TransmitReceive_IT+0x154>)
 800a752:	651a      	str	r2, [r3, #80]	; 0x50
 800a754:	e005      	b.n	800a762 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	4a22      	ldr	r2, [pc, #136]	; (800a7e4 <HAL_SPI_TransmitReceive_IT+0x158>)
 800a75a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	4a22      	ldr	r2, [pc, #136]	; (800a7e8 <HAL_SPI_TransmitReceive_IT+0x15c>)
 800a760:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a76a:	d802      	bhi.n	800a772 <HAL_SPI_TransmitReceive_IT+0xe6>
 800a76c:	887b      	ldrh	r3, [r7, #2]
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d908      	bls.n	800a784 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	685a      	ldr	r2, [r3, #4]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a780:	605a      	str	r2, [r3, #4]
 800a782:	e007      	b.n	800a794 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	685a      	ldr	r2, [r3, #4]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a792:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	685a      	ldr	r2, [r3, #4]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800a7a2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ae:	2b40      	cmp	r3, #64	; 0x40
 800a7b0:	d008      	beq.n	800a7c4 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7c0:	601a      	str	r2, [r3, #0]
 800a7c2:	e000      	b.n	800a7c6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 800a7c4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a7ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	371c      	adds	r7, #28
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr
 800a7dc:	0800ab8f 	.word	0x0800ab8f
 800a7e0:	0800abf5 	.word	0x0800abf5
 800a7e4:	0800aa3f 	.word	0x0800aa3f
 800a7e8:	0800aafd 	.word	0x0800aafd

0800a7ec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b088      	sub	sp, #32
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	099b      	lsrs	r3, r3, #6
 800a808:	f003 0301 	and.w	r3, r3, #1
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d10f      	bne.n	800a830 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a810:	69bb      	ldr	r3, [r7, #24]
 800a812:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00a      	beq.n	800a830 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	099b      	lsrs	r3, r3, #6
 800a81e:	f003 0301 	and.w	r3, r3, #1
 800a822:	2b00      	cmp	r3, #0
 800a824:	d004      	beq.n	800a830 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	4798      	blx	r3
    return;
 800a82e:	e0d7      	b.n	800a9e0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a830:	69bb      	ldr	r3, [r7, #24]
 800a832:	085b      	lsrs	r3, r3, #1
 800a834:	f003 0301 	and.w	r3, r3, #1
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00a      	beq.n	800a852 <HAL_SPI_IRQHandler+0x66>
 800a83c:	69fb      	ldr	r3, [r7, #28]
 800a83e:	09db      	lsrs	r3, r3, #7
 800a840:	f003 0301 	and.w	r3, r3, #1
 800a844:	2b00      	cmp	r3, #0
 800a846:	d004      	beq.n	800a852 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	4798      	blx	r3
    return;
 800a850:	e0c6      	b.n	800a9e0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	095b      	lsrs	r3, r3, #5
 800a856:	f003 0301 	and.w	r3, r3, #1
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d10c      	bne.n	800a878 <HAL_SPI_IRQHandler+0x8c>
 800a85e:	69bb      	ldr	r3, [r7, #24]
 800a860:	099b      	lsrs	r3, r3, #6
 800a862:	f003 0301 	and.w	r3, r3, #1
 800a866:	2b00      	cmp	r3, #0
 800a868:	d106      	bne.n	800a878 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	0a1b      	lsrs	r3, r3, #8
 800a86e:	f003 0301 	and.w	r3, r3, #1
 800a872:	2b00      	cmp	r3, #0
 800a874:	f000 80b4 	beq.w	800a9e0 <HAL_SPI_IRQHandler+0x1f4>
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	095b      	lsrs	r3, r3, #5
 800a87c:	f003 0301 	and.w	r3, r3, #1
 800a880:	2b00      	cmp	r3, #0
 800a882:	f000 80ad 	beq.w	800a9e0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	099b      	lsrs	r3, r3, #6
 800a88a:	f003 0301 	and.w	r3, r3, #1
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d023      	beq.n	800a8da <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	2b03      	cmp	r3, #3
 800a89c:	d011      	beq.n	800a8c2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8a2:	f043 0204 	orr.w	r2, r3, #4
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	617b      	str	r3, [r7, #20]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	617b      	str	r3, [r7, #20]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	689b      	ldr	r3, [r3, #8]
 800a8bc:	617b      	str	r3, [r7, #20]
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	e00b      	b.n	800a8da <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	613b      	str	r3, [r7, #16]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	68db      	ldr	r3, [r3, #12]
 800a8cc:	613b      	str	r3, [r7, #16]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	613b      	str	r3, [r7, #16]
 800a8d6:	693b      	ldr	r3, [r7, #16]
        return;
 800a8d8:	e082      	b.n	800a9e0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	095b      	lsrs	r3, r3, #5
 800a8de:	f003 0301 	and.w	r3, r3, #1
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d014      	beq.n	800a910 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8ea:	f043 0201 	orr.w	r2, r3, #1
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	60fb      	str	r3, [r7, #12]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	60fb      	str	r3, [r7, #12]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a90c:	601a      	str	r2, [r3, #0]
 800a90e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a910:	69bb      	ldr	r3, [r7, #24]
 800a912:	0a1b      	lsrs	r3, r3, #8
 800a914:	f003 0301 	and.w	r3, r3, #1
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d00c      	beq.n	800a936 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a920:	f043 0208 	orr.w	r2, r3, #8
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a928:	2300      	movs	r3, #0
 800a92a:	60bb      	str	r3, [r7, #8]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	689b      	ldr	r3, [r3, #8]
 800a932:	60bb      	str	r3, [r7, #8]
 800a934:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d04f      	beq.n	800a9de <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	685a      	ldr	r2, [r3, #4]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a94c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2201      	movs	r2, #1
 800a952:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a956:	69fb      	ldr	r3, [r7, #28]
 800a958:	f003 0302 	and.w	r3, r3, #2
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d104      	bne.n	800a96a <HAL_SPI_IRQHandler+0x17e>
 800a960:	69fb      	ldr	r3, [r7, #28]
 800a962:	f003 0301 	and.w	r3, r3, #1
 800a966:	2b00      	cmp	r3, #0
 800a968:	d034      	beq.n	800a9d4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	685a      	ldr	r2, [r3, #4]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f022 0203 	bic.w	r2, r2, #3
 800a978:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d011      	beq.n	800a9a6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a986:	4a18      	ldr	r2, [pc, #96]	; (800a9e8 <HAL_SPI_IRQHandler+0x1fc>)
 800a988:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a98e:	4618      	mov	r0, r3
 800a990:	f7fc fa42 	bl	8006e18 <HAL_DMA_Abort_IT>
 800a994:	4603      	mov	r3, r0
 800a996:	2b00      	cmp	r3, #0
 800a998:	d005      	beq.n	800a9a6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a99e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d016      	beq.n	800a9dc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9b2:	4a0d      	ldr	r2, [pc, #52]	; (800a9e8 <HAL_SPI_IRQHandler+0x1fc>)
 800a9b4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7fc fa2c 	bl	8006e18 <HAL_DMA_Abort_IT>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d00a      	beq.n	800a9dc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800a9d2:	e003      	b.n	800a9dc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 f813 	bl	800aa00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a9da:	e000      	b.n	800a9de <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a9dc:	bf00      	nop
    return;
 800a9de:	bf00      	nop
  }
}
 800a9e0:	3720      	adds	r7, #32
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	0800aa15 	.word	0x0800aa15

0800a9ec <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a9f4:	bf00      	nop
 800a9f6:	370c      	adds	r7, #12
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800aa08:	bf00      	nop
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa20:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2200      	movs	r2, #0
 800aa26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800aa30:	68f8      	ldr	r0, [r7, #12]
 800aa32:	f7ff ffe5 	bl	800aa00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aa36:	bf00      	nop
 800aa38:	3710      	adds	r7, #16
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}

0800aa3e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b082      	sub	sp, #8
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d923      	bls.n	800aa9a <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	68da      	ldr	r2, [r3, #12]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa5c:	b292      	uxth	r2, r2
 800aa5e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa64:	1c9a      	adds	r2, r3, #2
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	3b02      	subs	r3, #2
 800aa74:	b29a      	uxth	r2, r3
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d11f      	bne.n	800aac8 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	685a      	ldr	r2, [r3, #4]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800aa96:	605a      	str	r2, [r3, #4]
 800aa98:	e016      	b.n	800aac8 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f103 020c 	add.w	r2, r3, #12
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaa6:	7812      	ldrb	r2, [r2, #0]
 800aaa8:	b2d2      	uxtb	r2, r2
 800aaaa:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab0:	1c5a      	adds	r2, r3, #1
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	3b01      	subs	r3, #1
 800aac0:	b29a      	uxth	r2, r3
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aace:	b29b      	uxth	r3, r3
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d10f      	bne.n	800aaf4 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	685a      	ldr	r2, [r3, #4]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800aae2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aae8:	b29b      	uxth	r3, r3
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d102      	bne.n	800aaf4 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 fb00 	bl	800b0f4 <SPI_CloseRxTx_ISR>
    }
  }
}
 800aaf4:	bf00      	nop
 800aaf6:	3708      	adds	r7, #8
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d912      	bls.n	800ab34 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab12:	881a      	ldrh	r2, [r3, #0]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab1e:	1c9a      	adds	r2, r3, #2
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	3b02      	subs	r3, #2
 800ab2c:	b29a      	uxth	r2, r3
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ab32:	e012      	b.n	800ab5a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	330c      	adds	r3, #12
 800ab3e:	7812      	ldrb	r2, [r2, #0]
 800ab40:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab46:	1c5a      	adds	r2, r3, #1
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	3b01      	subs	r3, #1
 800ab54:	b29a      	uxth	r2, r3
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d110      	bne.n	800ab86 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	685a      	ldr	r2, [r3, #4]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab72:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d102      	bne.n	800ab86 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 fab7 	bl	800b0f4 <SPI_CloseRxTx_ISR>
    }
  }
}
 800ab86:	bf00      	nop
 800ab88:	3708      	adds	r7, #8
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}

0800ab8e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ab8e:	b580      	push	{r7, lr}
 800ab90:	b082      	sub	sp, #8
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	68da      	ldr	r2, [r3, #12]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba0:	b292      	uxth	r2, r2
 800aba2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba8:	1c9a      	adds	r2, r3, #2
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	3b01      	subs	r3, #1
 800abb8:	b29a      	uxth	r2, r3
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d10f      	bne.n	800abec <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	685a      	ldr	r2, [r3, #4]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abda:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d102      	bne.n	800abec <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 fa84 	bl	800b0f4 <SPI_CloseRxTx_ISR>
    }
  }
}
 800abec:	bf00      	nop
 800abee:	3708      	adds	r7, #8
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac00:	881a      	ldrh	r2, [r3, #0]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac0c:	1c9a      	adds	r2, r3, #2
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	3b01      	subs	r3, #1
 800ac1a:	b29a      	uxth	r2, r3
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d110      	bne.n	800ac4c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	685a      	ldr	r2, [r3, #4]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac38:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d102      	bne.n	800ac4c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 fa54 	bl	800b0f4 <SPI_CloseRxTx_ISR>
    }
  }
}
 800ac4c:	bf00      	nop
 800ac4e:	3708      	adds	r7, #8
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f103 020c 	add.w	r2, r3, #12
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac68:	7812      	ldrb	r2, [r2, #0]
 800ac6a:	b2d2      	uxtb	r2, r2
 800ac6c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac72:	1c5a      	adds	r2, r3, #1
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	3b01      	subs	r3, #1
 800ac82:	b29a      	uxth	r2, r3
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ac90:	b29b      	uxth	r3, r3
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d102      	bne.n	800ac9c <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 fa6e 	bl	800b178 <SPI_CloseRx_ISR>
  }
}
 800ac9c:	bf00      	nop
 800ac9e:	3708      	adds	r7, #8
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68da      	ldr	r2, [r3, #12]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb6:	b292      	uxth	r2, r2
 800acb8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acbe:	1c9a      	adds	r2, r3, #2
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800acca:	b29b      	uxth	r3, r3
 800accc:	3b01      	subs	r3, #1
 800acce:	b29a      	uxth	r2, r3
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800acdc:	b29b      	uxth	r3, r3
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d102      	bne.n	800ace8 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 fa48 	bl	800b178 <SPI_CloseRx_ISR>
  }
}
 800ace8:	bf00      	nop
 800acea:	3708      	adds	r7, #8
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	330c      	adds	r3, #12
 800ad02:	7812      	ldrb	r2, [r2, #0]
 800ad04:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad0a:	1c5a      	adds	r2, r3, #1
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	3b01      	subs	r3, #1
 800ad18:	b29a      	uxth	r2, r3
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d102      	bne.n	800ad2e <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f000 fa55 	bl	800b1d8 <SPI_CloseTx_ISR>
  }
}
 800ad2e:	bf00      	nop
 800ad30:	3708      	adds	r7, #8
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b082      	sub	sp, #8
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad42:	881a      	ldrh	r2, [r3, #0]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad4e:	1c9a      	adds	r2, r3, #2
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	3b01      	subs	r3, #1
 800ad5c:	b29a      	uxth	r2, r3
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad66:	b29b      	uxth	r3, r3
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d102      	bne.n	800ad72 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 fa33 	bl	800b1d8 <SPI_CloseTx_ISR>
  }
}
 800ad72:	bf00      	nop
 800ad74:	3708      	adds	r7, #8
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
	...

0800ad7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b088      	sub	sp, #32
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	603b      	str	r3, [r7, #0]
 800ad88:	4613      	mov	r3, r2
 800ad8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ad8c:	f7fb fdf6 	bl	800697c <HAL_GetTick>
 800ad90:	4602      	mov	r2, r0
 800ad92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad94:	1a9b      	subs	r3, r3, r2
 800ad96:	683a      	ldr	r2, [r7, #0]
 800ad98:	4413      	add	r3, r2
 800ad9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ad9c:	f7fb fdee 	bl	800697c <HAL_GetTick>
 800ada0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ada2:	4b39      	ldr	r3, [pc, #228]	; (800ae88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	015b      	lsls	r3, r3, #5
 800ada8:	0d1b      	lsrs	r3, r3, #20
 800adaa:	69fa      	ldr	r2, [r7, #28]
 800adac:	fb02 f303 	mul.w	r3, r2, r3
 800adb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800adb2:	e054      	b.n	800ae5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adba:	d050      	beq.n	800ae5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800adbc:	f7fb fdde 	bl	800697c <HAL_GetTick>
 800adc0:	4602      	mov	r2, r0
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	1ad3      	subs	r3, r2, r3
 800adc6:	69fa      	ldr	r2, [r7, #28]
 800adc8:	429a      	cmp	r2, r3
 800adca:	d902      	bls.n	800add2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d13d      	bne.n	800ae4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	685a      	ldr	r2, [r3, #4]
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ade0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800adea:	d111      	bne.n	800ae10 <SPI_WaitFlagStateUntilTimeout+0x94>
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adf4:	d004      	beq.n	800ae00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adfe:	d107      	bne.n	800ae10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae18:	d10f      	bne.n	800ae3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ae28:	601a      	str	r2, [r3, #0]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ae38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2200      	movs	r2, #0
 800ae46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ae4a:	2303      	movs	r3, #3
 800ae4c:	e017      	b.n	800ae7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d101      	bne.n	800ae58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ae54:	2300      	movs	r3, #0
 800ae56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	3b01      	subs	r3, #1
 800ae5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	689a      	ldr	r2, [r3, #8]
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	4013      	ands	r3, r2
 800ae68:	68ba      	ldr	r2, [r7, #8]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	bf0c      	ite	eq
 800ae6e:	2301      	moveq	r3, #1
 800ae70:	2300      	movne	r3, #0
 800ae72:	b2db      	uxtb	r3, r3
 800ae74:	461a      	mov	r2, r3
 800ae76:	79fb      	ldrb	r3, [r7, #7]
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	d19b      	bne.n	800adb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ae7c:	2300      	movs	r3, #0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3720      	adds	r7, #32
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	2000000c 	.word	0x2000000c

0800ae8c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b08a      	sub	sp, #40	; 0x28
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	607a      	str	r2, [r7, #4]
 800ae98:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ae9e:	f7fb fd6d 	bl	800697c <HAL_GetTick>
 800aea2:	4602      	mov	r2, r0
 800aea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea6:	1a9b      	subs	r3, r3, r2
 800aea8:	683a      	ldr	r2, [r7, #0]
 800aeaa:	4413      	add	r3, r2
 800aeac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800aeae:	f7fb fd65 	bl	800697c <HAL_GetTick>
 800aeb2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	330c      	adds	r3, #12
 800aeba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800aebc:	4b3d      	ldr	r3, [pc, #244]	; (800afb4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800aebe:	681a      	ldr	r2, [r3, #0]
 800aec0:	4613      	mov	r3, r2
 800aec2:	009b      	lsls	r3, r3, #2
 800aec4:	4413      	add	r3, r2
 800aec6:	00da      	lsls	r2, r3, #3
 800aec8:	1ad3      	subs	r3, r2, r3
 800aeca:	0d1b      	lsrs	r3, r3, #20
 800aecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aece:	fb02 f303 	mul.w	r3, r2, r3
 800aed2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800aed4:	e060      	b.n	800af98 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800aedc:	d107      	bne.n	800aeee <SPI_WaitFifoStateUntilTimeout+0x62>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d104      	bne.n	800aeee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800aeec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aef4:	d050      	beq.n	800af98 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800aef6:	f7fb fd41 	bl	800697c <HAL_GetTick>
 800aefa:	4602      	mov	r2, r0
 800aefc:	6a3b      	ldr	r3, [r7, #32]
 800aefe:	1ad3      	subs	r3, r2, r3
 800af00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af02:	429a      	cmp	r2, r3
 800af04:	d902      	bls.n	800af0c <SPI_WaitFifoStateUntilTimeout+0x80>
 800af06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d13d      	bne.n	800af88 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	685a      	ldr	r2, [r3, #4]
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800af1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800af24:	d111      	bne.n	800af4a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	689b      	ldr	r3, [r3, #8]
 800af2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af2e:	d004      	beq.n	800af3a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af38:	d107      	bne.n	800af4a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	681a      	ldr	r2, [r3, #0]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af48:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af52:	d10f      	bne.n	800af74 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	681a      	ldr	r2, [r3, #0]
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af62:	601a      	str	r2, [r3, #0]
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af72:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2201      	movs	r2, #1
 800af78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2200      	movs	r2, #0
 800af80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800af84:	2303      	movs	r3, #3
 800af86:	e010      	b.n	800afaa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800af88:	69bb      	ldr	r3, [r7, #24]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d101      	bne.n	800af92 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800af8e:	2300      	movs	r3, #0
 800af90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800af92:	69bb      	ldr	r3, [r7, #24]
 800af94:	3b01      	subs	r3, #1
 800af96:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	689a      	ldr	r2, [r3, #8]
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	4013      	ands	r3, r2
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d196      	bne.n	800aed6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800afa8:	2300      	movs	r3, #0
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3728      	adds	r7, #40	; 0x28
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	2000000c 	.word	0x2000000c

0800afb8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b086      	sub	sp, #24
 800afbc:	af02      	add	r7, sp, #8
 800afbe:	60f8      	str	r0, [r7, #12]
 800afc0:	60b9      	str	r1, [r7, #8]
 800afc2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800afcc:	d111      	bne.n	800aff2 <SPI_EndRxTransaction+0x3a>
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	689b      	ldr	r3, [r3, #8]
 800afd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afd6:	d004      	beq.n	800afe2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	689b      	ldr	r3, [r3, #8]
 800afdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afe0:	d107      	bne.n	800aff2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	681a      	ldr	r2, [r3, #0]
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aff0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	9300      	str	r3, [sp, #0]
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	2200      	movs	r2, #0
 800affa:	2180      	movs	r1, #128	; 0x80
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f7ff febd 	bl	800ad7c <SPI_WaitFlagStateUntilTimeout>
 800b002:	4603      	mov	r3, r0
 800b004:	2b00      	cmp	r3, #0
 800b006:	d007      	beq.n	800b018 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b00c:	f043 0220 	orr.w	r2, r3, #32
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b014:	2303      	movs	r3, #3
 800b016:	e023      	b.n	800b060 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b020:	d11d      	bne.n	800b05e <SPI_EndRxTransaction+0xa6>
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b02a:	d004      	beq.n	800b036 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	689b      	ldr	r3, [r3, #8]
 800b030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b034:	d113      	bne.n	800b05e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	9300      	str	r3, [sp, #0]
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	2200      	movs	r2, #0
 800b03e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b042:	68f8      	ldr	r0, [r7, #12]
 800b044:	f7ff ff22 	bl	800ae8c <SPI_WaitFifoStateUntilTimeout>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d007      	beq.n	800b05e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b052:	f043 0220 	orr.w	r2, r3, #32
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800b05a:	2303      	movs	r3, #3
 800b05c:	e000      	b.n	800b060 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800b05e:	2300      	movs	r3, #0
}
 800b060:	4618      	mov	r0, r3
 800b062:	3710      	adds	r7, #16
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b086      	sub	sp, #24
 800b06c:	af02      	add	r7, sp, #8
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	9300      	str	r3, [sp, #0]
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	2200      	movs	r2, #0
 800b07c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b080:	68f8      	ldr	r0, [r7, #12]
 800b082:	f7ff ff03 	bl	800ae8c <SPI_WaitFifoStateUntilTimeout>
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d007      	beq.n	800b09c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b090:	f043 0220 	orr.w	r2, r3, #32
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b098:	2303      	movs	r3, #3
 800b09a:	e027      	b.n	800b0ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	9300      	str	r3, [sp, #0]
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	2180      	movs	r1, #128	; 0x80
 800b0a6:	68f8      	ldr	r0, [r7, #12]
 800b0a8:	f7ff fe68 	bl	800ad7c <SPI_WaitFlagStateUntilTimeout>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d007      	beq.n	800b0c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0b6:	f043 0220 	orr.w	r2, r3, #32
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b0be:	2303      	movs	r3, #3
 800b0c0:	e014      	b.n	800b0ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	9300      	str	r3, [sp, #0]
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b0ce:	68f8      	ldr	r0, [r7, #12]
 800b0d0:	f7ff fedc 	bl	800ae8c <SPI_WaitFifoStateUntilTimeout>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d007      	beq.n	800b0ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0de:	f043 0220 	orr.w	r2, r3, #32
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b0e6:	2303      	movs	r3, #3
 800b0e8:	e000      	b.n	800b0ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b0ea:	2300      	movs	r3, #0
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3710      	adds	r7, #16
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b0fc:	f7fb fc3e 	bl	800697c <HAL_GetTick>
 800b100:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	685a      	ldr	r2, [r3, #4]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f022 0220 	bic.w	r2, r2, #32
 800b110:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b112:	68fa      	ldr	r2, [r7, #12]
 800b114:	2164      	movs	r1, #100	; 0x64
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f7ff ffa6 	bl	800b068 <SPI_EndRxTxTransaction>
 800b11c:	4603      	mov	r3, r0
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d005      	beq.n	800b12e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b126:	f043 0220 	orr.w	r2, r3, #32
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b132:	2b00      	cmp	r3, #0
 800b134:	d115      	bne.n	800b162 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	2b04      	cmp	r3, #4
 800b140:	d107      	bne.n	800b152 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2201      	movs	r2, #1
 800b146:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f7f9 f866 	bl	800421c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800b150:	e00e      	b.n	800b170 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2201      	movs	r2, #1
 800b156:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f7ff fc46 	bl	800a9ec <HAL_SPI_TxRxCpltCallback>
}
 800b160:	e006      	b.n	800b170 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2201      	movs	r2, #1
 800b166:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f7ff fc48 	bl	800aa00 <HAL_SPI_ErrorCallback>
}
 800b170:	bf00      	nop
 800b172:	3710      	adds	r7, #16
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	685a      	ldr	r2, [r3, #4]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b18e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800b190:	f7fb fbf4 	bl	800697c <HAL_GetTick>
 800b194:	4603      	mov	r3, r0
 800b196:	461a      	mov	r2, r3
 800b198:	2164      	movs	r1, #100	; 0x64
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f7ff ff0c 	bl	800afb8 <SPI_EndRxTransaction>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d005      	beq.n	800b1b2 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1aa:	f043 0220 	orr.w	r2, r3, #32
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2201      	movs	r2, #1
 800b1b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d103      	bne.n	800b1ca <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f7f9 f82a 	bl	800421c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800b1c8:	e002      	b.n	800b1d0 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f7ff fc18 	bl	800aa00 <HAL_SPI_ErrorCallback>
}
 800b1d0:	bf00      	nop
 800b1d2:	3708      	adds	r7, #8
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b1e0:	f7fb fbcc 	bl	800697c <HAL_GetTick>
 800b1e4:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	685a      	ldr	r2, [r3, #4]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b1f4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b1f6:	68fa      	ldr	r2, [r7, #12]
 800b1f8:	2164      	movs	r1, #100	; 0x64
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f7ff ff34 	bl	800b068 <SPI_EndRxTxTransaction>
 800b200:	4603      	mov	r3, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	d005      	beq.n	800b212 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b20a:	f043 0220 	orr.w	r2, r3, #32
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	689b      	ldr	r3, [r3, #8]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d10a      	bne.n	800b230 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b21a:	2300      	movs	r3, #0
 800b21c:	60bb      	str	r3, [r7, #8]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	60bb      	str	r3, [r7, #8]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	689b      	ldr	r3, [r3, #8]
 800b22c:	60bb      	str	r3, [r7, #8]
 800b22e:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2201      	movs	r2, #1
 800b234:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d003      	beq.n	800b248 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f7ff fbdd 	bl	800aa00 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800b246:	e002      	b.n	800b24e <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f7f8 fffb 	bl	8004244 <HAL_SPI_TxCpltCallback>
}
 800b24e:	bf00      	nop
 800b250:	3710      	adds	r7, #16
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}

0800b256 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b256:	b580      	push	{r7, lr}
 800b258:	b082      	sub	sp, #8
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d101      	bne.n	800b268 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b264:	2301      	movs	r3, #1
 800b266:	e049      	b.n	800b2fc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	2b00      	cmp	r3, #0
 800b272:	d106      	bne.n	800b282 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f7f9 fead 	bl	8004fdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2202      	movs	r2, #2
 800b286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	3304      	adds	r3, #4
 800b292:	4619      	mov	r1, r3
 800b294:	4610      	mov	r0, r2
 800b296:	f000 fabf 	bl	800b818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2201      	movs	r2, #1
 800b29e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2201      	movs	r2, #1
 800b2be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2201      	movs	r2, #1
 800b2de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b2fa:	2300      	movs	r3, #0
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3708      	adds	r7, #8
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b304:	b480      	push	{r7}
 800b306:	b085      	sub	sp, #20
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b312:	b2db      	uxtb	r3, r3
 800b314:	2b01      	cmp	r3, #1
 800b316:	d001      	beq.n	800b31c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b318:	2301      	movs	r3, #1
 800b31a:	e04f      	b.n	800b3bc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2202      	movs	r2, #2
 800b320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	68da      	ldr	r2, [r3, #12]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f042 0201 	orr.w	r2, r2, #1
 800b332:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4a23      	ldr	r2, [pc, #140]	; (800b3c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d01d      	beq.n	800b37a <HAL_TIM_Base_Start_IT+0x76>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b346:	d018      	beq.n	800b37a <HAL_TIM_Base_Start_IT+0x76>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a1f      	ldr	r2, [pc, #124]	; (800b3cc <HAL_TIM_Base_Start_IT+0xc8>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d013      	beq.n	800b37a <HAL_TIM_Base_Start_IT+0x76>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4a1e      	ldr	r2, [pc, #120]	; (800b3d0 <HAL_TIM_Base_Start_IT+0xcc>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d00e      	beq.n	800b37a <HAL_TIM_Base_Start_IT+0x76>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	4a1c      	ldr	r2, [pc, #112]	; (800b3d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d009      	beq.n	800b37a <HAL_TIM_Base_Start_IT+0x76>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4a1b      	ldr	r2, [pc, #108]	; (800b3d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d004      	beq.n	800b37a <HAL_TIM_Base_Start_IT+0x76>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a19      	ldr	r2, [pc, #100]	; (800b3dc <HAL_TIM_Base_Start_IT+0xd8>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d115      	bne.n	800b3a6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	689a      	ldr	r2, [r3, #8]
 800b380:	4b17      	ldr	r3, [pc, #92]	; (800b3e0 <HAL_TIM_Base_Start_IT+0xdc>)
 800b382:	4013      	ands	r3, r2
 800b384:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2b06      	cmp	r3, #6
 800b38a:	d015      	beq.n	800b3b8 <HAL_TIM_Base_Start_IT+0xb4>
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b392:	d011      	beq.n	800b3b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f042 0201 	orr.w	r2, r2, #1
 800b3a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3a4:	e008      	b.n	800b3b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f042 0201 	orr.w	r2, r2, #1
 800b3b4:	601a      	str	r2, [r3, #0]
 800b3b6:	e000      	b.n	800b3ba <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b3ba:	2300      	movs	r3, #0
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3714      	adds	r7, #20
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr
 800b3c8:	40012c00 	.word	0x40012c00
 800b3cc:	40000400 	.word	0x40000400
 800b3d0:	40000800 	.word	0x40000800
 800b3d4:	40000c00 	.word	0x40000c00
 800b3d8:	40013400 	.word	0x40013400
 800b3dc:	40014000 	.word	0x40014000
 800b3e0:	00010007 	.word	0x00010007

0800b3e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b082      	sub	sp, #8
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	691b      	ldr	r3, [r3, #16]
 800b3f2:	f003 0302 	and.w	r3, r3, #2
 800b3f6:	2b02      	cmp	r3, #2
 800b3f8:	d122      	bne.n	800b440 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	68db      	ldr	r3, [r3, #12]
 800b400:	f003 0302 	and.w	r3, r3, #2
 800b404:	2b02      	cmp	r3, #2
 800b406:	d11b      	bne.n	800b440 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f06f 0202 	mvn.w	r2, #2
 800b410:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2201      	movs	r2, #1
 800b416:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	699b      	ldr	r3, [r3, #24]
 800b41e:	f003 0303 	and.w	r3, r3, #3
 800b422:	2b00      	cmp	r3, #0
 800b424:	d003      	beq.n	800b42e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 f9d8 	bl	800b7dc <HAL_TIM_IC_CaptureCallback>
 800b42c:	e005      	b.n	800b43a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 f9ca 	bl	800b7c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f000 f9db 	bl	800b7f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2200      	movs	r2, #0
 800b43e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	691b      	ldr	r3, [r3, #16]
 800b446:	f003 0304 	and.w	r3, r3, #4
 800b44a:	2b04      	cmp	r3, #4
 800b44c:	d122      	bne.n	800b494 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	68db      	ldr	r3, [r3, #12]
 800b454:	f003 0304 	and.w	r3, r3, #4
 800b458:	2b04      	cmp	r3, #4
 800b45a:	d11b      	bne.n	800b494 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f06f 0204 	mvn.w	r2, #4
 800b464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2202      	movs	r2, #2
 800b46a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	699b      	ldr	r3, [r3, #24]
 800b472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b476:	2b00      	cmp	r3, #0
 800b478:	d003      	beq.n	800b482 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 f9ae 	bl	800b7dc <HAL_TIM_IC_CaptureCallback>
 800b480:	e005      	b.n	800b48e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 f9a0 	bl	800b7c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f000 f9b1 	bl	800b7f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2200      	movs	r2, #0
 800b492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	691b      	ldr	r3, [r3, #16]
 800b49a:	f003 0308 	and.w	r3, r3, #8
 800b49e:	2b08      	cmp	r3, #8
 800b4a0:	d122      	bne.n	800b4e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	68db      	ldr	r3, [r3, #12]
 800b4a8:	f003 0308 	and.w	r3, r3, #8
 800b4ac:	2b08      	cmp	r3, #8
 800b4ae:	d11b      	bne.n	800b4e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f06f 0208 	mvn.w	r2, #8
 800b4b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2204      	movs	r2, #4
 800b4be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	69db      	ldr	r3, [r3, #28]
 800b4c6:	f003 0303 	and.w	r3, r3, #3
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d003      	beq.n	800b4d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 f984 	bl	800b7dc <HAL_TIM_IC_CaptureCallback>
 800b4d4:	e005      	b.n	800b4e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 f976 	bl	800b7c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 f987 	bl	800b7f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	691b      	ldr	r3, [r3, #16]
 800b4ee:	f003 0310 	and.w	r3, r3, #16
 800b4f2:	2b10      	cmp	r3, #16
 800b4f4:	d122      	bne.n	800b53c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	68db      	ldr	r3, [r3, #12]
 800b4fc:	f003 0310 	and.w	r3, r3, #16
 800b500:	2b10      	cmp	r3, #16
 800b502:	d11b      	bne.n	800b53c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f06f 0210 	mvn.w	r2, #16
 800b50c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2208      	movs	r2, #8
 800b512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	69db      	ldr	r3, [r3, #28]
 800b51a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d003      	beq.n	800b52a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 f95a 	bl	800b7dc <HAL_TIM_IC_CaptureCallback>
 800b528:	e005      	b.n	800b536 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f000 f94c 	bl	800b7c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 f95d 	bl	800b7f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	691b      	ldr	r3, [r3, #16]
 800b542:	f003 0301 	and.w	r3, r3, #1
 800b546:	2b01      	cmp	r3, #1
 800b548:	d10e      	bne.n	800b568 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	f003 0301 	and.w	r3, r3, #1
 800b554:	2b01      	cmp	r3, #1
 800b556:	d107      	bne.n	800b568 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f06f 0201 	mvn.w	r2, #1
 800b560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 f926 	bl	800b7b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	691b      	ldr	r3, [r3, #16]
 800b56e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b572:	2b80      	cmp	r3, #128	; 0x80
 800b574:	d10e      	bne.n	800b594 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	68db      	ldr	r3, [r3, #12]
 800b57c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b580:	2b80      	cmp	r3, #128	; 0x80
 800b582:	d107      	bne.n	800b594 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b58c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f000 fb08 	bl	800bba4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	691b      	ldr	r3, [r3, #16]
 800b59a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b59e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5a2:	d10e      	bne.n	800b5c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5ae:	2b80      	cmp	r3, #128	; 0x80
 800b5b0:	d107      	bne.n	800b5c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b5ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 fafb 	bl	800bbb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	691b      	ldr	r3, [r3, #16]
 800b5c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5cc:	2b40      	cmp	r3, #64	; 0x40
 800b5ce:	d10e      	bne.n	800b5ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	68db      	ldr	r3, [r3, #12]
 800b5d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5da:	2b40      	cmp	r3, #64	; 0x40
 800b5dc:	d107      	bne.n	800b5ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b5e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 f90b 	bl	800b804 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	691b      	ldr	r3, [r3, #16]
 800b5f4:	f003 0320 	and.w	r3, r3, #32
 800b5f8:	2b20      	cmp	r3, #32
 800b5fa:	d10e      	bne.n	800b61a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	68db      	ldr	r3, [r3, #12]
 800b602:	f003 0320 	and.w	r3, r3, #32
 800b606:	2b20      	cmp	r3, #32
 800b608:	d107      	bne.n	800b61a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f06f 0220 	mvn.w	r2, #32
 800b612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 fabb 	bl	800bb90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b61a:	bf00      	nop
 800b61c:	3708      	adds	r7, #8
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b084      	sub	sp, #16
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
 800b62a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b62c:	2300      	movs	r3, #0
 800b62e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b636:	2b01      	cmp	r3, #1
 800b638:	d101      	bne.n	800b63e <HAL_TIM_ConfigClockSource+0x1c>
 800b63a:	2302      	movs	r3, #2
 800b63c:	e0b6      	b.n	800b7ac <HAL_TIM_ConfigClockSource+0x18a>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2201      	movs	r2, #1
 800b642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2202      	movs	r2, #2
 800b64a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	689b      	ldr	r3, [r3, #8]
 800b654:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b65c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b660:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b668:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	68ba      	ldr	r2, [r7, #8]
 800b670:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b67a:	d03e      	beq.n	800b6fa <HAL_TIM_ConfigClockSource+0xd8>
 800b67c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b680:	f200 8087 	bhi.w	800b792 <HAL_TIM_ConfigClockSource+0x170>
 800b684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b688:	f000 8086 	beq.w	800b798 <HAL_TIM_ConfigClockSource+0x176>
 800b68c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b690:	d87f      	bhi.n	800b792 <HAL_TIM_ConfigClockSource+0x170>
 800b692:	2b70      	cmp	r3, #112	; 0x70
 800b694:	d01a      	beq.n	800b6cc <HAL_TIM_ConfigClockSource+0xaa>
 800b696:	2b70      	cmp	r3, #112	; 0x70
 800b698:	d87b      	bhi.n	800b792 <HAL_TIM_ConfigClockSource+0x170>
 800b69a:	2b60      	cmp	r3, #96	; 0x60
 800b69c:	d050      	beq.n	800b740 <HAL_TIM_ConfigClockSource+0x11e>
 800b69e:	2b60      	cmp	r3, #96	; 0x60
 800b6a0:	d877      	bhi.n	800b792 <HAL_TIM_ConfigClockSource+0x170>
 800b6a2:	2b50      	cmp	r3, #80	; 0x50
 800b6a4:	d03c      	beq.n	800b720 <HAL_TIM_ConfigClockSource+0xfe>
 800b6a6:	2b50      	cmp	r3, #80	; 0x50
 800b6a8:	d873      	bhi.n	800b792 <HAL_TIM_ConfigClockSource+0x170>
 800b6aa:	2b40      	cmp	r3, #64	; 0x40
 800b6ac:	d058      	beq.n	800b760 <HAL_TIM_ConfigClockSource+0x13e>
 800b6ae:	2b40      	cmp	r3, #64	; 0x40
 800b6b0:	d86f      	bhi.n	800b792 <HAL_TIM_ConfigClockSource+0x170>
 800b6b2:	2b30      	cmp	r3, #48	; 0x30
 800b6b4:	d064      	beq.n	800b780 <HAL_TIM_ConfigClockSource+0x15e>
 800b6b6:	2b30      	cmp	r3, #48	; 0x30
 800b6b8:	d86b      	bhi.n	800b792 <HAL_TIM_ConfigClockSource+0x170>
 800b6ba:	2b20      	cmp	r3, #32
 800b6bc:	d060      	beq.n	800b780 <HAL_TIM_ConfigClockSource+0x15e>
 800b6be:	2b20      	cmp	r3, #32
 800b6c0:	d867      	bhi.n	800b792 <HAL_TIM_ConfigClockSource+0x170>
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d05c      	beq.n	800b780 <HAL_TIM_ConfigClockSource+0x15e>
 800b6c6:	2b10      	cmp	r3, #16
 800b6c8:	d05a      	beq.n	800b780 <HAL_TIM_ConfigClockSource+0x15e>
 800b6ca:	e062      	b.n	800b792 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6818      	ldr	r0, [r3, #0]
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	6899      	ldr	r1, [r3, #8]
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	685a      	ldr	r2, [r3, #4]
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	f000 f9b0 	bl	800ba40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	689b      	ldr	r3, [r3, #8]
 800b6e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b6ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	68ba      	ldr	r2, [r7, #8]
 800b6f6:	609a      	str	r2, [r3, #8]
      break;
 800b6f8:	e04f      	b.n	800b79a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6818      	ldr	r0, [r3, #0]
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	6899      	ldr	r1, [r3, #8]
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	685a      	ldr	r2, [r3, #4]
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	f000 f999 	bl	800ba40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	689a      	ldr	r2, [r3, #8]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b71c:	609a      	str	r2, [r3, #8]
      break;
 800b71e:	e03c      	b.n	800b79a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6818      	ldr	r0, [r3, #0]
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	6859      	ldr	r1, [r3, #4]
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	68db      	ldr	r3, [r3, #12]
 800b72c:	461a      	mov	r2, r3
 800b72e:	f000 f90d 	bl	800b94c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2150      	movs	r1, #80	; 0x50
 800b738:	4618      	mov	r0, r3
 800b73a:	f000 f966 	bl	800ba0a <TIM_ITRx_SetConfig>
      break;
 800b73e:	e02c      	b.n	800b79a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6818      	ldr	r0, [r3, #0]
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	6859      	ldr	r1, [r3, #4]
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	68db      	ldr	r3, [r3, #12]
 800b74c:	461a      	mov	r2, r3
 800b74e:	f000 f92c 	bl	800b9aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	2160      	movs	r1, #96	; 0x60
 800b758:	4618      	mov	r0, r3
 800b75a:	f000 f956 	bl	800ba0a <TIM_ITRx_SetConfig>
      break;
 800b75e:	e01c      	b.n	800b79a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6818      	ldr	r0, [r3, #0]
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	6859      	ldr	r1, [r3, #4]
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	68db      	ldr	r3, [r3, #12]
 800b76c:	461a      	mov	r2, r3
 800b76e:	f000 f8ed 	bl	800b94c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	2140      	movs	r1, #64	; 0x40
 800b778:	4618      	mov	r0, r3
 800b77a:	f000 f946 	bl	800ba0a <TIM_ITRx_SetConfig>
      break;
 800b77e:	e00c      	b.n	800b79a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4619      	mov	r1, r3
 800b78a:	4610      	mov	r0, r2
 800b78c:	f000 f93d 	bl	800ba0a <TIM_ITRx_SetConfig>
      break;
 800b790:	e003      	b.n	800b79a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800b792:	2301      	movs	r3, #1
 800b794:	73fb      	strb	r3, [r7, #15]
      break;
 800b796:	e000      	b.n	800b79a <HAL_TIM_ConfigClockSource+0x178>
      break;
 800b798:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2201      	movs	r2, #1
 800b79e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b7aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3710      	adds	r7, #16
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b083      	sub	sp, #12
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b7bc:	bf00      	nop
 800b7be:	370c      	adds	r7, #12
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr

0800b7c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b083      	sub	sp, #12
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b7d0:	bf00      	nop
 800b7d2:	370c      	adds	r7, #12
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr

0800b7dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b083      	sub	sp, #12
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b7e4:	bf00      	nop
 800b7e6:	370c      	adds	r7, #12
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr

0800b7f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b083      	sub	sp, #12
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b7f8:	bf00      	nop
 800b7fa:	370c      	adds	r7, #12
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr

0800b804 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b804:	b480      	push	{r7}
 800b806:	b083      	sub	sp, #12
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b80c:	bf00      	nop
 800b80e:	370c      	adds	r7, #12
 800b810:	46bd      	mov	sp, r7
 800b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b816:	4770      	bx	lr

0800b818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b818:	b480      	push	{r7}
 800b81a:	b085      	sub	sp, #20
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	4a40      	ldr	r2, [pc, #256]	; (800b92c <TIM_Base_SetConfig+0x114>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d013      	beq.n	800b858 <TIM_Base_SetConfig+0x40>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b836:	d00f      	beq.n	800b858 <TIM_Base_SetConfig+0x40>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	4a3d      	ldr	r2, [pc, #244]	; (800b930 <TIM_Base_SetConfig+0x118>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d00b      	beq.n	800b858 <TIM_Base_SetConfig+0x40>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	4a3c      	ldr	r2, [pc, #240]	; (800b934 <TIM_Base_SetConfig+0x11c>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d007      	beq.n	800b858 <TIM_Base_SetConfig+0x40>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	4a3b      	ldr	r2, [pc, #236]	; (800b938 <TIM_Base_SetConfig+0x120>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d003      	beq.n	800b858 <TIM_Base_SetConfig+0x40>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	4a3a      	ldr	r2, [pc, #232]	; (800b93c <TIM_Base_SetConfig+0x124>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d108      	bne.n	800b86a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b85e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	4313      	orrs	r3, r2
 800b868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	4a2f      	ldr	r2, [pc, #188]	; (800b92c <TIM_Base_SetConfig+0x114>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d01f      	beq.n	800b8b2 <TIM_Base_SetConfig+0x9a>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b878:	d01b      	beq.n	800b8b2 <TIM_Base_SetConfig+0x9a>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	4a2c      	ldr	r2, [pc, #176]	; (800b930 <TIM_Base_SetConfig+0x118>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d017      	beq.n	800b8b2 <TIM_Base_SetConfig+0x9a>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	4a2b      	ldr	r2, [pc, #172]	; (800b934 <TIM_Base_SetConfig+0x11c>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d013      	beq.n	800b8b2 <TIM_Base_SetConfig+0x9a>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	4a2a      	ldr	r2, [pc, #168]	; (800b938 <TIM_Base_SetConfig+0x120>)
 800b88e:	4293      	cmp	r3, r2
 800b890:	d00f      	beq.n	800b8b2 <TIM_Base_SetConfig+0x9a>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	4a29      	ldr	r2, [pc, #164]	; (800b93c <TIM_Base_SetConfig+0x124>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d00b      	beq.n	800b8b2 <TIM_Base_SetConfig+0x9a>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	4a28      	ldr	r2, [pc, #160]	; (800b940 <TIM_Base_SetConfig+0x128>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d007      	beq.n	800b8b2 <TIM_Base_SetConfig+0x9a>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	4a27      	ldr	r2, [pc, #156]	; (800b944 <TIM_Base_SetConfig+0x12c>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d003      	beq.n	800b8b2 <TIM_Base_SetConfig+0x9a>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	4a26      	ldr	r2, [pc, #152]	; (800b948 <TIM_Base_SetConfig+0x130>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d108      	bne.n	800b8c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	68db      	ldr	r3, [r3, #12]
 800b8be:	68fa      	ldr	r2, [r7, #12]
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	695b      	ldr	r3, [r3, #20]
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	68fa      	ldr	r2, [r7, #12]
 800b8d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	689a      	ldr	r2, [r3, #8]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	681a      	ldr	r2, [r3, #0]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4a10      	ldr	r2, [pc, #64]	; (800b92c <TIM_Base_SetConfig+0x114>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d00f      	beq.n	800b910 <TIM_Base_SetConfig+0xf8>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	4a12      	ldr	r2, [pc, #72]	; (800b93c <TIM_Base_SetConfig+0x124>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d00b      	beq.n	800b910 <TIM_Base_SetConfig+0xf8>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4a11      	ldr	r2, [pc, #68]	; (800b940 <TIM_Base_SetConfig+0x128>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d007      	beq.n	800b910 <TIM_Base_SetConfig+0xf8>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	4a10      	ldr	r2, [pc, #64]	; (800b944 <TIM_Base_SetConfig+0x12c>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d003      	beq.n	800b910 <TIM_Base_SetConfig+0xf8>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	4a0f      	ldr	r2, [pc, #60]	; (800b948 <TIM_Base_SetConfig+0x130>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d103      	bne.n	800b918 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	691a      	ldr	r2, [r3, #16]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2201      	movs	r2, #1
 800b91c:	615a      	str	r2, [r3, #20]
}
 800b91e:	bf00      	nop
 800b920:	3714      	adds	r7, #20
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr
 800b92a:	bf00      	nop
 800b92c:	40012c00 	.word	0x40012c00
 800b930:	40000400 	.word	0x40000400
 800b934:	40000800 	.word	0x40000800
 800b938:	40000c00 	.word	0x40000c00
 800b93c:	40013400 	.word	0x40013400
 800b940:	40014000 	.word	0x40014000
 800b944:	40014400 	.word	0x40014400
 800b948:	40014800 	.word	0x40014800

0800b94c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b087      	sub	sp, #28
 800b950:	af00      	add	r7, sp, #0
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	6a1b      	ldr	r3, [r3, #32]
 800b95c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	6a1b      	ldr	r3, [r3, #32]
 800b962:	f023 0201 	bic.w	r2, r3, #1
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	699b      	ldr	r3, [r3, #24]
 800b96e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	011b      	lsls	r3, r3, #4
 800b97c:	693a      	ldr	r2, [r7, #16]
 800b97e:	4313      	orrs	r3, r2
 800b980:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	f023 030a 	bic.w	r3, r3, #10
 800b988:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b98a:	697a      	ldr	r2, [r7, #20]
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	4313      	orrs	r3, r2
 800b990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	693a      	ldr	r2, [r7, #16]
 800b996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	697a      	ldr	r2, [r7, #20]
 800b99c:	621a      	str	r2, [r3, #32]
}
 800b99e:	bf00      	nop
 800b9a0:	371c      	adds	r7, #28
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr

0800b9aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b9aa:	b480      	push	{r7}
 800b9ac:	b087      	sub	sp, #28
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	60f8      	str	r0, [r7, #12]
 800b9b2:	60b9      	str	r1, [r7, #8]
 800b9b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	6a1b      	ldr	r3, [r3, #32]
 800b9ba:	f023 0210 	bic.w	r2, r3, #16
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	699b      	ldr	r3, [r3, #24]
 800b9c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	6a1b      	ldr	r3, [r3, #32]
 800b9cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b9d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	031b      	lsls	r3, r3, #12
 800b9da:	697a      	ldr	r2, [r7, #20]
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b9e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	011b      	lsls	r3, r3, #4
 800b9ec:	693a      	ldr	r2, [r7, #16]
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	697a      	ldr	r2, [r7, #20]
 800b9f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	693a      	ldr	r2, [r7, #16]
 800b9fc:	621a      	str	r2, [r3, #32]
}
 800b9fe:	bf00      	nop
 800ba00:	371c      	adds	r7, #28
 800ba02:	46bd      	mov	sp, r7
 800ba04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba08:	4770      	bx	lr

0800ba0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ba0a:	b480      	push	{r7}
 800ba0c:	b085      	sub	sp, #20
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	6078      	str	r0, [r7, #4]
 800ba12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	689b      	ldr	r3, [r3, #8]
 800ba18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ba22:	683a      	ldr	r2, [r7, #0]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	4313      	orrs	r3, r2
 800ba28:	f043 0307 	orr.w	r3, r3, #7
 800ba2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	68fa      	ldr	r2, [r7, #12]
 800ba32:	609a      	str	r2, [r3, #8]
}
 800ba34:	bf00      	nop
 800ba36:	3714      	adds	r7, #20
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr

0800ba40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b087      	sub	sp, #28
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	607a      	str	r2, [r7, #4]
 800ba4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	689b      	ldr	r3, [r3, #8]
 800ba52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	021a      	lsls	r2, r3, #8
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	431a      	orrs	r2, r3
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	4313      	orrs	r3, r2
 800ba68:	697a      	ldr	r2, [r7, #20]
 800ba6a:	4313      	orrs	r3, r2
 800ba6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	697a      	ldr	r2, [r7, #20]
 800ba72:	609a      	str	r2, [r3, #8]
}
 800ba74:	bf00      	nop
 800ba76:	371c      	adds	r7, #28
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr

0800ba80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b085      	sub	sp, #20
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d101      	bne.n	800ba98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba94:	2302      	movs	r3, #2
 800ba96:	e068      	b.n	800bb6a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2202      	movs	r2, #2
 800baa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4a2e      	ldr	r2, [pc, #184]	; (800bb78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d004      	beq.n	800bacc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4a2d      	ldr	r2, [pc, #180]	; (800bb7c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d108      	bne.n	800bade <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bad2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	68fa      	ldr	r2, [r7, #12]
 800bada:	4313      	orrs	r3, r2
 800badc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bae4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	68fa      	ldr	r2, [r7, #12]
 800baec:	4313      	orrs	r3, r2
 800baee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	68fa      	ldr	r2, [r7, #12]
 800baf6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	4a1e      	ldr	r2, [pc, #120]	; (800bb78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d01d      	beq.n	800bb3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb0a:	d018      	beq.n	800bb3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	4a1b      	ldr	r2, [pc, #108]	; (800bb80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d013      	beq.n	800bb3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4a1a      	ldr	r2, [pc, #104]	; (800bb84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d00e      	beq.n	800bb3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4a18      	ldr	r2, [pc, #96]	; (800bb88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d009      	beq.n	800bb3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	4a13      	ldr	r2, [pc, #76]	; (800bb7c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d004      	beq.n	800bb3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	4a14      	ldr	r2, [pc, #80]	; (800bb8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d10c      	bne.n	800bb58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	68ba      	ldr	r2, [r7, #8]
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	68ba      	ldr	r2, [r7, #8]
 800bb56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2200      	movs	r2, #0
 800bb64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb68:	2300      	movs	r3, #0
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3714      	adds	r7, #20
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr
 800bb76:	bf00      	nop
 800bb78:	40012c00 	.word	0x40012c00
 800bb7c:	40013400 	.word	0x40013400
 800bb80:	40000400 	.word	0x40000400
 800bb84:	40000800 	.word	0x40000800
 800bb88:	40000c00 	.word	0x40000c00
 800bb8c:	40014000 	.word	0x40014000

0800bb90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b083      	sub	sp, #12
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bb98:	bf00      	nop
 800bb9a:	370c      	adds	r7, #12
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr

0800bba4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b083      	sub	sp, #12
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bbac:	bf00      	nop
 800bbae:	370c      	adds	r7, #12
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr

0800bbb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bbc0:	bf00      	nop
 800bbc2:	370c      	adds	r7, #12
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr

0800bbcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d101      	bne.n	800bbde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	e040      	b.n	800bc60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d106      	bne.n	800bbf4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f7f9 fa3c 	bl	800506c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2224      	movs	r2, #36	; 0x24
 800bbf8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	681a      	ldr	r2, [r3, #0]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f022 0201 	bic.w	r2, r2, #1
 800bc08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f000 f8c0 	bl	800bd90 <UART_SetConfig>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2b01      	cmp	r3, #1
 800bc14:	d101      	bne.n	800bc1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800bc16:	2301      	movs	r3, #1
 800bc18:	e022      	b.n	800bc60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d002      	beq.n	800bc28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f000 fb6c 	bl	800c300 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	685a      	ldr	r2, [r3, #4]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bc36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	689a      	ldr	r2, [r3, #8]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bc46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	681a      	ldr	r2, [r3, #0]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f042 0201 	orr.w	r2, r2, #1
 800bc56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 fbf3 	bl	800c444 <UART_CheckIdleState>
 800bc5e:	4603      	mov	r3, r0
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3708      	adds	r7, #8
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b08a      	sub	sp, #40	; 0x28
 800bc6c:	af02      	add	r7, sp, #8
 800bc6e:	60f8      	str	r0, [r7, #12]
 800bc70:	60b9      	str	r1, [r7, #8]
 800bc72:	603b      	str	r3, [r7, #0]
 800bc74:	4613      	mov	r3, r2
 800bc76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc7c:	2b20      	cmp	r3, #32
 800bc7e:	f040 8082 	bne.w	800bd86 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d002      	beq.n	800bc8e <HAL_UART_Transmit+0x26>
 800bc88:	88fb      	ldrh	r3, [r7, #6]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d101      	bne.n	800bc92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	e07a      	b.n	800bd88 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d101      	bne.n	800bca0 <HAL_UART_Transmit+0x38>
 800bc9c:	2302      	movs	r3, #2
 800bc9e:	e073      	b.n	800bd88 <HAL_UART_Transmit+0x120>
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2201      	movs	r2, #1
 800bca4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2221      	movs	r2, #33	; 0x21
 800bcb4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bcb6:	f7fa fe61 	bl	800697c <HAL_GetTick>
 800bcba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	88fa      	ldrh	r2, [r7, #6]
 800bcc0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	88fa      	ldrh	r2, [r7, #6]
 800bcc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	689b      	ldr	r3, [r3, #8]
 800bcd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcd4:	d108      	bne.n	800bce8 <HAL_UART_Transmit+0x80>
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	691b      	ldr	r3, [r3, #16]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d104      	bne.n	800bce8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800bcde:	2300      	movs	r3, #0
 800bce0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	61bb      	str	r3, [r7, #24]
 800bce6:	e003      	b.n	800bcf0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bcec:	2300      	movs	r3, #0
 800bcee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800bcf8:	e02d      	b.n	800bd56 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	9300      	str	r3, [sp, #0]
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	2200      	movs	r2, #0
 800bd02:	2180      	movs	r1, #128	; 0x80
 800bd04:	68f8      	ldr	r0, [r7, #12]
 800bd06:	f000 fbe6 	bl	800c4d6 <UART_WaitOnFlagUntilTimeout>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d001      	beq.n	800bd14 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800bd10:	2303      	movs	r3, #3
 800bd12:	e039      	b.n	800bd88 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800bd14:	69fb      	ldr	r3, [r7, #28]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d10b      	bne.n	800bd32 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bd1a:	69bb      	ldr	r3, [r7, #24]
 800bd1c:	881a      	ldrh	r2, [r3, #0]
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bd26:	b292      	uxth	r2, r2
 800bd28:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bd2a:	69bb      	ldr	r3, [r7, #24]
 800bd2c:	3302      	adds	r3, #2
 800bd2e:	61bb      	str	r3, [r7, #24]
 800bd30:	e008      	b.n	800bd44 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bd32:	69fb      	ldr	r3, [r7, #28]
 800bd34:	781a      	ldrb	r2, [r3, #0]
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	b292      	uxth	r2, r2
 800bd3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bd3e:	69fb      	ldr	r3, [r7, #28]
 800bd40:	3301      	adds	r3, #1
 800bd42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bd4a:	b29b      	uxth	r3, r3
 800bd4c:	3b01      	subs	r3, #1
 800bd4e:	b29a      	uxth	r2, r3
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d1cb      	bne.n	800bcfa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	9300      	str	r3, [sp, #0]
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	2140      	movs	r1, #64	; 0x40
 800bd6c:	68f8      	ldr	r0, [r7, #12]
 800bd6e:	f000 fbb2 	bl	800c4d6 <UART_WaitOnFlagUntilTimeout>
 800bd72:	4603      	mov	r3, r0
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d001      	beq.n	800bd7c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800bd78:	2303      	movs	r3, #3
 800bd7a:	e005      	b.n	800bd88 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2220      	movs	r2, #32
 800bd80:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800bd82:	2300      	movs	r3, #0
 800bd84:	e000      	b.n	800bd88 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800bd86:	2302      	movs	r3, #2
  }
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3720      	adds	r7, #32
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bd90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bd94:	b08a      	sub	sp, #40	; 0x28
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	689a      	ldr	r2, [r3, #8]
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	691b      	ldr	r3, [r3, #16]
 800bda8:	431a      	orrs	r2, r3
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	695b      	ldr	r3, [r3, #20]
 800bdae:	431a      	orrs	r2, r3
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	69db      	ldr	r3, [r3, #28]
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	4ba4      	ldr	r3, [pc, #656]	; (800c050 <UART_SetConfig+0x2c0>)
 800bdc0:	4013      	ands	r3, r2
 800bdc2:	68fa      	ldr	r2, [r7, #12]
 800bdc4:	6812      	ldr	r2, [r2, #0]
 800bdc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bdc8:	430b      	orrs	r3, r1
 800bdca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	68da      	ldr	r2, [r3, #12]
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	430a      	orrs	r2, r1
 800bde0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	699b      	ldr	r3, [r3, #24]
 800bde6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	4a99      	ldr	r2, [pc, #612]	; (800c054 <UART_SetConfig+0x2c4>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d004      	beq.n	800bdfc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	6a1b      	ldr	r3, [r3, #32]
 800bdf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	689b      	ldr	r3, [r3, #8]
 800be02:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be0c:	430a      	orrs	r2, r1
 800be0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4a90      	ldr	r2, [pc, #576]	; (800c058 <UART_SetConfig+0x2c8>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d126      	bne.n	800be68 <UART_SetConfig+0xd8>
 800be1a:	4b90      	ldr	r3, [pc, #576]	; (800c05c <UART_SetConfig+0x2cc>)
 800be1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be20:	f003 0303 	and.w	r3, r3, #3
 800be24:	2b03      	cmp	r3, #3
 800be26:	d81b      	bhi.n	800be60 <UART_SetConfig+0xd0>
 800be28:	a201      	add	r2, pc, #4	; (adr r2, 800be30 <UART_SetConfig+0xa0>)
 800be2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be2e:	bf00      	nop
 800be30:	0800be41 	.word	0x0800be41
 800be34:	0800be51 	.word	0x0800be51
 800be38:	0800be49 	.word	0x0800be49
 800be3c:	0800be59 	.word	0x0800be59
 800be40:	2301      	movs	r3, #1
 800be42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be46:	e116      	b.n	800c076 <UART_SetConfig+0x2e6>
 800be48:	2302      	movs	r3, #2
 800be4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be4e:	e112      	b.n	800c076 <UART_SetConfig+0x2e6>
 800be50:	2304      	movs	r3, #4
 800be52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be56:	e10e      	b.n	800c076 <UART_SetConfig+0x2e6>
 800be58:	2308      	movs	r3, #8
 800be5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be5e:	e10a      	b.n	800c076 <UART_SetConfig+0x2e6>
 800be60:	2310      	movs	r3, #16
 800be62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be66:	e106      	b.n	800c076 <UART_SetConfig+0x2e6>
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4a7c      	ldr	r2, [pc, #496]	; (800c060 <UART_SetConfig+0x2d0>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d138      	bne.n	800bee4 <UART_SetConfig+0x154>
 800be72:	4b7a      	ldr	r3, [pc, #488]	; (800c05c <UART_SetConfig+0x2cc>)
 800be74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be78:	f003 030c 	and.w	r3, r3, #12
 800be7c:	2b0c      	cmp	r3, #12
 800be7e:	d82d      	bhi.n	800bedc <UART_SetConfig+0x14c>
 800be80:	a201      	add	r2, pc, #4	; (adr r2, 800be88 <UART_SetConfig+0xf8>)
 800be82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be86:	bf00      	nop
 800be88:	0800bebd 	.word	0x0800bebd
 800be8c:	0800bedd 	.word	0x0800bedd
 800be90:	0800bedd 	.word	0x0800bedd
 800be94:	0800bedd 	.word	0x0800bedd
 800be98:	0800becd 	.word	0x0800becd
 800be9c:	0800bedd 	.word	0x0800bedd
 800bea0:	0800bedd 	.word	0x0800bedd
 800bea4:	0800bedd 	.word	0x0800bedd
 800bea8:	0800bec5 	.word	0x0800bec5
 800beac:	0800bedd 	.word	0x0800bedd
 800beb0:	0800bedd 	.word	0x0800bedd
 800beb4:	0800bedd 	.word	0x0800bedd
 800beb8:	0800bed5 	.word	0x0800bed5
 800bebc:	2300      	movs	r3, #0
 800bebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bec2:	e0d8      	b.n	800c076 <UART_SetConfig+0x2e6>
 800bec4:	2302      	movs	r3, #2
 800bec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800beca:	e0d4      	b.n	800c076 <UART_SetConfig+0x2e6>
 800becc:	2304      	movs	r3, #4
 800bece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bed2:	e0d0      	b.n	800c076 <UART_SetConfig+0x2e6>
 800bed4:	2308      	movs	r3, #8
 800bed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800beda:	e0cc      	b.n	800c076 <UART_SetConfig+0x2e6>
 800bedc:	2310      	movs	r3, #16
 800bede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bee2:	e0c8      	b.n	800c076 <UART_SetConfig+0x2e6>
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	4a5e      	ldr	r2, [pc, #376]	; (800c064 <UART_SetConfig+0x2d4>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d125      	bne.n	800bf3a <UART_SetConfig+0x1aa>
 800beee:	4b5b      	ldr	r3, [pc, #364]	; (800c05c <UART_SetConfig+0x2cc>)
 800bef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bef4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bef8:	2b30      	cmp	r3, #48	; 0x30
 800befa:	d016      	beq.n	800bf2a <UART_SetConfig+0x19a>
 800befc:	2b30      	cmp	r3, #48	; 0x30
 800befe:	d818      	bhi.n	800bf32 <UART_SetConfig+0x1a2>
 800bf00:	2b20      	cmp	r3, #32
 800bf02:	d00a      	beq.n	800bf1a <UART_SetConfig+0x18a>
 800bf04:	2b20      	cmp	r3, #32
 800bf06:	d814      	bhi.n	800bf32 <UART_SetConfig+0x1a2>
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d002      	beq.n	800bf12 <UART_SetConfig+0x182>
 800bf0c:	2b10      	cmp	r3, #16
 800bf0e:	d008      	beq.n	800bf22 <UART_SetConfig+0x192>
 800bf10:	e00f      	b.n	800bf32 <UART_SetConfig+0x1a2>
 800bf12:	2300      	movs	r3, #0
 800bf14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf18:	e0ad      	b.n	800c076 <UART_SetConfig+0x2e6>
 800bf1a:	2302      	movs	r3, #2
 800bf1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf20:	e0a9      	b.n	800c076 <UART_SetConfig+0x2e6>
 800bf22:	2304      	movs	r3, #4
 800bf24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf28:	e0a5      	b.n	800c076 <UART_SetConfig+0x2e6>
 800bf2a:	2308      	movs	r3, #8
 800bf2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf30:	e0a1      	b.n	800c076 <UART_SetConfig+0x2e6>
 800bf32:	2310      	movs	r3, #16
 800bf34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf38:	e09d      	b.n	800c076 <UART_SetConfig+0x2e6>
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	4a4a      	ldr	r2, [pc, #296]	; (800c068 <UART_SetConfig+0x2d8>)
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d125      	bne.n	800bf90 <UART_SetConfig+0x200>
 800bf44:	4b45      	ldr	r3, [pc, #276]	; (800c05c <UART_SetConfig+0x2cc>)
 800bf46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bf4e:	2bc0      	cmp	r3, #192	; 0xc0
 800bf50:	d016      	beq.n	800bf80 <UART_SetConfig+0x1f0>
 800bf52:	2bc0      	cmp	r3, #192	; 0xc0
 800bf54:	d818      	bhi.n	800bf88 <UART_SetConfig+0x1f8>
 800bf56:	2b80      	cmp	r3, #128	; 0x80
 800bf58:	d00a      	beq.n	800bf70 <UART_SetConfig+0x1e0>
 800bf5a:	2b80      	cmp	r3, #128	; 0x80
 800bf5c:	d814      	bhi.n	800bf88 <UART_SetConfig+0x1f8>
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d002      	beq.n	800bf68 <UART_SetConfig+0x1d8>
 800bf62:	2b40      	cmp	r3, #64	; 0x40
 800bf64:	d008      	beq.n	800bf78 <UART_SetConfig+0x1e8>
 800bf66:	e00f      	b.n	800bf88 <UART_SetConfig+0x1f8>
 800bf68:	2300      	movs	r3, #0
 800bf6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf6e:	e082      	b.n	800c076 <UART_SetConfig+0x2e6>
 800bf70:	2302      	movs	r3, #2
 800bf72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf76:	e07e      	b.n	800c076 <UART_SetConfig+0x2e6>
 800bf78:	2304      	movs	r3, #4
 800bf7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf7e:	e07a      	b.n	800c076 <UART_SetConfig+0x2e6>
 800bf80:	2308      	movs	r3, #8
 800bf82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf86:	e076      	b.n	800c076 <UART_SetConfig+0x2e6>
 800bf88:	2310      	movs	r3, #16
 800bf8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf8e:	e072      	b.n	800c076 <UART_SetConfig+0x2e6>
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4a35      	ldr	r2, [pc, #212]	; (800c06c <UART_SetConfig+0x2dc>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d12a      	bne.n	800bff0 <UART_SetConfig+0x260>
 800bf9a:	4b30      	ldr	r3, [pc, #192]	; (800c05c <UART_SetConfig+0x2cc>)
 800bf9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfa8:	d01a      	beq.n	800bfe0 <UART_SetConfig+0x250>
 800bfaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfae:	d81b      	bhi.n	800bfe8 <UART_SetConfig+0x258>
 800bfb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfb4:	d00c      	beq.n	800bfd0 <UART_SetConfig+0x240>
 800bfb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfba:	d815      	bhi.n	800bfe8 <UART_SetConfig+0x258>
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d003      	beq.n	800bfc8 <UART_SetConfig+0x238>
 800bfc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfc4:	d008      	beq.n	800bfd8 <UART_SetConfig+0x248>
 800bfc6:	e00f      	b.n	800bfe8 <UART_SetConfig+0x258>
 800bfc8:	2300      	movs	r3, #0
 800bfca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bfce:	e052      	b.n	800c076 <UART_SetConfig+0x2e6>
 800bfd0:	2302      	movs	r3, #2
 800bfd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bfd6:	e04e      	b.n	800c076 <UART_SetConfig+0x2e6>
 800bfd8:	2304      	movs	r3, #4
 800bfda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bfde:	e04a      	b.n	800c076 <UART_SetConfig+0x2e6>
 800bfe0:	2308      	movs	r3, #8
 800bfe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bfe6:	e046      	b.n	800c076 <UART_SetConfig+0x2e6>
 800bfe8:	2310      	movs	r3, #16
 800bfea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bfee:	e042      	b.n	800c076 <UART_SetConfig+0x2e6>
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	4a17      	ldr	r2, [pc, #92]	; (800c054 <UART_SetConfig+0x2c4>)
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d13a      	bne.n	800c070 <UART_SetConfig+0x2e0>
 800bffa:	4b18      	ldr	r3, [pc, #96]	; (800c05c <UART_SetConfig+0x2cc>)
 800bffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c000:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c004:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c008:	d01a      	beq.n	800c040 <UART_SetConfig+0x2b0>
 800c00a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c00e:	d81b      	bhi.n	800c048 <UART_SetConfig+0x2b8>
 800c010:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c014:	d00c      	beq.n	800c030 <UART_SetConfig+0x2a0>
 800c016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c01a:	d815      	bhi.n	800c048 <UART_SetConfig+0x2b8>
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d003      	beq.n	800c028 <UART_SetConfig+0x298>
 800c020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c024:	d008      	beq.n	800c038 <UART_SetConfig+0x2a8>
 800c026:	e00f      	b.n	800c048 <UART_SetConfig+0x2b8>
 800c028:	2300      	movs	r3, #0
 800c02a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c02e:	e022      	b.n	800c076 <UART_SetConfig+0x2e6>
 800c030:	2302      	movs	r3, #2
 800c032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c036:	e01e      	b.n	800c076 <UART_SetConfig+0x2e6>
 800c038:	2304      	movs	r3, #4
 800c03a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c03e:	e01a      	b.n	800c076 <UART_SetConfig+0x2e6>
 800c040:	2308      	movs	r3, #8
 800c042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c046:	e016      	b.n	800c076 <UART_SetConfig+0x2e6>
 800c048:	2310      	movs	r3, #16
 800c04a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c04e:	e012      	b.n	800c076 <UART_SetConfig+0x2e6>
 800c050:	efff69f3 	.word	0xefff69f3
 800c054:	40008000 	.word	0x40008000
 800c058:	40013800 	.word	0x40013800
 800c05c:	40021000 	.word	0x40021000
 800c060:	40004400 	.word	0x40004400
 800c064:	40004800 	.word	0x40004800
 800c068:	40004c00 	.word	0x40004c00
 800c06c:	40005000 	.word	0x40005000
 800c070:	2310      	movs	r3, #16
 800c072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	4a9f      	ldr	r2, [pc, #636]	; (800c2f8 <UART_SetConfig+0x568>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d17a      	bne.n	800c176 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c080:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c084:	2b08      	cmp	r3, #8
 800c086:	d824      	bhi.n	800c0d2 <UART_SetConfig+0x342>
 800c088:	a201      	add	r2, pc, #4	; (adr r2, 800c090 <UART_SetConfig+0x300>)
 800c08a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c08e:	bf00      	nop
 800c090:	0800c0b5 	.word	0x0800c0b5
 800c094:	0800c0d3 	.word	0x0800c0d3
 800c098:	0800c0bd 	.word	0x0800c0bd
 800c09c:	0800c0d3 	.word	0x0800c0d3
 800c0a0:	0800c0c3 	.word	0x0800c0c3
 800c0a4:	0800c0d3 	.word	0x0800c0d3
 800c0a8:	0800c0d3 	.word	0x0800c0d3
 800c0ac:	0800c0d3 	.word	0x0800c0d3
 800c0b0:	0800c0cb 	.word	0x0800c0cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c0b4:	f7fd f846 	bl	8009144 <HAL_RCC_GetPCLK1Freq>
 800c0b8:	61f8      	str	r0, [r7, #28]
        break;
 800c0ba:	e010      	b.n	800c0de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c0bc:	4b8f      	ldr	r3, [pc, #572]	; (800c2fc <UART_SetConfig+0x56c>)
 800c0be:	61fb      	str	r3, [r7, #28]
        break;
 800c0c0:	e00d      	b.n	800c0de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c0c2:	f7fc ffa7 	bl	8009014 <HAL_RCC_GetSysClockFreq>
 800c0c6:	61f8      	str	r0, [r7, #28]
        break;
 800c0c8:	e009      	b.n	800c0de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c0ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c0ce:	61fb      	str	r3, [r7, #28]
        break;
 800c0d0:	e005      	b.n	800c0de <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800c0dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	f000 80fb 	beq.w	800c2dc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	685a      	ldr	r2, [r3, #4]
 800c0ea:	4613      	mov	r3, r2
 800c0ec:	005b      	lsls	r3, r3, #1
 800c0ee:	4413      	add	r3, r2
 800c0f0:	69fa      	ldr	r2, [r7, #28]
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d305      	bcc.n	800c102 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c0fc:	69fa      	ldr	r2, [r7, #28]
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d903      	bls.n	800c10a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800c102:	2301      	movs	r3, #1
 800c104:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800c108:	e0e8      	b.n	800c2dc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	2200      	movs	r2, #0
 800c10e:	461c      	mov	r4, r3
 800c110:	4615      	mov	r5, r2
 800c112:	f04f 0200 	mov.w	r2, #0
 800c116:	f04f 0300 	mov.w	r3, #0
 800c11a:	022b      	lsls	r3, r5, #8
 800c11c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800c120:	0222      	lsls	r2, r4, #8
 800c122:	68f9      	ldr	r1, [r7, #12]
 800c124:	6849      	ldr	r1, [r1, #4]
 800c126:	0849      	lsrs	r1, r1, #1
 800c128:	2000      	movs	r0, #0
 800c12a:	4688      	mov	r8, r1
 800c12c:	4681      	mov	r9, r0
 800c12e:	eb12 0a08 	adds.w	sl, r2, r8
 800c132:	eb43 0b09 	adc.w	fp, r3, r9
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	2200      	movs	r2, #0
 800c13c:	603b      	str	r3, [r7, #0]
 800c13e:	607a      	str	r2, [r7, #4]
 800c140:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c144:	4650      	mov	r0, sl
 800c146:	4659      	mov	r1, fp
 800c148:	f7f4 f89a 	bl	8000280 <__aeabi_uldivmod>
 800c14c:	4602      	mov	r2, r0
 800c14e:	460b      	mov	r3, r1
 800c150:	4613      	mov	r3, r2
 800c152:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c154:	69bb      	ldr	r3, [r7, #24]
 800c156:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c15a:	d308      	bcc.n	800c16e <UART_SetConfig+0x3de>
 800c15c:	69bb      	ldr	r3, [r7, #24]
 800c15e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c162:	d204      	bcs.n	800c16e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	69ba      	ldr	r2, [r7, #24]
 800c16a:	60da      	str	r2, [r3, #12]
 800c16c:	e0b6      	b.n	800c2dc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800c16e:	2301      	movs	r3, #1
 800c170:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800c174:	e0b2      	b.n	800c2dc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	69db      	ldr	r3, [r3, #28]
 800c17a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c17e:	d15e      	bne.n	800c23e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800c180:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c184:	2b08      	cmp	r3, #8
 800c186:	d828      	bhi.n	800c1da <UART_SetConfig+0x44a>
 800c188:	a201      	add	r2, pc, #4	; (adr r2, 800c190 <UART_SetConfig+0x400>)
 800c18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c18e:	bf00      	nop
 800c190:	0800c1b5 	.word	0x0800c1b5
 800c194:	0800c1bd 	.word	0x0800c1bd
 800c198:	0800c1c5 	.word	0x0800c1c5
 800c19c:	0800c1db 	.word	0x0800c1db
 800c1a0:	0800c1cb 	.word	0x0800c1cb
 800c1a4:	0800c1db 	.word	0x0800c1db
 800c1a8:	0800c1db 	.word	0x0800c1db
 800c1ac:	0800c1db 	.word	0x0800c1db
 800c1b0:	0800c1d3 	.word	0x0800c1d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c1b4:	f7fc ffc6 	bl	8009144 <HAL_RCC_GetPCLK1Freq>
 800c1b8:	61f8      	str	r0, [r7, #28]
        break;
 800c1ba:	e014      	b.n	800c1e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1bc:	f7fc ffd8 	bl	8009170 <HAL_RCC_GetPCLK2Freq>
 800c1c0:	61f8      	str	r0, [r7, #28]
        break;
 800c1c2:	e010      	b.n	800c1e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c1c4:	4b4d      	ldr	r3, [pc, #308]	; (800c2fc <UART_SetConfig+0x56c>)
 800c1c6:	61fb      	str	r3, [r7, #28]
        break;
 800c1c8:	e00d      	b.n	800c1e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c1ca:	f7fc ff23 	bl	8009014 <HAL_RCC_GetSysClockFreq>
 800c1ce:	61f8      	str	r0, [r7, #28]
        break;
 800c1d0:	e009      	b.n	800c1e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1d6:	61fb      	str	r3, [r7, #28]
        break;
 800c1d8:	e005      	b.n	800c1e6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800c1e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c1e6:	69fb      	ldr	r3, [r7, #28]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d077      	beq.n	800c2dc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c1ec:	69fb      	ldr	r3, [r7, #28]
 800c1ee:	005a      	lsls	r2, r3, #1
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	685b      	ldr	r3, [r3, #4]
 800c1f4:	085b      	lsrs	r3, r3, #1
 800c1f6:	441a      	add	r2, r3
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c200:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c202:	69bb      	ldr	r3, [r7, #24]
 800c204:	2b0f      	cmp	r3, #15
 800c206:	d916      	bls.n	800c236 <UART_SetConfig+0x4a6>
 800c208:	69bb      	ldr	r3, [r7, #24]
 800c20a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c20e:	d212      	bcs.n	800c236 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c210:	69bb      	ldr	r3, [r7, #24]
 800c212:	b29b      	uxth	r3, r3
 800c214:	f023 030f 	bic.w	r3, r3, #15
 800c218:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	085b      	lsrs	r3, r3, #1
 800c21e:	b29b      	uxth	r3, r3
 800c220:	f003 0307 	and.w	r3, r3, #7
 800c224:	b29a      	uxth	r2, r3
 800c226:	8afb      	ldrh	r3, [r7, #22]
 800c228:	4313      	orrs	r3, r2
 800c22a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	8afa      	ldrh	r2, [r7, #22]
 800c232:	60da      	str	r2, [r3, #12]
 800c234:	e052      	b.n	800c2dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800c236:	2301      	movs	r3, #1
 800c238:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800c23c:	e04e      	b.n	800c2dc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c23e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c242:	2b08      	cmp	r3, #8
 800c244:	d827      	bhi.n	800c296 <UART_SetConfig+0x506>
 800c246:	a201      	add	r2, pc, #4	; (adr r2, 800c24c <UART_SetConfig+0x4bc>)
 800c248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c24c:	0800c271 	.word	0x0800c271
 800c250:	0800c279 	.word	0x0800c279
 800c254:	0800c281 	.word	0x0800c281
 800c258:	0800c297 	.word	0x0800c297
 800c25c:	0800c287 	.word	0x0800c287
 800c260:	0800c297 	.word	0x0800c297
 800c264:	0800c297 	.word	0x0800c297
 800c268:	0800c297 	.word	0x0800c297
 800c26c:	0800c28f 	.word	0x0800c28f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c270:	f7fc ff68 	bl	8009144 <HAL_RCC_GetPCLK1Freq>
 800c274:	61f8      	str	r0, [r7, #28]
        break;
 800c276:	e014      	b.n	800c2a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c278:	f7fc ff7a 	bl	8009170 <HAL_RCC_GetPCLK2Freq>
 800c27c:	61f8      	str	r0, [r7, #28]
        break;
 800c27e:	e010      	b.n	800c2a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c280:	4b1e      	ldr	r3, [pc, #120]	; (800c2fc <UART_SetConfig+0x56c>)
 800c282:	61fb      	str	r3, [r7, #28]
        break;
 800c284:	e00d      	b.n	800c2a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c286:	f7fc fec5 	bl	8009014 <HAL_RCC_GetSysClockFreq>
 800c28a:	61f8      	str	r0, [r7, #28]
        break;
 800c28c:	e009      	b.n	800c2a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c28e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c292:	61fb      	str	r3, [r7, #28]
        break;
 800c294:	e005      	b.n	800c2a2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800c296:	2300      	movs	r3, #0
 800c298:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c29a:	2301      	movs	r3, #1
 800c29c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800c2a0:	bf00      	nop
    }

    if (pclk != 0U)
 800c2a2:	69fb      	ldr	r3, [r7, #28]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d019      	beq.n	800c2dc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	685b      	ldr	r3, [r3, #4]
 800c2ac:	085a      	lsrs	r2, r3, #1
 800c2ae:	69fb      	ldr	r3, [r7, #28]
 800c2b0:	441a      	add	r2, r3
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	685b      	ldr	r3, [r3, #4]
 800c2b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c2bc:	69bb      	ldr	r3, [r7, #24]
 800c2be:	2b0f      	cmp	r3, #15
 800c2c0:	d909      	bls.n	800c2d6 <UART_SetConfig+0x546>
 800c2c2:	69bb      	ldr	r3, [r7, #24]
 800c2c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2c8:	d205      	bcs.n	800c2d6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c2ca:	69bb      	ldr	r3, [r7, #24]
 800c2cc:	b29a      	uxth	r2, r3
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	60da      	str	r2, [r3, #12]
 800c2d4:	e002      	b.n	800c2dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c2e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3728      	adds	r7, #40	; 0x28
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c2f6:	bf00      	nop
 800c2f8:	40008000 	.word	0x40008000
 800c2fc:	00f42400 	.word	0x00f42400

0800c300 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c300:	b480      	push	{r7}
 800c302:	b083      	sub	sp, #12
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c30c:	f003 0301 	and.w	r3, r3, #1
 800c310:	2b00      	cmp	r3, #0
 800c312:	d00a      	beq.n	800c32a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	685b      	ldr	r3, [r3, #4]
 800c31a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	430a      	orrs	r2, r1
 800c328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c32e:	f003 0302 	and.w	r3, r3, #2
 800c332:	2b00      	cmp	r3, #0
 800c334:	d00a      	beq.n	800c34c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	430a      	orrs	r2, r1
 800c34a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c350:	f003 0304 	and.w	r3, r3, #4
 800c354:	2b00      	cmp	r3, #0
 800c356:	d00a      	beq.n	800c36e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	430a      	orrs	r2, r1
 800c36c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c372:	f003 0308 	and.w	r3, r3, #8
 800c376:	2b00      	cmp	r3, #0
 800c378:	d00a      	beq.n	800c390 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	430a      	orrs	r2, r1
 800c38e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c394:	f003 0310 	and.w	r3, r3, #16
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d00a      	beq.n	800c3b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	689b      	ldr	r3, [r3, #8]
 800c3a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	430a      	orrs	r2, r1
 800c3b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3b6:	f003 0320 	and.w	r3, r3, #32
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d00a      	beq.n	800c3d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	689b      	ldr	r3, [r3, #8]
 800c3c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	430a      	orrs	r2, r1
 800c3d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d01a      	beq.n	800c416 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	430a      	orrs	r2, r1
 800c3f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3fe:	d10a      	bne.n	800c416 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	430a      	orrs	r2, r1
 800c414:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c41a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d00a      	beq.n	800c438 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	430a      	orrs	r2, r1
 800c436:	605a      	str	r2, [r3, #4]
  }
}
 800c438:	bf00      	nop
 800c43a:	370c      	adds	r7, #12
 800c43c:	46bd      	mov	sp, r7
 800c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c442:	4770      	bx	lr

0800c444 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b086      	sub	sp, #24
 800c448:	af02      	add	r7, sp, #8
 800c44a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2200      	movs	r2, #0
 800c450:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c454:	f7fa fa92 	bl	800697c <HAL_GetTick>
 800c458:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f003 0308 	and.w	r3, r3, #8
 800c464:	2b08      	cmp	r3, #8
 800c466:	d10e      	bne.n	800c486 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c468:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c46c:	9300      	str	r3, [sp, #0]
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	2200      	movs	r2, #0
 800c472:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f000 f82d 	bl	800c4d6 <UART_WaitOnFlagUntilTimeout>
 800c47c:	4603      	mov	r3, r0
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d001      	beq.n	800c486 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c482:	2303      	movs	r3, #3
 800c484:	e023      	b.n	800c4ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f003 0304 	and.w	r3, r3, #4
 800c490:	2b04      	cmp	r3, #4
 800c492:	d10e      	bne.n	800c4b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c494:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c498:	9300      	str	r3, [sp, #0]
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	2200      	movs	r2, #0
 800c49e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f000 f817 	bl	800c4d6 <UART_WaitOnFlagUntilTimeout>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d001      	beq.n	800c4b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c4ae:	2303      	movs	r3, #3
 800c4b0:	e00d      	b.n	800c4ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2220      	movs	r2, #32
 800c4b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2220      	movs	r2, #32
 800c4bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c4cc:	2300      	movs	r3, #0
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3710      	adds	r7, #16
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}

0800c4d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c4d6:	b580      	push	{r7, lr}
 800c4d8:	b09c      	sub	sp, #112	; 0x70
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	60f8      	str	r0, [r7, #12]
 800c4de:	60b9      	str	r1, [r7, #8]
 800c4e0:	603b      	str	r3, [r7, #0]
 800c4e2:	4613      	mov	r3, r2
 800c4e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4e6:	e0a5      	b.n	800c634 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c4e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ee:	f000 80a1 	beq.w	800c634 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c4f2:	f7fa fa43 	bl	800697c <HAL_GetTick>
 800c4f6:	4602      	mov	r2, r0
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	1ad3      	subs	r3, r2, r3
 800c4fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d302      	bcc.n	800c508 <UART_WaitOnFlagUntilTimeout+0x32>
 800c502:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c504:	2b00      	cmp	r3, #0
 800c506:	d13e      	bne.n	800c586 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c50e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c510:	e853 3f00 	ldrex	r3, [r3]
 800c514:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c518:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c51c:	667b      	str	r3, [r7, #100]	; 0x64
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	461a      	mov	r2, r3
 800c524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c526:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c528:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c52a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c52c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c52e:	e841 2300 	strex	r3, r2, [r1]
 800c532:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c536:	2b00      	cmp	r3, #0
 800c538:	d1e6      	bne.n	800c508 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	3308      	adds	r3, #8
 800c540:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c544:	e853 3f00 	ldrex	r3, [r3]
 800c548:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c54c:	f023 0301 	bic.w	r3, r3, #1
 800c550:	663b      	str	r3, [r7, #96]	; 0x60
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	3308      	adds	r3, #8
 800c558:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c55a:	64ba      	str	r2, [r7, #72]	; 0x48
 800c55c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c55e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c560:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c562:	e841 2300 	strex	r3, r2, [r1]
 800c566:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d1e5      	bne.n	800c53a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2220      	movs	r2, #32
 800c572:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2220      	movs	r2, #32
 800c578:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2200      	movs	r2, #0
 800c57e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c582:	2303      	movs	r3, #3
 800c584:	e067      	b.n	800c656 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f003 0304 	and.w	r3, r3, #4
 800c590:	2b00      	cmp	r3, #0
 800c592:	d04f      	beq.n	800c634 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	69db      	ldr	r3, [r3, #28]
 800c59a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c59e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c5a2:	d147      	bne.n	800c634 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c5ac:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b6:	e853 3f00 	ldrex	r3, [r3]
 800c5ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c5c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5cc:	637b      	str	r3, [r7, #52]	; 0x34
 800c5ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c5d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5d4:	e841 2300 	strex	r3, r2, [r1]
 800c5d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d1e6      	bne.n	800c5ae <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	3308      	adds	r3, #8
 800c5e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	e853 3f00 	ldrex	r3, [r3]
 800c5ee:	613b      	str	r3, [r7, #16]
   return(result);
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	f023 0301 	bic.w	r3, r3, #1
 800c5f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	3308      	adds	r3, #8
 800c5fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c600:	623a      	str	r2, [r7, #32]
 800c602:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c604:	69f9      	ldr	r1, [r7, #28]
 800c606:	6a3a      	ldr	r2, [r7, #32]
 800c608:	e841 2300 	strex	r3, r2, [r1]
 800c60c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c60e:	69bb      	ldr	r3, [r7, #24]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d1e5      	bne.n	800c5e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2220      	movs	r2, #32
 800c618:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2220      	movs	r2, #32
 800c61e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2220      	movs	r2, #32
 800c624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	2200      	movs	r2, #0
 800c62c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800c630:	2303      	movs	r3, #3
 800c632:	e010      	b.n	800c656 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	69da      	ldr	r2, [r3, #28]
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	4013      	ands	r3, r2
 800c63e:	68ba      	ldr	r2, [r7, #8]
 800c640:	429a      	cmp	r2, r3
 800c642:	bf0c      	ite	eq
 800c644:	2301      	moveq	r3, #1
 800c646:	2300      	movne	r3, #0
 800c648:	b2db      	uxtb	r3, r3
 800c64a:	461a      	mov	r2, r3
 800c64c:	79fb      	ldrb	r3, [r7, #7]
 800c64e:	429a      	cmp	r2, r3
 800c650:	f43f af4a 	beq.w	800c4e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c654:	2300      	movs	r3, #0
}
 800c656:	4618      	mov	r0, r3
 800c658:	3770      	adds	r7, #112	; 0x70
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}

0800c65e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c65e:	b084      	sub	sp, #16
 800c660:	b580      	push	{r7, lr}
 800c662:	b084      	sub	sp, #16
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	f107 001c 	add.w	r0, r7, #28
 800c66c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	68db      	ldr	r3, [r3, #12]
 800c674:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f000 fa6f 	bl	800cb60 <USB_CoreReset>
 800c682:	4603      	mov	r3, r0
 800c684:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800c686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d106      	bne.n	800c69a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c690:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	639a      	str	r2, [r3, #56]	; 0x38
 800c698:	e005      	b.n	800c6a6 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c69e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800c6a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3710      	adds	r7, #16
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c6b2:	b004      	add	sp, #16
 800c6b4:	4770      	bx	lr

0800c6b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c6b6:	b480      	push	{r7}
 800c6b8:	b083      	sub	sp, #12
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	689b      	ldr	r3, [r3, #8]
 800c6c2:	f023 0201 	bic.w	r2, r3, #1
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c6ca:	2300      	movs	r3, #0
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	370c      	adds	r7, #12
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr

0800c6d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b084      	sub	sp, #16
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	68db      	ldr	r3, [r3, #12]
 800c6ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c6f4:	78fb      	ldrb	r3, [r7, #3]
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	d115      	bne.n	800c726 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	68db      	ldr	r3, [r3, #12]
 800c6fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c706:	2001      	movs	r0, #1
 800c708:	f7fa f944 	bl	8006994 <HAL_Delay>
      ms++;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	3301      	adds	r3, #1
 800c710:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f000 fa16 	bl	800cb44 <USB_GetMode>
 800c718:	4603      	mov	r3, r0
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d01e      	beq.n	800c75c <USB_SetCurrentMode+0x84>
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	2b31      	cmp	r3, #49	; 0x31
 800c722:	d9f0      	bls.n	800c706 <USB_SetCurrentMode+0x2e>
 800c724:	e01a      	b.n	800c75c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c726:	78fb      	ldrb	r3, [r7, #3]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d115      	bne.n	800c758 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	68db      	ldr	r3, [r3, #12]
 800c730:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c738:	2001      	movs	r0, #1
 800c73a:	f7fa f92b 	bl	8006994 <HAL_Delay>
      ms++;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	3301      	adds	r3, #1
 800c742:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f000 f9fd 	bl	800cb44 <USB_GetMode>
 800c74a:	4603      	mov	r3, r0
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d005      	beq.n	800c75c <USB_SetCurrentMode+0x84>
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2b31      	cmp	r3, #49	; 0x31
 800c754:	d9f0      	bls.n	800c738 <USB_SetCurrentMode+0x60>
 800c756:	e001      	b.n	800c75c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c758:	2301      	movs	r3, #1
 800c75a:	e005      	b.n	800c768 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	2b32      	cmp	r3, #50	; 0x32
 800c760:	d101      	bne.n	800c766 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c762:	2301      	movs	r3, #1
 800c764:	e000      	b.n	800c768 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c766:	2300      	movs	r3, #0
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3710      	adds	r7, #16
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}

0800c770 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c770:	b084      	sub	sp, #16
 800c772:	b580      	push	{r7, lr}
 800c774:	b086      	sub	sp, #24
 800c776:	af00      	add	r7, sp, #0
 800c778:	6078      	str	r0, [r7, #4]
 800c77a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c77e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c782:	2300      	movs	r3, #0
 800c784:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c78a:	2300      	movs	r3, #0
 800c78c:	613b      	str	r3, [r7, #16]
 800c78e:	e009      	b.n	800c7a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c790:	687a      	ldr	r2, [r7, #4]
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	3340      	adds	r3, #64	; 0x40
 800c796:	009b      	lsls	r3, r3, #2
 800c798:	4413      	add	r3, r2
 800c79a:	2200      	movs	r2, #0
 800c79c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	613b      	str	r3, [r7, #16]
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	2b0e      	cmp	r3, #14
 800c7a8:	d9f2      	bls.n	800c790 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c7aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d11c      	bne.n	800c7ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	68fa      	ldr	r2, [r7, #12]
 800c7ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c7be:	f043 0302 	orr.w	r3, r3, #2
 800c7c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	601a      	str	r2, [r3, #0]
 800c7e8:	e005      	b.n	800c7f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c7fc:	461a      	mov	r2, r3
 800c7fe:	2300      	movs	r3, #0
 800c800:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c808:	4619      	mov	r1, r3
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c810:	461a      	mov	r2, r3
 800c812:	680b      	ldr	r3, [r1, #0]
 800c814:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c816:	2103      	movs	r1, #3
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f000 f959 	bl	800cad0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c81e:	2110      	movs	r1, #16
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f000 f8f1 	bl	800ca08 <USB_FlushTxFifo>
 800c826:	4603      	mov	r3, r0
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d001      	beq.n	800c830 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800c82c:	2301      	movs	r3, #1
 800c82e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f000 f91d 	bl	800ca70 <USB_FlushRxFifo>
 800c836:	4603      	mov	r3, r0
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d001      	beq.n	800c840 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800c83c:	2301      	movs	r3, #1
 800c83e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c846:	461a      	mov	r2, r3
 800c848:	2300      	movs	r3, #0
 800c84a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c852:	461a      	mov	r2, r3
 800c854:	2300      	movs	r3, #0
 800c856:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c85e:	461a      	mov	r2, r3
 800c860:	2300      	movs	r3, #0
 800c862:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c864:	2300      	movs	r3, #0
 800c866:	613b      	str	r3, [r7, #16]
 800c868:	e043      	b.n	800c8f2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	015a      	lsls	r2, r3, #5
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	4413      	add	r3, r2
 800c872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c87c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c880:	d118      	bne.n	800c8b4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d10a      	bne.n	800c89e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	015a      	lsls	r2, r3, #5
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	4413      	add	r3, r2
 800c890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c894:	461a      	mov	r2, r3
 800c896:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c89a:	6013      	str	r3, [r2, #0]
 800c89c:	e013      	b.n	800c8c6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	015a      	lsls	r2, r3, #5
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	4413      	add	r3, r2
 800c8a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c8b0:	6013      	str	r3, [r2, #0]
 800c8b2:	e008      	b.n	800c8c6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	015a      	lsls	r2, r3, #5
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	4413      	add	r3, r2
 800c8bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8c0:	461a      	mov	r2, r3
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	015a      	lsls	r2, r3, #5
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	4413      	add	r3, r2
 800c8ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	015a      	lsls	r2, r3, #5
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	4413      	add	r3, r2
 800c8e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c8ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	613b      	str	r3, [r7, #16]
 800c8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f4:	693a      	ldr	r2, [r7, #16]
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d3b7      	bcc.n	800c86a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	613b      	str	r3, [r7, #16]
 800c8fe:	e043      	b.n	800c988 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	015a      	lsls	r2, r3, #5
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	4413      	add	r3, r2
 800c908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c912:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c916:	d118      	bne.n	800c94a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d10a      	bne.n	800c934 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	015a      	lsls	r2, r3, #5
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	4413      	add	r3, r2
 800c926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c92a:	461a      	mov	r2, r3
 800c92c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c930:	6013      	str	r3, [r2, #0]
 800c932:	e013      	b.n	800c95c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	015a      	lsls	r2, r3, #5
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	4413      	add	r3, r2
 800c93c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c940:	461a      	mov	r2, r3
 800c942:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c946:	6013      	str	r3, [r2, #0]
 800c948:	e008      	b.n	800c95c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	015a      	lsls	r2, r3, #5
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	4413      	add	r3, r2
 800c952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c956:	461a      	mov	r2, r3
 800c958:	2300      	movs	r3, #0
 800c95a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	015a      	lsls	r2, r3, #5
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	4413      	add	r3, r2
 800c964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c968:	461a      	mov	r2, r3
 800c96a:	2300      	movs	r3, #0
 800c96c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	015a      	lsls	r2, r3, #5
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	4413      	add	r3, r2
 800c976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c97a:	461a      	mov	r2, r3
 800c97c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c980:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	3301      	adds	r3, #1
 800c986:	613b      	str	r3, [r7, #16]
 800c988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98a:	693a      	ldr	r2, [r7, #16]
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d3b7      	bcc.n	800c900 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c996:	691b      	ldr	r3, [r3, #16]
 800c998:	68fa      	ldr	r2, [r7, #12]
 800c99a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c99e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c9a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c9b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	699b      	ldr	r3, [r3, #24]
 800c9b6:	f043 0210 	orr.w	r2, r3, #16
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	699a      	ldr	r2, [r3, #24]
 800c9c2:	4b10      	ldr	r3, [pc, #64]	; (800ca04 <USB_DevInit+0x294>)
 800c9c4:	4313      	orrs	r3, r2
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c9ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d005      	beq.n	800c9dc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	699b      	ldr	r3, [r3, #24]
 800c9d4:	f043 0208 	orr.w	r2, r3, #8
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c9dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9de:	2b01      	cmp	r3, #1
 800c9e0:	d107      	bne.n	800c9f2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	699b      	ldr	r3, [r3, #24]
 800c9e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c9ea:	f043 0304 	orr.w	r3, r3, #4
 800c9ee:	687a      	ldr	r2, [r7, #4]
 800c9f0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c9f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3718      	adds	r7, #24
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c9fe:	b004      	add	sp, #16
 800ca00:	4770      	bx	lr
 800ca02:	bf00      	nop
 800ca04:	803c3800 	.word	0x803c3800

0800ca08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b085      	sub	sp, #20
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ca12:	2300      	movs	r3, #0
 800ca14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	3301      	adds	r3, #1
 800ca1a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	4a13      	ldr	r2, [pc, #76]	; (800ca6c <USB_FlushTxFifo+0x64>)
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d901      	bls.n	800ca28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ca24:	2303      	movs	r3, #3
 800ca26:	e01b      	b.n	800ca60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	691b      	ldr	r3, [r3, #16]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	daf2      	bge.n	800ca16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ca30:	2300      	movs	r3, #0
 800ca32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	019b      	lsls	r3, r3, #6
 800ca38:	f043 0220 	orr.w	r2, r3, #32
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	3301      	adds	r3, #1
 800ca44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	4a08      	ldr	r2, [pc, #32]	; (800ca6c <USB_FlushTxFifo+0x64>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d901      	bls.n	800ca52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ca4e:	2303      	movs	r3, #3
 800ca50:	e006      	b.n	800ca60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	691b      	ldr	r3, [r3, #16]
 800ca56:	f003 0320 	and.w	r3, r3, #32
 800ca5a:	2b20      	cmp	r3, #32
 800ca5c:	d0f0      	beq.n	800ca40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ca5e:	2300      	movs	r3, #0
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3714      	adds	r7, #20
 800ca64:	46bd      	mov	sp, r7
 800ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6a:	4770      	bx	lr
 800ca6c:	00030d40 	.word	0x00030d40

0800ca70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ca70:	b480      	push	{r7}
 800ca72:	b085      	sub	sp, #20
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	4a11      	ldr	r2, [pc, #68]	; (800cacc <USB_FlushRxFifo+0x5c>)
 800ca86:	4293      	cmp	r3, r2
 800ca88:	d901      	bls.n	800ca8e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ca8a:	2303      	movs	r3, #3
 800ca8c:	e018      	b.n	800cac0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	691b      	ldr	r3, [r3, #16]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	daf2      	bge.n	800ca7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ca96:	2300      	movs	r3, #0
 800ca98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2210      	movs	r2, #16
 800ca9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	3301      	adds	r3, #1
 800caa4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	4a08      	ldr	r2, [pc, #32]	; (800cacc <USB_FlushRxFifo+0x5c>)
 800caaa:	4293      	cmp	r3, r2
 800caac:	d901      	bls.n	800cab2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800caae:	2303      	movs	r3, #3
 800cab0:	e006      	b.n	800cac0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	691b      	ldr	r3, [r3, #16]
 800cab6:	f003 0310 	and.w	r3, r3, #16
 800caba:	2b10      	cmp	r3, #16
 800cabc:	d0f0      	beq.n	800caa0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cabe:	2300      	movs	r3, #0
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3714      	adds	r7, #20
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr
 800cacc:	00030d40 	.word	0x00030d40

0800cad0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cad0:	b480      	push	{r7}
 800cad2:	b085      	sub	sp, #20
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	460b      	mov	r3, r1
 800cada:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cae6:	681a      	ldr	r2, [r3, #0]
 800cae8:	78fb      	ldrb	r3, [r7, #3]
 800caea:	68f9      	ldr	r1, [r7, #12]
 800caec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800caf0:	4313      	orrs	r3, r2
 800caf2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800caf4:	2300      	movs	r3, #0
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3714      	adds	r7, #20
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr

0800cb02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cb02:	b480      	push	{r7}
 800cb04:	b085      	sub	sp, #20
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	68fa      	ldr	r2, [r7, #12]
 800cb18:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cb1c:	f023 0303 	bic.w	r3, r3, #3
 800cb20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb28:	685b      	ldr	r3, [r3, #4]
 800cb2a:	68fa      	ldr	r2, [r7, #12]
 800cb2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb30:	f043 0302 	orr.w	r3, r3, #2
 800cb34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cb36:	2300      	movs	r3, #0
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3714      	adds	r7, #20
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr

0800cb44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cb44:	b480      	push	{r7}
 800cb46:	b083      	sub	sp, #12
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	695b      	ldr	r3, [r3, #20]
 800cb50:	f003 0301 	and.w	r3, r3, #1
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	370c      	adds	r7, #12
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr

0800cb60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cb60:	b480      	push	{r7}
 800cb62:	b085      	sub	sp, #20
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	3301      	adds	r3, #1
 800cb70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	4a13      	ldr	r2, [pc, #76]	; (800cbc4 <USB_CoreReset+0x64>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d901      	bls.n	800cb7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cb7a:	2303      	movs	r3, #3
 800cb7c:	e01b      	b.n	800cbb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	691b      	ldr	r3, [r3, #16]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	daf2      	bge.n	800cb6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cb86:	2300      	movs	r3, #0
 800cb88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	691b      	ldr	r3, [r3, #16]
 800cb8e:	f043 0201 	orr.w	r2, r3, #1
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	3301      	adds	r3, #1
 800cb9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	4a09      	ldr	r2, [pc, #36]	; (800cbc4 <USB_CoreReset+0x64>)
 800cba0:	4293      	cmp	r3, r2
 800cba2:	d901      	bls.n	800cba8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cba4:	2303      	movs	r3, #3
 800cba6:	e006      	b.n	800cbb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	691b      	ldr	r3, [r3, #16]
 800cbac:	f003 0301 	and.w	r3, r3, #1
 800cbb0:	2b01      	cmp	r3, #1
 800cbb2:	d0f0      	beq.n	800cb96 <USB_CoreReset+0x36>

  return HAL_OK;
 800cbb4:	2300      	movs	r3, #0
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3714      	adds	r7, #20
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr
 800cbc2:	bf00      	nop
 800cbc4:	00030d40 	.word	0x00030d40

0800cbc8 <__assert_func>:
 800cbc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cbca:	4614      	mov	r4, r2
 800cbcc:	461a      	mov	r2, r3
 800cbce:	4b09      	ldr	r3, [pc, #36]	; (800cbf4 <__assert_func+0x2c>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	4605      	mov	r5, r0
 800cbd4:	68d8      	ldr	r0, [r3, #12]
 800cbd6:	b14c      	cbz	r4, 800cbec <__assert_func+0x24>
 800cbd8:	4b07      	ldr	r3, [pc, #28]	; (800cbf8 <__assert_func+0x30>)
 800cbda:	9100      	str	r1, [sp, #0]
 800cbdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cbe0:	4906      	ldr	r1, [pc, #24]	; (800cbfc <__assert_func+0x34>)
 800cbe2:	462b      	mov	r3, r5
 800cbe4:	f000 f814 	bl	800cc10 <fiprintf>
 800cbe8:	f000 fd40 	bl	800d66c <abort>
 800cbec:	4b04      	ldr	r3, [pc, #16]	; (800cc00 <__assert_func+0x38>)
 800cbee:	461c      	mov	r4, r3
 800cbf0:	e7f3      	b.n	800cbda <__assert_func+0x12>
 800cbf2:	bf00      	nop
 800cbf4:	20000018 	.word	0x20000018
 800cbf8:	0800f4c8 	.word	0x0800f4c8
 800cbfc:	0800f4d5 	.word	0x0800f4d5
 800cc00:	0800f503 	.word	0x0800f503

0800cc04 <__errno>:
 800cc04:	4b01      	ldr	r3, [pc, #4]	; (800cc0c <__errno+0x8>)
 800cc06:	6818      	ldr	r0, [r3, #0]
 800cc08:	4770      	bx	lr
 800cc0a:	bf00      	nop
 800cc0c:	20000018 	.word	0x20000018

0800cc10 <fiprintf>:
 800cc10:	b40e      	push	{r1, r2, r3}
 800cc12:	b503      	push	{r0, r1, lr}
 800cc14:	4601      	mov	r1, r0
 800cc16:	ab03      	add	r3, sp, #12
 800cc18:	4805      	ldr	r0, [pc, #20]	; (800cc30 <fiprintf+0x20>)
 800cc1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc1e:	6800      	ldr	r0, [r0, #0]
 800cc20:	9301      	str	r3, [sp, #4]
 800cc22:	f000 f86b 	bl	800ccfc <_vfiprintf_r>
 800cc26:	b002      	add	sp, #8
 800cc28:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc2c:	b003      	add	sp, #12
 800cc2e:	4770      	bx	lr
 800cc30:	20000018 	.word	0x20000018

0800cc34 <__libc_init_array>:
 800cc34:	b570      	push	{r4, r5, r6, lr}
 800cc36:	4d0d      	ldr	r5, [pc, #52]	; (800cc6c <__libc_init_array+0x38>)
 800cc38:	4c0d      	ldr	r4, [pc, #52]	; (800cc70 <__libc_init_array+0x3c>)
 800cc3a:	1b64      	subs	r4, r4, r5
 800cc3c:	10a4      	asrs	r4, r4, #2
 800cc3e:	2600      	movs	r6, #0
 800cc40:	42a6      	cmp	r6, r4
 800cc42:	d109      	bne.n	800cc58 <__libc_init_array+0x24>
 800cc44:	4d0b      	ldr	r5, [pc, #44]	; (800cc74 <__libc_init_array+0x40>)
 800cc46:	4c0c      	ldr	r4, [pc, #48]	; (800cc78 <__libc_init_array+0x44>)
 800cc48:	f001 fad8 	bl	800e1fc <_init>
 800cc4c:	1b64      	subs	r4, r4, r5
 800cc4e:	10a4      	asrs	r4, r4, #2
 800cc50:	2600      	movs	r6, #0
 800cc52:	42a6      	cmp	r6, r4
 800cc54:	d105      	bne.n	800cc62 <__libc_init_array+0x2e>
 800cc56:	bd70      	pop	{r4, r5, r6, pc}
 800cc58:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc5c:	4798      	blx	r3
 800cc5e:	3601      	adds	r6, #1
 800cc60:	e7ee      	b.n	800cc40 <__libc_init_array+0xc>
 800cc62:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc66:	4798      	blx	r3
 800cc68:	3601      	adds	r6, #1
 800cc6a:	e7f2      	b.n	800cc52 <__libc_init_array+0x1e>
 800cc6c:	0800f618 	.word	0x0800f618
 800cc70:	0800f618 	.word	0x0800f618
 800cc74:	0800f618 	.word	0x0800f618
 800cc78:	0800f61c 	.word	0x0800f61c

0800cc7c <memcpy>:
 800cc7c:	440a      	add	r2, r1
 800cc7e:	4291      	cmp	r1, r2
 800cc80:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc84:	d100      	bne.n	800cc88 <memcpy+0xc>
 800cc86:	4770      	bx	lr
 800cc88:	b510      	push	{r4, lr}
 800cc8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc92:	4291      	cmp	r1, r2
 800cc94:	d1f9      	bne.n	800cc8a <memcpy+0xe>
 800cc96:	bd10      	pop	{r4, pc}

0800cc98 <memset>:
 800cc98:	4402      	add	r2, r0
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d100      	bne.n	800cca2 <memset+0xa>
 800cca0:	4770      	bx	lr
 800cca2:	f803 1b01 	strb.w	r1, [r3], #1
 800cca6:	e7f9      	b.n	800cc9c <memset+0x4>

0800cca8 <__sfputc_r>:
 800cca8:	6893      	ldr	r3, [r2, #8]
 800ccaa:	3b01      	subs	r3, #1
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	b410      	push	{r4}
 800ccb0:	6093      	str	r3, [r2, #8]
 800ccb2:	da08      	bge.n	800ccc6 <__sfputc_r+0x1e>
 800ccb4:	6994      	ldr	r4, [r2, #24]
 800ccb6:	42a3      	cmp	r3, r4
 800ccb8:	db01      	blt.n	800ccbe <__sfputc_r+0x16>
 800ccba:	290a      	cmp	r1, #10
 800ccbc:	d103      	bne.n	800ccc6 <__sfputc_r+0x1e>
 800ccbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccc2:	f000 bc13 	b.w	800d4ec <__swbuf_r>
 800ccc6:	6813      	ldr	r3, [r2, #0]
 800ccc8:	1c58      	adds	r0, r3, #1
 800ccca:	6010      	str	r0, [r2, #0]
 800cccc:	7019      	strb	r1, [r3, #0]
 800ccce:	4608      	mov	r0, r1
 800ccd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccd4:	4770      	bx	lr

0800ccd6 <__sfputs_r>:
 800ccd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccd8:	4606      	mov	r6, r0
 800ccda:	460f      	mov	r7, r1
 800ccdc:	4614      	mov	r4, r2
 800ccde:	18d5      	adds	r5, r2, r3
 800cce0:	42ac      	cmp	r4, r5
 800cce2:	d101      	bne.n	800cce8 <__sfputs_r+0x12>
 800cce4:	2000      	movs	r0, #0
 800cce6:	e007      	b.n	800ccf8 <__sfputs_r+0x22>
 800cce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccec:	463a      	mov	r2, r7
 800ccee:	4630      	mov	r0, r6
 800ccf0:	f7ff ffda 	bl	800cca8 <__sfputc_r>
 800ccf4:	1c43      	adds	r3, r0, #1
 800ccf6:	d1f3      	bne.n	800cce0 <__sfputs_r+0xa>
 800ccf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ccfc <_vfiprintf_r>:
 800ccfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd00:	460d      	mov	r5, r1
 800cd02:	b09d      	sub	sp, #116	; 0x74
 800cd04:	4614      	mov	r4, r2
 800cd06:	4698      	mov	r8, r3
 800cd08:	4606      	mov	r6, r0
 800cd0a:	b118      	cbz	r0, 800cd14 <_vfiprintf_r+0x18>
 800cd0c:	6983      	ldr	r3, [r0, #24]
 800cd0e:	b90b      	cbnz	r3, 800cd14 <_vfiprintf_r+0x18>
 800cd10:	f000 fdce 	bl	800d8b0 <__sinit>
 800cd14:	4b89      	ldr	r3, [pc, #548]	; (800cf3c <_vfiprintf_r+0x240>)
 800cd16:	429d      	cmp	r5, r3
 800cd18:	d11b      	bne.n	800cd52 <_vfiprintf_r+0x56>
 800cd1a:	6875      	ldr	r5, [r6, #4]
 800cd1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd1e:	07d9      	lsls	r1, r3, #31
 800cd20:	d405      	bmi.n	800cd2e <_vfiprintf_r+0x32>
 800cd22:	89ab      	ldrh	r3, [r5, #12]
 800cd24:	059a      	lsls	r2, r3, #22
 800cd26:	d402      	bmi.n	800cd2e <_vfiprintf_r+0x32>
 800cd28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd2a:	f000 fe5f 	bl	800d9ec <__retarget_lock_acquire_recursive>
 800cd2e:	89ab      	ldrh	r3, [r5, #12]
 800cd30:	071b      	lsls	r3, r3, #28
 800cd32:	d501      	bpl.n	800cd38 <_vfiprintf_r+0x3c>
 800cd34:	692b      	ldr	r3, [r5, #16]
 800cd36:	b9eb      	cbnz	r3, 800cd74 <_vfiprintf_r+0x78>
 800cd38:	4629      	mov	r1, r5
 800cd3a:	4630      	mov	r0, r6
 800cd3c:	f000 fc28 	bl	800d590 <__swsetup_r>
 800cd40:	b1c0      	cbz	r0, 800cd74 <_vfiprintf_r+0x78>
 800cd42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd44:	07dc      	lsls	r4, r3, #31
 800cd46:	d50e      	bpl.n	800cd66 <_vfiprintf_r+0x6a>
 800cd48:	f04f 30ff 	mov.w	r0, #4294967295
 800cd4c:	b01d      	add	sp, #116	; 0x74
 800cd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd52:	4b7b      	ldr	r3, [pc, #492]	; (800cf40 <_vfiprintf_r+0x244>)
 800cd54:	429d      	cmp	r5, r3
 800cd56:	d101      	bne.n	800cd5c <_vfiprintf_r+0x60>
 800cd58:	68b5      	ldr	r5, [r6, #8]
 800cd5a:	e7df      	b.n	800cd1c <_vfiprintf_r+0x20>
 800cd5c:	4b79      	ldr	r3, [pc, #484]	; (800cf44 <_vfiprintf_r+0x248>)
 800cd5e:	429d      	cmp	r5, r3
 800cd60:	bf08      	it	eq
 800cd62:	68f5      	ldreq	r5, [r6, #12]
 800cd64:	e7da      	b.n	800cd1c <_vfiprintf_r+0x20>
 800cd66:	89ab      	ldrh	r3, [r5, #12]
 800cd68:	0598      	lsls	r0, r3, #22
 800cd6a:	d4ed      	bmi.n	800cd48 <_vfiprintf_r+0x4c>
 800cd6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd6e:	f000 fe3e 	bl	800d9ee <__retarget_lock_release_recursive>
 800cd72:	e7e9      	b.n	800cd48 <_vfiprintf_r+0x4c>
 800cd74:	2300      	movs	r3, #0
 800cd76:	9309      	str	r3, [sp, #36]	; 0x24
 800cd78:	2320      	movs	r3, #32
 800cd7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd7e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd82:	2330      	movs	r3, #48	; 0x30
 800cd84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cf48 <_vfiprintf_r+0x24c>
 800cd88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd8c:	f04f 0901 	mov.w	r9, #1
 800cd90:	4623      	mov	r3, r4
 800cd92:	469a      	mov	sl, r3
 800cd94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd98:	b10a      	cbz	r2, 800cd9e <_vfiprintf_r+0xa2>
 800cd9a:	2a25      	cmp	r2, #37	; 0x25
 800cd9c:	d1f9      	bne.n	800cd92 <_vfiprintf_r+0x96>
 800cd9e:	ebba 0b04 	subs.w	fp, sl, r4
 800cda2:	d00b      	beq.n	800cdbc <_vfiprintf_r+0xc0>
 800cda4:	465b      	mov	r3, fp
 800cda6:	4622      	mov	r2, r4
 800cda8:	4629      	mov	r1, r5
 800cdaa:	4630      	mov	r0, r6
 800cdac:	f7ff ff93 	bl	800ccd6 <__sfputs_r>
 800cdb0:	3001      	adds	r0, #1
 800cdb2:	f000 80aa 	beq.w	800cf0a <_vfiprintf_r+0x20e>
 800cdb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cdb8:	445a      	add	r2, fp
 800cdba:	9209      	str	r2, [sp, #36]	; 0x24
 800cdbc:	f89a 3000 	ldrb.w	r3, [sl]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	f000 80a2 	beq.w	800cf0a <_vfiprintf_r+0x20e>
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	f04f 32ff 	mov.w	r2, #4294967295
 800cdcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdd0:	f10a 0a01 	add.w	sl, sl, #1
 800cdd4:	9304      	str	r3, [sp, #16]
 800cdd6:	9307      	str	r3, [sp, #28]
 800cdd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cddc:	931a      	str	r3, [sp, #104]	; 0x68
 800cdde:	4654      	mov	r4, sl
 800cde0:	2205      	movs	r2, #5
 800cde2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cde6:	4858      	ldr	r0, [pc, #352]	; (800cf48 <_vfiprintf_r+0x24c>)
 800cde8:	f7f3 f9fa 	bl	80001e0 <memchr>
 800cdec:	9a04      	ldr	r2, [sp, #16]
 800cdee:	b9d8      	cbnz	r0, 800ce28 <_vfiprintf_r+0x12c>
 800cdf0:	06d1      	lsls	r1, r2, #27
 800cdf2:	bf44      	itt	mi
 800cdf4:	2320      	movmi	r3, #32
 800cdf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdfa:	0713      	lsls	r3, r2, #28
 800cdfc:	bf44      	itt	mi
 800cdfe:	232b      	movmi	r3, #43	; 0x2b
 800ce00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce04:	f89a 3000 	ldrb.w	r3, [sl]
 800ce08:	2b2a      	cmp	r3, #42	; 0x2a
 800ce0a:	d015      	beq.n	800ce38 <_vfiprintf_r+0x13c>
 800ce0c:	9a07      	ldr	r2, [sp, #28]
 800ce0e:	4654      	mov	r4, sl
 800ce10:	2000      	movs	r0, #0
 800ce12:	f04f 0c0a 	mov.w	ip, #10
 800ce16:	4621      	mov	r1, r4
 800ce18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce1c:	3b30      	subs	r3, #48	; 0x30
 800ce1e:	2b09      	cmp	r3, #9
 800ce20:	d94e      	bls.n	800cec0 <_vfiprintf_r+0x1c4>
 800ce22:	b1b0      	cbz	r0, 800ce52 <_vfiprintf_r+0x156>
 800ce24:	9207      	str	r2, [sp, #28]
 800ce26:	e014      	b.n	800ce52 <_vfiprintf_r+0x156>
 800ce28:	eba0 0308 	sub.w	r3, r0, r8
 800ce2c:	fa09 f303 	lsl.w	r3, r9, r3
 800ce30:	4313      	orrs	r3, r2
 800ce32:	9304      	str	r3, [sp, #16]
 800ce34:	46a2      	mov	sl, r4
 800ce36:	e7d2      	b.n	800cdde <_vfiprintf_r+0xe2>
 800ce38:	9b03      	ldr	r3, [sp, #12]
 800ce3a:	1d19      	adds	r1, r3, #4
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	9103      	str	r1, [sp, #12]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	bfbb      	ittet	lt
 800ce44:	425b      	neglt	r3, r3
 800ce46:	f042 0202 	orrlt.w	r2, r2, #2
 800ce4a:	9307      	strge	r3, [sp, #28]
 800ce4c:	9307      	strlt	r3, [sp, #28]
 800ce4e:	bfb8      	it	lt
 800ce50:	9204      	strlt	r2, [sp, #16]
 800ce52:	7823      	ldrb	r3, [r4, #0]
 800ce54:	2b2e      	cmp	r3, #46	; 0x2e
 800ce56:	d10c      	bne.n	800ce72 <_vfiprintf_r+0x176>
 800ce58:	7863      	ldrb	r3, [r4, #1]
 800ce5a:	2b2a      	cmp	r3, #42	; 0x2a
 800ce5c:	d135      	bne.n	800ceca <_vfiprintf_r+0x1ce>
 800ce5e:	9b03      	ldr	r3, [sp, #12]
 800ce60:	1d1a      	adds	r2, r3, #4
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	9203      	str	r2, [sp, #12]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	bfb8      	it	lt
 800ce6a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce6e:	3402      	adds	r4, #2
 800ce70:	9305      	str	r3, [sp, #20]
 800ce72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cf58 <_vfiprintf_r+0x25c>
 800ce76:	7821      	ldrb	r1, [r4, #0]
 800ce78:	2203      	movs	r2, #3
 800ce7a:	4650      	mov	r0, sl
 800ce7c:	f7f3 f9b0 	bl	80001e0 <memchr>
 800ce80:	b140      	cbz	r0, 800ce94 <_vfiprintf_r+0x198>
 800ce82:	2340      	movs	r3, #64	; 0x40
 800ce84:	eba0 000a 	sub.w	r0, r0, sl
 800ce88:	fa03 f000 	lsl.w	r0, r3, r0
 800ce8c:	9b04      	ldr	r3, [sp, #16]
 800ce8e:	4303      	orrs	r3, r0
 800ce90:	3401      	adds	r4, #1
 800ce92:	9304      	str	r3, [sp, #16]
 800ce94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce98:	482c      	ldr	r0, [pc, #176]	; (800cf4c <_vfiprintf_r+0x250>)
 800ce9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce9e:	2206      	movs	r2, #6
 800cea0:	f7f3 f99e 	bl	80001e0 <memchr>
 800cea4:	2800      	cmp	r0, #0
 800cea6:	d03f      	beq.n	800cf28 <_vfiprintf_r+0x22c>
 800cea8:	4b29      	ldr	r3, [pc, #164]	; (800cf50 <_vfiprintf_r+0x254>)
 800ceaa:	bb1b      	cbnz	r3, 800cef4 <_vfiprintf_r+0x1f8>
 800ceac:	9b03      	ldr	r3, [sp, #12]
 800ceae:	3307      	adds	r3, #7
 800ceb0:	f023 0307 	bic.w	r3, r3, #7
 800ceb4:	3308      	adds	r3, #8
 800ceb6:	9303      	str	r3, [sp, #12]
 800ceb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceba:	443b      	add	r3, r7
 800cebc:	9309      	str	r3, [sp, #36]	; 0x24
 800cebe:	e767      	b.n	800cd90 <_vfiprintf_r+0x94>
 800cec0:	fb0c 3202 	mla	r2, ip, r2, r3
 800cec4:	460c      	mov	r4, r1
 800cec6:	2001      	movs	r0, #1
 800cec8:	e7a5      	b.n	800ce16 <_vfiprintf_r+0x11a>
 800ceca:	2300      	movs	r3, #0
 800cecc:	3401      	adds	r4, #1
 800cece:	9305      	str	r3, [sp, #20]
 800ced0:	4619      	mov	r1, r3
 800ced2:	f04f 0c0a 	mov.w	ip, #10
 800ced6:	4620      	mov	r0, r4
 800ced8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cedc:	3a30      	subs	r2, #48	; 0x30
 800cede:	2a09      	cmp	r2, #9
 800cee0:	d903      	bls.n	800ceea <_vfiprintf_r+0x1ee>
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d0c5      	beq.n	800ce72 <_vfiprintf_r+0x176>
 800cee6:	9105      	str	r1, [sp, #20]
 800cee8:	e7c3      	b.n	800ce72 <_vfiprintf_r+0x176>
 800ceea:	fb0c 2101 	mla	r1, ip, r1, r2
 800ceee:	4604      	mov	r4, r0
 800cef0:	2301      	movs	r3, #1
 800cef2:	e7f0      	b.n	800ced6 <_vfiprintf_r+0x1da>
 800cef4:	ab03      	add	r3, sp, #12
 800cef6:	9300      	str	r3, [sp, #0]
 800cef8:	462a      	mov	r2, r5
 800cefa:	4b16      	ldr	r3, [pc, #88]	; (800cf54 <_vfiprintf_r+0x258>)
 800cefc:	a904      	add	r1, sp, #16
 800cefe:	4630      	mov	r0, r6
 800cf00:	f3af 8000 	nop.w
 800cf04:	4607      	mov	r7, r0
 800cf06:	1c78      	adds	r0, r7, #1
 800cf08:	d1d6      	bne.n	800ceb8 <_vfiprintf_r+0x1bc>
 800cf0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf0c:	07d9      	lsls	r1, r3, #31
 800cf0e:	d405      	bmi.n	800cf1c <_vfiprintf_r+0x220>
 800cf10:	89ab      	ldrh	r3, [r5, #12]
 800cf12:	059a      	lsls	r2, r3, #22
 800cf14:	d402      	bmi.n	800cf1c <_vfiprintf_r+0x220>
 800cf16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf18:	f000 fd69 	bl	800d9ee <__retarget_lock_release_recursive>
 800cf1c:	89ab      	ldrh	r3, [r5, #12]
 800cf1e:	065b      	lsls	r3, r3, #25
 800cf20:	f53f af12 	bmi.w	800cd48 <_vfiprintf_r+0x4c>
 800cf24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf26:	e711      	b.n	800cd4c <_vfiprintf_r+0x50>
 800cf28:	ab03      	add	r3, sp, #12
 800cf2a:	9300      	str	r3, [sp, #0]
 800cf2c:	462a      	mov	r2, r5
 800cf2e:	4b09      	ldr	r3, [pc, #36]	; (800cf54 <_vfiprintf_r+0x258>)
 800cf30:	a904      	add	r1, sp, #16
 800cf32:	4630      	mov	r0, r6
 800cf34:	f000 f880 	bl	800d038 <_printf_i>
 800cf38:	e7e4      	b.n	800cf04 <_vfiprintf_r+0x208>
 800cf3a:	bf00      	nop
 800cf3c:	0800f5d0 	.word	0x0800f5d0
 800cf40:	0800f5f0 	.word	0x0800f5f0
 800cf44:	0800f5b0 	.word	0x0800f5b0
 800cf48:	0800f508 	.word	0x0800f508
 800cf4c:	0800f512 	.word	0x0800f512
 800cf50:	00000000 	.word	0x00000000
 800cf54:	0800ccd7 	.word	0x0800ccd7
 800cf58:	0800f50e 	.word	0x0800f50e

0800cf5c <_printf_common>:
 800cf5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf60:	4616      	mov	r6, r2
 800cf62:	4699      	mov	r9, r3
 800cf64:	688a      	ldr	r2, [r1, #8]
 800cf66:	690b      	ldr	r3, [r1, #16]
 800cf68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	bfb8      	it	lt
 800cf70:	4613      	movlt	r3, r2
 800cf72:	6033      	str	r3, [r6, #0]
 800cf74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cf78:	4607      	mov	r7, r0
 800cf7a:	460c      	mov	r4, r1
 800cf7c:	b10a      	cbz	r2, 800cf82 <_printf_common+0x26>
 800cf7e:	3301      	adds	r3, #1
 800cf80:	6033      	str	r3, [r6, #0]
 800cf82:	6823      	ldr	r3, [r4, #0]
 800cf84:	0699      	lsls	r1, r3, #26
 800cf86:	bf42      	ittt	mi
 800cf88:	6833      	ldrmi	r3, [r6, #0]
 800cf8a:	3302      	addmi	r3, #2
 800cf8c:	6033      	strmi	r3, [r6, #0]
 800cf8e:	6825      	ldr	r5, [r4, #0]
 800cf90:	f015 0506 	ands.w	r5, r5, #6
 800cf94:	d106      	bne.n	800cfa4 <_printf_common+0x48>
 800cf96:	f104 0a19 	add.w	sl, r4, #25
 800cf9a:	68e3      	ldr	r3, [r4, #12]
 800cf9c:	6832      	ldr	r2, [r6, #0]
 800cf9e:	1a9b      	subs	r3, r3, r2
 800cfa0:	42ab      	cmp	r3, r5
 800cfa2:	dc26      	bgt.n	800cff2 <_printf_common+0x96>
 800cfa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cfa8:	1e13      	subs	r3, r2, #0
 800cfaa:	6822      	ldr	r2, [r4, #0]
 800cfac:	bf18      	it	ne
 800cfae:	2301      	movne	r3, #1
 800cfb0:	0692      	lsls	r2, r2, #26
 800cfb2:	d42b      	bmi.n	800d00c <_printf_common+0xb0>
 800cfb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cfb8:	4649      	mov	r1, r9
 800cfba:	4638      	mov	r0, r7
 800cfbc:	47c0      	blx	r8
 800cfbe:	3001      	adds	r0, #1
 800cfc0:	d01e      	beq.n	800d000 <_printf_common+0xa4>
 800cfc2:	6823      	ldr	r3, [r4, #0]
 800cfc4:	68e5      	ldr	r5, [r4, #12]
 800cfc6:	6832      	ldr	r2, [r6, #0]
 800cfc8:	f003 0306 	and.w	r3, r3, #6
 800cfcc:	2b04      	cmp	r3, #4
 800cfce:	bf08      	it	eq
 800cfd0:	1aad      	subeq	r5, r5, r2
 800cfd2:	68a3      	ldr	r3, [r4, #8]
 800cfd4:	6922      	ldr	r2, [r4, #16]
 800cfd6:	bf0c      	ite	eq
 800cfd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cfdc:	2500      	movne	r5, #0
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	bfc4      	itt	gt
 800cfe2:	1a9b      	subgt	r3, r3, r2
 800cfe4:	18ed      	addgt	r5, r5, r3
 800cfe6:	2600      	movs	r6, #0
 800cfe8:	341a      	adds	r4, #26
 800cfea:	42b5      	cmp	r5, r6
 800cfec:	d11a      	bne.n	800d024 <_printf_common+0xc8>
 800cfee:	2000      	movs	r0, #0
 800cff0:	e008      	b.n	800d004 <_printf_common+0xa8>
 800cff2:	2301      	movs	r3, #1
 800cff4:	4652      	mov	r2, sl
 800cff6:	4649      	mov	r1, r9
 800cff8:	4638      	mov	r0, r7
 800cffa:	47c0      	blx	r8
 800cffc:	3001      	adds	r0, #1
 800cffe:	d103      	bne.n	800d008 <_printf_common+0xac>
 800d000:	f04f 30ff 	mov.w	r0, #4294967295
 800d004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d008:	3501      	adds	r5, #1
 800d00a:	e7c6      	b.n	800cf9a <_printf_common+0x3e>
 800d00c:	18e1      	adds	r1, r4, r3
 800d00e:	1c5a      	adds	r2, r3, #1
 800d010:	2030      	movs	r0, #48	; 0x30
 800d012:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d016:	4422      	add	r2, r4
 800d018:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d01c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d020:	3302      	adds	r3, #2
 800d022:	e7c7      	b.n	800cfb4 <_printf_common+0x58>
 800d024:	2301      	movs	r3, #1
 800d026:	4622      	mov	r2, r4
 800d028:	4649      	mov	r1, r9
 800d02a:	4638      	mov	r0, r7
 800d02c:	47c0      	blx	r8
 800d02e:	3001      	adds	r0, #1
 800d030:	d0e6      	beq.n	800d000 <_printf_common+0xa4>
 800d032:	3601      	adds	r6, #1
 800d034:	e7d9      	b.n	800cfea <_printf_common+0x8e>
	...

0800d038 <_printf_i>:
 800d038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d03c:	7e0f      	ldrb	r7, [r1, #24]
 800d03e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d040:	2f78      	cmp	r7, #120	; 0x78
 800d042:	4691      	mov	r9, r2
 800d044:	4680      	mov	r8, r0
 800d046:	460c      	mov	r4, r1
 800d048:	469a      	mov	sl, r3
 800d04a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d04e:	d807      	bhi.n	800d060 <_printf_i+0x28>
 800d050:	2f62      	cmp	r7, #98	; 0x62
 800d052:	d80a      	bhi.n	800d06a <_printf_i+0x32>
 800d054:	2f00      	cmp	r7, #0
 800d056:	f000 80d8 	beq.w	800d20a <_printf_i+0x1d2>
 800d05a:	2f58      	cmp	r7, #88	; 0x58
 800d05c:	f000 80a3 	beq.w	800d1a6 <_printf_i+0x16e>
 800d060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d064:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d068:	e03a      	b.n	800d0e0 <_printf_i+0xa8>
 800d06a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d06e:	2b15      	cmp	r3, #21
 800d070:	d8f6      	bhi.n	800d060 <_printf_i+0x28>
 800d072:	a101      	add	r1, pc, #4	; (adr r1, 800d078 <_printf_i+0x40>)
 800d074:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d078:	0800d0d1 	.word	0x0800d0d1
 800d07c:	0800d0e5 	.word	0x0800d0e5
 800d080:	0800d061 	.word	0x0800d061
 800d084:	0800d061 	.word	0x0800d061
 800d088:	0800d061 	.word	0x0800d061
 800d08c:	0800d061 	.word	0x0800d061
 800d090:	0800d0e5 	.word	0x0800d0e5
 800d094:	0800d061 	.word	0x0800d061
 800d098:	0800d061 	.word	0x0800d061
 800d09c:	0800d061 	.word	0x0800d061
 800d0a0:	0800d061 	.word	0x0800d061
 800d0a4:	0800d1f1 	.word	0x0800d1f1
 800d0a8:	0800d115 	.word	0x0800d115
 800d0ac:	0800d1d3 	.word	0x0800d1d3
 800d0b0:	0800d061 	.word	0x0800d061
 800d0b4:	0800d061 	.word	0x0800d061
 800d0b8:	0800d213 	.word	0x0800d213
 800d0bc:	0800d061 	.word	0x0800d061
 800d0c0:	0800d115 	.word	0x0800d115
 800d0c4:	0800d061 	.word	0x0800d061
 800d0c8:	0800d061 	.word	0x0800d061
 800d0cc:	0800d1db 	.word	0x0800d1db
 800d0d0:	682b      	ldr	r3, [r5, #0]
 800d0d2:	1d1a      	adds	r2, r3, #4
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	602a      	str	r2, [r5, #0]
 800d0d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d0dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	e0a3      	b.n	800d22c <_printf_i+0x1f4>
 800d0e4:	6820      	ldr	r0, [r4, #0]
 800d0e6:	6829      	ldr	r1, [r5, #0]
 800d0e8:	0606      	lsls	r6, r0, #24
 800d0ea:	f101 0304 	add.w	r3, r1, #4
 800d0ee:	d50a      	bpl.n	800d106 <_printf_i+0xce>
 800d0f0:	680e      	ldr	r6, [r1, #0]
 800d0f2:	602b      	str	r3, [r5, #0]
 800d0f4:	2e00      	cmp	r6, #0
 800d0f6:	da03      	bge.n	800d100 <_printf_i+0xc8>
 800d0f8:	232d      	movs	r3, #45	; 0x2d
 800d0fa:	4276      	negs	r6, r6
 800d0fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d100:	485e      	ldr	r0, [pc, #376]	; (800d27c <_printf_i+0x244>)
 800d102:	230a      	movs	r3, #10
 800d104:	e019      	b.n	800d13a <_printf_i+0x102>
 800d106:	680e      	ldr	r6, [r1, #0]
 800d108:	602b      	str	r3, [r5, #0]
 800d10a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d10e:	bf18      	it	ne
 800d110:	b236      	sxthne	r6, r6
 800d112:	e7ef      	b.n	800d0f4 <_printf_i+0xbc>
 800d114:	682b      	ldr	r3, [r5, #0]
 800d116:	6820      	ldr	r0, [r4, #0]
 800d118:	1d19      	adds	r1, r3, #4
 800d11a:	6029      	str	r1, [r5, #0]
 800d11c:	0601      	lsls	r1, r0, #24
 800d11e:	d501      	bpl.n	800d124 <_printf_i+0xec>
 800d120:	681e      	ldr	r6, [r3, #0]
 800d122:	e002      	b.n	800d12a <_printf_i+0xf2>
 800d124:	0646      	lsls	r6, r0, #25
 800d126:	d5fb      	bpl.n	800d120 <_printf_i+0xe8>
 800d128:	881e      	ldrh	r6, [r3, #0]
 800d12a:	4854      	ldr	r0, [pc, #336]	; (800d27c <_printf_i+0x244>)
 800d12c:	2f6f      	cmp	r7, #111	; 0x6f
 800d12e:	bf0c      	ite	eq
 800d130:	2308      	moveq	r3, #8
 800d132:	230a      	movne	r3, #10
 800d134:	2100      	movs	r1, #0
 800d136:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d13a:	6865      	ldr	r5, [r4, #4]
 800d13c:	60a5      	str	r5, [r4, #8]
 800d13e:	2d00      	cmp	r5, #0
 800d140:	bfa2      	ittt	ge
 800d142:	6821      	ldrge	r1, [r4, #0]
 800d144:	f021 0104 	bicge.w	r1, r1, #4
 800d148:	6021      	strge	r1, [r4, #0]
 800d14a:	b90e      	cbnz	r6, 800d150 <_printf_i+0x118>
 800d14c:	2d00      	cmp	r5, #0
 800d14e:	d04d      	beq.n	800d1ec <_printf_i+0x1b4>
 800d150:	4615      	mov	r5, r2
 800d152:	fbb6 f1f3 	udiv	r1, r6, r3
 800d156:	fb03 6711 	mls	r7, r3, r1, r6
 800d15a:	5dc7      	ldrb	r7, [r0, r7]
 800d15c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d160:	4637      	mov	r7, r6
 800d162:	42bb      	cmp	r3, r7
 800d164:	460e      	mov	r6, r1
 800d166:	d9f4      	bls.n	800d152 <_printf_i+0x11a>
 800d168:	2b08      	cmp	r3, #8
 800d16a:	d10b      	bne.n	800d184 <_printf_i+0x14c>
 800d16c:	6823      	ldr	r3, [r4, #0]
 800d16e:	07de      	lsls	r6, r3, #31
 800d170:	d508      	bpl.n	800d184 <_printf_i+0x14c>
 800d172:	6923      	ldr	r3, [r4, #16]
 800d174:	6861      	ldr	r1, [r4, #4]
 800d176:	4299      	cmp	r1, r3
 800d178:	bfde      	ittt	le
 800d17a:	2330      	movle	r3, #48	; 0x30
 800d17c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d180:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d184:	1b52      	subs	r2, r2, r5
 800d186:	6122      	str	r2, [r4, #16]
 800d188:	f8cd a000 	str.w	sl, [sp]
 800d18c:	464b      	mov	r3, r9
 800d18e:	aa03      	add	r2, sp, #12
 800d190:	4621      	mov	r1, r4
 800d192:	4640      	mov	r0, r8
 800d194:	f7ff fee2 	bl	800cf5c <_printf_common>
 800d198:	3001      	adds	r0, #1
 800d19a:	d14c      	bne.n	800d236 <_printf_i+0x1fe>
 800d19c:	f04f 30ff 	mov.w	r0, #4294967295
 800d1a0:	b004      	add	sp, #16
 800d1a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1a6:	4835      	ldr	r0, [pc, #212]	; (800d27c <_printf_i+0x244>)
 800d1a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d1ac:	6829      	ldr	r1, [r5, #0]
 800d1ae:	6823      	ldr	r3, [r4, #0]
 800d1b0:	f851 6b04 	ldr.w	r6, [r1], #4
 800d1b4:	6029      	str	r1, [r5, #0]
 800d1b6:	061d      	lsls	r5, r3, #24
 800d1b8:	d514      	bpl.n	800d1e4 <_printf_i+0x1ac>
 800d1ba:	07df      	lsls	r7, r3, #31
 800d1bc:	bf44      	itt	mi
 800d1be:	f043 0320 	orrmi.w	r3, r3, #32
 800d1c2:	6023      	strmi	r3, [r4, #0]
 800d1c4:	b91e      	cbnz	r6, 800d1ce <_printf_i+0x196>
 800d1c6:	6823      	ldr	r3, [r4, #0]
 800d1c8:	f023 0320 	bic.w	r3, r3, #32
 800d1cc:	6023      	str	r3, [r4, #0]
 800d1ce:	2310      	movs	r3, #16
 800d1d0:	e7b0      	b.n	800d134 <_printf_i+0xfc>
 800d1d2:	6823      	ldr	r3, [r4, #0]
 800d1d4:	f043 0320 	orr.w	r3, r3, #32
 800d1d8:	6023      	str	r3, [r4, #0]
 800d1da:	2378      	movs	r3, #120	; 0x78
 800d1dc:	4828      	ldr	r0, [pc, #160]	; (800d280 <_printf_i+0x248>)
 800d1de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d1e2:	e7e3      	b.n	800d1ac <_printf_i+0x174>
 800d1e4:	0659      	lsls	r1, r3, #25
 800d1e6:	bf48      	it	mi
 800d1e8:	b2b6      	uxthmi	r6, r6
 800d1ea:	e7e6      	b.n	800d1ba <_printf_i+0x182>
 800d1ec:	4615      	mov	r5, r2
 800d1ee:	e7bb      	b.n	800d168 <_printf_i+0x130>
 800d1f0:	682b      	ldr	r3, [r5, #0]
 800d1f2:	6826      	ldr	r6, [r4, #0]
 800d1f4:	6961      	ldr	r1, [r4, #20]
 800d1f6:	1d18      	adds	r0, r3, #4
 800d1f8:	6028      	str	r0, [r5, #0]
 800d1fa:	0635      	lsls	r5, r6, #24
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	d501      	bpl.n	800d204 <_printf_i+0x1cc>
 800d200:	6019      	str	r1, [r3, #0]
 800d202:	e002      	b.n	800d20a <_printf_i+0x1d2>
 800d204:	0670      	lsls	r0, r6, #25
 800d206:	d5fb      	bpl.n	800d200 <_printf_i+0x1c8>
 800d208:	8019      	strh	r1, [r3, #0]
 800d20a:	2300      	movs	r3, #0
 800d20c:	6123      	str	r3, [r4, #16]
 800d20e:	4615      	mov	r5, r2
 800d210:	e7ba      	b.n	800d188 <_printf_i+0x150>
 800d212:	682b      	ldr	r3, [r5, #0]
 800d214:	1d1a      	adds	r2, r3, #4
 800d216:	602a      	str	r2, [r5, #0]
 800d218:	681d      	ldr	r5, [r3, #0]
 800d21a:	6862      	ldr	r2, [r4, #4]
 800d21c:	2100      	movs	r1, #0
 800d21e:	4628      	mov	r0, r5
 800d220:	f7f2 ffde 	bl	80001e0 <memchr>
 800d224:	b108      	cbz	r0, 800d22a <_printf_i+0x1f2>
 800d226:	1b40      	subs	r0, r0, r5
 800d228:	6060      	str	r0, [r4, #4]
 800d22a:	6863      	ldr	r3, [r4, #4]
 800d22c:	6123      	str	r3, [r4, #16]
 800d22e:	2300      	movs	r3, #0
 800d230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d234:	e7a8      	b.n	800d188 <_printf_i+0x150>
 800d236:	6923      	ldr	r3, [r4, #16]
 800d238:	462a      	mov	r2, r5
 800d23a:	4649      	mov	r1, r9
 800d23c:	4640      	mov	r0, r8
 800d23e:	47d0      	blx	sl
 800d240:	3001      	adds	r0, #1
 800d242:	d0ab      	beq.n	800d19c <_printf_i+0x164>
 800d244:	6823      	ldr	r3, [r4, #0]
 800d246:	079b      	lsls	r3, r3, #30
 800d248:	d413      	bmi.n	800d272 <_printf_i+0x23a>
 800d24a:	68e0      	ldr	r0, [r4, #12]
 800d24c:	9b03      	ldr	r3, [sp, #12]
 800d24e:	4298      	cmp	r0, r3
 800d250:	bfb8      	it	lt
 800d252:	4618      	movlt	r0, r3
 800d254:	e7a4      	b.n	800d1a0 <_printf_i+0x168>
 800d256:	2301      	movs	r3, #1
 800d258:	4632      	mov	r2, r6
 800d25a:	4649      	mov	r1, r9
 800d25c:	4640      	mov	r0, r8
 800d25e:	47d0      	blx	sl
 800d260:	3001      	adds	r0, #1
 800d262:	d09b      	beq.n	800d19c <_printf_i+0x164>
 800d264:	3501      	adds	r5, #1
 800d266:	68e3      	ldr	r3, [r4, #12]
 800d268:	9903      	ldr	r1, [sp, #12]
 800d26a:	1a5b      	subs	r3, r3, r1
 800d26c:	42ab      	cmp	r3, r5
 800d26e:	dcf2      	bgt.n	800d256 <_printf_i+0x21e>
 800d270:	e7eb      	b.n	800d24a <_printf_i+0x212>
 800d272:	2500      	movs	r5, #0
 800d274:	f104 0619 	add.w	r6, r4, #25
 800d278:	e7f5      	b.n	800d266 <_printf_i+0x22e>
 800d27a:	bf00      	nop
 800d27c:	0800f519 	.word	0x0800f519
 800d280:	0800f52a 	.word	0x0800f52a

0800d284 <iprintf>:
 800d284:	b40f      	push	{r0, r1, r2, r3}
 800d286:	4b0a      	ldr	r3, [pc, #40]	; (800d2b0 <iprintf+0x2c>)
 800d288:	b513      	push	{r0, r1, r4, lr}
 800d28a:	681c      	ldr	r4, [r3, #0]
 800d28c:	b124      	cbz	r4, 800d298 <iprintf+0x14>
 800d28e:	69a3      	ldr	r3, [r4, #24]
 800d290:	b913      	cbnz	r3, 800d298 <iprintf+0x14>
 800d292:	4620      	mov	r0, r4
 800d294:	f000 fb0c 	bl	800d8b0 <__sinit>
 800d298:	ab05      	add	r3, sp, #20
 800d29a:	9a04      	ldr	r2, [sp, #16]
 800d29c:	68a1      	ldr	r1, [r4, #8]
 800d29e:	9301      	str	r3, [sp, #4]
 800d2a0:	4620      	mov	r0, r4
 800d2a2:	f7ff fd2b 	bl	800ccfc <_vfiprintf_r>
 800d2a6:	b002      	add	sp, #8
 800d2a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2ac:	b004      	add	sp, #16
 800d2ae:	4770      	bx	lr
 800d2b0:	20000018 	.word	0x20000018

0800d2b4 <_puts_r>:
 800d2b4:	b570      	push	{r4, r5, r6, lr}
 800d2b6:	460e      	mov	r6, r1
 800d2b8:	4605      	mov	r5, r0
 800d2ba:	b118      	cbz	r0, 800d2c4 <_puts_r+0x10>
 800d2bc:	6983      	ldr	r3, [r0, #24]
 800d2be:	b90b      	cbnz	r3, 800d2c4 <_puts_r+0x10>
 800d2c0:	f000 faf6 	bl	800d8b0 <__sinit>
 800d2c4:	69ab      	ldr	r3, [r5, #24]
 800d2c6:	68ac      	ldr	r4, [r5, #8]
 800d2c8:	b913      	cbnz	r3, 800d2d0 <_puts_r+0x1c>
 800d2ca:	4628      	mov	r0, r5
 800d2cc:	f000 faf0 	bl	800d8b0 <__sinit>
 800d2d0:	4b2c      	ldr	r3, [pc, #176]	; (800d384 <_puts_r+0xd0>)
 800d2d2:	429c      	cmp	r4, r3
 800d2d4:	d120      	bne.n	800d318 <_puts_r+0x64>
 800d2d6:	686c      	ldr	r4, [r5, #4]
 800d2d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d2da:	07db      	lsls	r3, r3, #31
 800d2dc:	d405      	bmi.n	800d2ea <_puts_r+0x36>
 800d2de:	89a3      	ldrh	r3, [r4, #12]
 800d2e0:	0598      	lsls	r0, r3, #22
 800d2e2:	d402      	bmi.n	800d2ea <_puts_r+0x36>
 800d2e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2e6:	f000 fb81 	bl	800d9ec <__retarget_lock_acquire_recursive>
 800d2ea:	89a3      	ldrh	r3, [r4, #12]
 800d2ec:	0719      	lsls	r1, r3, #28
 800d2ee:	d51d      	bpl.n	800d32c <_puts_r+0x78>
 800d2f0:	6923      	ldr	r3, [r4, #16]
 800d2f2:	b1db      	cbz	r3, 800d32c <_puts_r+0x78>
 800d2f4:	3e01      	subs	r6, #1
 800d2f6:	68a3      	ldr	r3, [r4, #8]
 800d2f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d2fc:	3b01      	subs	r3, #1
 800d2fe:	60a3      	str	r3, [r4, #8]
 800d300:	bb39      	cbnz	r1, 800d352 <_puts_r+0x9e>
 800d302:	2b00      	cmp	r3, #0
 800d304:	da38      	bge.n	800d378 <_puts_r+0xc4>
 800d306:	4622      	mov	r2, r4
 800d308:	210a      	movs	r1, #10
 800d30a:	4628      	mov	r0, r5
 800d30c:	f000 f8ee 	bl	800d4ec <__swbuf_r>
 800d310:	3001      	adds	r0, #1
 800d312:	d011      	beq.n	800d338 <_puts_r+0x84>
 800d314:	250a      	movs	r5, #10
 800d316:	e011      	b.n	800d33c <_puts_r+0x88>
 800d318:	4b1b      	ldr	r3, [pc, #108]	; (800d388 <_puts_r+0xd4>)
 800d31a:	429c      	cmp	r4, r3
 800d31c:	d101      	bne.n	800d322 <_puts_r+0x6e>
 800d31e:	68ac      	ldr	r4, [r5, #8]
 800d320:	e7da      	b.n	800d2d8 <_puts_r+0x24>
 800d322:	4b1a      	ldr	r3, [pc, #104]	; (800d38c <_puts_r+0xd8>)
 800d324:	429c      	cmp	r4, r3
 800d326:	bf08      	it	eq
 800d328:	68ec      	ldreq	r4, [r5, #12]
 800d32a:	e7d5      	b.n	800d2d8 <_puts_r+0x24>
 800d32c:	4621      	mov	r1, r4
 800d32e:	4628      	mov	r0, r5
 800d330:	f000 f92e 	bl	800d590 <__swsetup_r>
 800d334:	2800      	cmp	r0, #0
 800d336:	d0dd      	beq.n	800d2f4 <_puts_r+0x40>
 800d338:	f04f 35ff 	mov.w	r5, #4294967295
 800d33c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d33e:	07da      	lsls	r2, r3, #31
 800d340:	d405      	bmi.n	800d34e <_puts_r+0x9a>
 800d342:	89a3      	ldrh	r3, [r4, #12]
 800d344:	059b      	lsls	r3, r3, #22
 800d346:	d402      	bmi.n	800d34e <_puts_r+0x9a>
 800d348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d34a:	f000 fb50 	bl	800d9ee <__retarget_lock_release_recursive>
 800d34e:	4628      	mov	r0, r5
 800d350:	bd70      	pop	{r4, r5, r6, pc}
 800d352:	2b00      	cmp	r3, #0
 800d354:	da04      	bge.n	800d360 <_puts_r+0xac>
 800d356:	69a2      	ldr	r2, [r4, #24]
 800d358:	429a      	cmp	r2, r3
 800d35a:	dc06      	bgt.n	800d36a <_puts_r+0xb6>
 800d35c:	290a      	cmp	r1, #10
 800d35e:	d004      	beq.n	800d36a <_puts_r+0xb6>
 800d360:	6823      	ldr	r3, [r4, #0]
 800d362:	1c5a      	adds	r2, r3, #1
 800d364:	6022      	str	r2, [r4, #0]
 800d366:	7019      	strb	r1, [r3, #0]
 800d368:	e7c5      	b.n	800d2f6 <_puts_r+0x42>
 800d36a:	4622      	mov	r2, r4
 800d36c:	4628      	mov	r0, r5
 800d36e:	f000 f8bd 	bl	800d4ec <__swbuf_r>
 800d372:	3001      	adds	r0, #1
 800d374:	d1bf      	bne.n	800d2f6 <_puts_r+0x42>
 800d376:	e7df      	b.n	800d338 <_puts_r+0x84>
 800d378:	6823      	ldr	r3, [r4, #0]
 800d37a:	250a      	movs	r5, #10
 800d37c:	1c5a      	adds	r2, r3, #1
 800d37e:	6022      	str	r2, [r4, #0]
 800d380:	701d      	strb	r5, [r3, #0]
 800d382:	e7db      	b.n	800d33c <_puts_r+0x88>
 800d384:	0800f5d0 	.word	0x0800f5d0
 800d388:	0800f5f0 	.word	0x0800f5f0
 800d38c:	0800f5b0 	.word	0x0800f5b0

0800d390 <puts>:
 800d390:	4b02      	ldr	r3, [pc, #8]	; (800d39c <puts+0xc>)
 800d392:	4601      	mov	r1, r0
 800d394:	6818      	ldr	r0, [r3, #0]
 800d396:	f7ff bf8d 	b.w	800d2b4 <_puts_r>
 800d39a:	bf00      	nop
 800d39c:	20000018 	.word	0x20000018

0800d3a0 <siprintf>:
 800d3a0:	b40e      	push	{r1, r2, r3}
 800d3a2:	b500      	push	{lr}
 800d3a4:	b09c      	sub	sp, #112	; 0x70
 800d3a6:	ab1d      	add	r3, sp, #116	; 0x74
 800d3a8:	9002      	str	r0, [sp, #8]
 800d3aa:	9006      	str	r0, [sp, #24]
 800d3ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d3b0:	4809      	ldr	r0, [pc, #36]	; (800d3d8 <siprintf+0x38>)
 800d3b2:	9107      	str	r1, [sp, #28]
 800d3b4:	9104      	str	r1, [sp, #16]
 800d3b6:	4909      	ldr	r1, [pc, #36]	; (800d3dc <siprintf+0x3c>)
 800d3b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3bc:	9105      	str	r1, [sp, #20]
 800d3be:	6800      	ldr	r0, [r0, #0]
 800d3c0:	9301      	str	r3, [sp, #4]
 800d3c2:	a902      	add	r1, sp, #8
 800d3c4:	f000 fd06 	bl	800ddd4 <_svfiprintf_r>
 800d3c8:	9b02      	ldr	r3, [sp, #8]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	701a      	strb	r2, [r3, #0]
 800d3ce:	b01c      	add	sp, #112	; 0x70
 800d3d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3d4:	b003      	add	sp, #12
 800d3d6:	4770      	bx	lr
 800d3d8:	20000018 	.word	0x20000018
 800d3dc:	ffff0208 	.word	0xffff0208

0800d3e0 <strncpy>:
 800d3e0:	b510      	push	{r4, lr}
 800d3e2:	3901      	subs	r1, #1
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	b132      	cbz	r2, 800d3f6 <strncpy+0x16>
 800d3e8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d3ec:	f803 4b01 	strb.w	r4, [r3], #1
 800d3f0:	3a01      	subs	r2, #1
 800d3f2:	2c00      	cmp	r4, #0
 800d3f4:	d1f7      	bne.n	800d3e6 <strncpy+0x6>
 800d3f6:	441a      	add	r2, r3
 800d3f8:	2100      	movs	r1, #0
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	d100      	bne.n	800d400 <strncpy+0x20>
 800d3fe:	bd10      	pop	{r4, pc}
 800d400:	f803 1b01 	strb.w	r1, [r3], #1
 800d404:	e7f9      	b.n	800d3fa <strncpy+0x1a>

0800d406 <strstr>:
 800d406:	780a      	ldrb	r2, [r1, #0]
 800d408:	b570      	push	{r4, r5, r6, lr}
 800d40a:	b96a      	cbnz	r2, 800d428 <strstr+0x22>
 800d40c:	bd70      	pop	{r4, r5, r6, pc}
 800d40e:	429a      	cmp	r2, r3
 800d410:	d109      	bne.n	800d426 <strstr+0x20>
 800d412:	460c      	mov	r4, r1
 800d414:	4605      	mov	r5, r0
 800d416:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d0f6      	beq.n	800d40c <strstr+0x6>
 800d41e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d422:	429e      	cmp	r6, r3
 800d424:	d0f7      	beq.n	800d416 <strstr+0x10>
 800d426:	3001      	adds	r0, #1
 800d428:	7803      	ldrb	r3, [r0, #0]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d1ef      	bne.n	800d40e <strstr+0x8>
 800d42e:	4618      	mov	r0, r3
 800d430:	e7ec      	b.n	800d40c <strstr+0x6>
	...

0800d434 <strtok>:
 800d434:	4b16      	ldr	r3, [pc, #88]	; (800d490 <strtok+0x5c>)
 800d436:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d438:	681e      	ldr	r6, [r3, #0]
 800d43a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800d43c:	4605      	mov	r5, r0
 800d43e:	b9fc      	cbnz	r4, 800d480 <strtok+0x4c>
 800d440:	2050      	movs	r0, #80	; 0x50
 800d442:	9101      	str	r1, [sp, #4]
 800d444:	f000 fb3a 	bl	800dabc <malloc>
 800d448:	9901      	ldr	r1, [sp, #4]
 800d44a:	65b0      	str	r0, [r6, #88]	; 0x58
 800d44c:	4602      	mov	r2, r0
 800d44e:	b920      	cbnz	r0, 800d45a <strtok+0x26>
 800d450:	4b10      	ldr	r3, [pc, #64]	; (800d494 <strtok+0x60>)
 800d452:	4811      	ldr	r0, [pc, #68]	; (800d498 <strtok+0x64>)
 800d454:	2157      	movs	r1, #87	; 0x57
 800d456:	f7ff fbb7 	bl	800cbc8 <__assert_func>
 800d45a:	e9c0 4400 	strd	r4, r4, [r0]
 800d45e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d462:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d466:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800d46a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800d46e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800d472:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800d476:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800d47a:	6184      	str	r4, [r0, #24]
 800d47c:	7704      	strb	r4, [r0, #28]
 800d47e:	6244      	str	r4, [r0, #36]	; 0x24
 800d480:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800d482:	2301      	movs	r3, #1
 800d484:	4628      	mov	r0, r5
 800d486:	b002      	add	sp, #8
 800d488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d48c:	f000 b806 	b.w	800d49c <__strtok_r>
 800d490:	20000018 	.word	0x20000018
 800d494:	0800f53b 	.word	0x0800f53b
 800d498:	0800f552 	.word	0x0800f552

0800d49c <__strtok_r>:
 800d49c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d49e:	b908      	cbnz	r0, 800d4a4 <__strtok_r+0x8>
 800d4a0:	6810      	ldr	r0, [r2, #0]
 800d4a2:	b188      	cbz	r0, 800d4c8 <__strtok_r+0x2c>
 800d4a4:	4604      	mov	r4, r0
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d4ac:	460f      	mov	r7, r1
 800d4ae:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d4b2:	b91e      	cbnz	r6, 800d4bc <__strtok_r+0x20>
 800d4b4:	b965      	cbnz	r5, 800d4d0 <__strtok_r+0x34>
 800d4b6:	6015      	str	r5, [r2, #0]
 800d4b8:	4628      	mov	r0, r5
 800d4ba:	e005      	b.n	800d4c8 <__strtok_r+0x2c>
 800d4bc:	42b5      	cmp	r5, r6
 800d4be:	d1f6      	bne.n	800d4ae <__strtok_r+0x12>
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d1f0      	bne.n	800d4a6 <__strtok_r+0xa>
 800d4c4:	6014      	str	r4, [r2, #0]
 800d4c6:	7003      	strb	r3, [r0, #0]
 800d4c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4ca:	461c      	mov	r4, r3
 800d4cc:	e00c      	b.n	800d4e8 <__strtok_r+0x4c>
 800d4ce:	b915      	cbnz	r5, 800d4d6 <__strtok_r+0x3a>
 800d4d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d4d4:	460e      	mov	r6, r1
 800d4d6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d4da:	42ab      	cmp	r3, r5
 800d4dc:	d1f7      	bne.n	800d4ce <__strtok_r+0x32>
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d0f3      	beq.n	800d4ca <__strtok_r+0x2e>
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d4e8:	6014      	str	r4, [r2, #0]
 800d4ea:	e7ed      	b.n	800d4c8 <__strtok_r+0x2c>

0800d4ec <__swbuf_r>:
 800d4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ee:	460e      	mov	r6, r1
 800d4f0:	4614      	mov	r4, r2
 800d4f2:	4605      	mov	r5, r0
 800d4f4:	b118      	cbz	r0, 800d4fe <__swbuf_r+0x12>
 800d4f6:	6983      	ldr	r3, [r0, #24]
 800d4f8:	b90b      	cbnz	r3, 800d4fe <__swbuf_r+0x12>
 800d4fa:	f000 f9d9 	bl	800d8b0 <__sinit>
 800d4fe:	4b21      	ldr	r3, [pc, #132]	; (800d584 <__swbuf_r+0x98>)
 800d500:	429c      	cmp	r4, r3
 800d502:	d12b      	bne.n	800d55c <__swbuf_r+0x70>
 800d504:	686c      	ldr	r4, [r5, #4]
 800d506:	69a3      	ldr	r3, [r4, #24]
 800d508:	60a3      	str	r3, [r4, #8]
 800d50a:	89a3      	ldrh	r3, [r4, #12]
 800d50c:	071a      	lsls	r2, r3, #28
 800d50e:	d52f      	bpl.n	800d570 <__swbuf_r+0x84>
 800d510:	6923      	ldr	r3, [r4, #16]
 800d512:	b36b      	cbz	r3, 800d570 <__swbuf_r+0x84>
 800d514:	6923      	ldr	r3, [r4, #16]
 800d516:	6820      	ldr	r0, [r4, #0]
 800d518:	1ac0      	subs	r0, r0, r3
 800d51a:	6963      	ldr	r3, [r4, #20]
 800d51c:	b2f6      	uxtb	r6, r6
 800d51e:	4283      	cmp	r3, r0
 800d520:	4637      	mov	r7, r6
 800d522:	dc04      	bgt.n	800d52e <__swbuf_r+0x42>
 800d524:	4621      	mov	r1, r4
 800d526:	4628      	mov	r0, r5
 800d528:	f000 f92e 	bl	800d788 <_fflush_r>
 800d52c:	bb30      	cbnz	r0, 800d57c <__swbuf_r+0x90>
 800d52e:	68a3      	ldr	r3, [r4, #8]
 800d530:	3b01      	subs	r3, #1
 800d532:	60a3      	str	r3, [r4, #8]
 800d534:	6823      	ldr	r3, [r4, #0]
 800d536:	1c5a      	adds	r2, r3, #1
 800d538:	6022      	str	r2, [r4, #0]
 800d53a:	701e      	strb	r6, [r3, #0]
 800d53c:	6963      	ldr	r3, [r4, #20]
 800d53e:	3001      	adds	r0, #1
 800d540:	4283      	cmp	r3, r0
 800d542:	d004      	beq.n	800d54e <__swbuf_r+0x62>
 800d544:	89a3      	ldrh	r3, [r4, #12]
 800d546:	07db      	lsls	r3, r3, #31
 800d548:	d506      	bpl.n	800d558 <__swbuf_r+0x6c>
 800d54a:	2e0a      	cmp	r6, #10
 800d54c:	d104      	bne.n	800d558 <__swbuf_r+0x6c>
 800d54e:	4621      	mov	r1, r4
 800d550:	4628      	mov	r0, r5
 800d552:	f000 f919 	bl	800d788 <_fflush_r>
 800d556:	b988      	cbnz	r0, 800d57c <__swbuf_r+0x90>
 800d558:	4638      	mov	r0, r7
 800d55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d55c:	4b0a      	ldr	r3, [pc, #40]	; (800d588 <__swbuf_r+0x9c>)
 800d55e:	429c      	cmp	r4, r3
 800d560:	d101      	bne.n	800d566 <__swbuf_r+0x7a>
 800d562:	68ac      	ldr	r4, [r5, #8]
 800d564:	e7cf      	b.n	800d506 <__swbuf_r+0x1a>
 800d566:	4b09      	ldr	r3, [pc, #36]	; (800d58c <__swbuf_r+0xa0>)
 800d568:	429c      	cmp	r4, r3
 800d56a:	bf08      	it	eq
 800d56c:	68ec      	ldreq	r4, [r5, #12]
 800d56e:	e7ca      	b.n	800d506 <__swbuf_r+0x1a>
 800d570:	4621      	mov	r1, r4
 800d572:	4628      	mov	r0, r5
 800d574:	f000 f80c 	bl	800d590 <__swsetup_r>
 800d578:	2800      	cmp	r0, #0
 800d57a:	d0cb      	beq.n	800d514 <__swbuf_r+0x28>
 800d57c:	f04f 37ff 	mov.w	r7, #4294967295
 800d580:	e7ea      	b.n	800d558 <__swbuf_r+0x6c>
 800d582:	bf00      	nop
 800d584:	0800f5d0 	.word	0x0800f5d0
 800d588:	0800f5f0 	.word	0x0800f5f0
 800d58c:	0800f5b0 	.word	0x0800f5b0

0800d590 <__swsetup_r>:
 800d590:	4b32      	ldr	r3, [pc, #200]	; (800d65c <__swsetup_r+0xcc>)
 800d592:	b570      	push	{r4, r5, r6, lr}
 800d594:	681d      	ldr	r5, [r3, #0]
 800d596:	4606      	mov	r6, r0
 800d598:	460c      	mov	r4, r1
 800d59a:	b125      	cbz	r5, 800d5a6 <__swsetup_r+0x16>
 800d59c:	69ab      	ldr	r3, [r5, #24]
 800d59e:	b913      	cbnz	r3, 800d5a6 <__swsetup_r+0x16>
 800d5a0:	4628      	mov	r0, r5
 800d5a2:	f000 f985 	bl	800d8b0 <__sinit>
 800d5a6:	4b2e      	ldr	r3, [pc, #184]	; (800d660 <__swsetup_r+0xd0>)
 800d5a8:	429c      	cmp	r4, r3
 800d5aa:	d10f      	bne.n	800d5cc <__swsetup_r+0x3c>
 800d5ac:	686c      	ldr	r4, [r5, #4]
 800d5ae:	89a3      	ldrh	r3, [r4, #12]
 800d5b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5b4:	0719      	lsls	r1, r3, #28
 800d5b6:	d42c      	bmi.n	800d612 <__swsetup_r+0x82>
 800d5b8:	06dd      	lsls	r5, r3, #27
 800d5ba:	d411      	bmi.n	800d5e0 <__swsetup_r+0x50>
 800d5bc:	2309      	movs	r3, #9
 800d5be:	6033      	str	r3, [r6, #0]
 800d5c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d5c4:	81a3      	strh	r3, [r4, #12]
 800d5c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ca:	e03e      	b.n	800d64a <__swsetup_r+0xba>
 800d5cc:	4b25      	ldr	r3, [pc, #148]	; (800d664 <__swsetup_r+0xd4>)
 800d5ce:	429c      	cmp	r4, r3
 800d5d0:	d101      	bne.n	800d5d6 <__swsetup_r+0x46>
 800d5d2:	68ac      	ldr	r4, [r5, #8]
 800d5d4:	e7eb      	b.n	800d5ae <__swsetup_r+0x1e>
 800d5d6:	4b24      	ldr	r3, [pc, #144]	; (800d668 <__swsetup_r+0xd8>)
 800d5d8:	429c      	cmp	r4, r3
 800d5da:	bf08      	it	eq
 800d5dc:	68ec      	ldreq	r4, [r5, #12]
 800d5de:	e7e6      	b.n	800d5ae <__swsetup_r+0x1e>
 800d5e0:	0758      	lsls	r0, r3, #29
 800d5e2:	d512      	bpl.n	800d60a <__swsetup_r+0x7a>
 800d5e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5e6:	b141      	cbz	r1, 800d5fa <__swsetup_r+0x6a>
 800d5e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5ec:	4299      	cmp	r1, r3
 800d5ee:	d002      	beq.n	800d5f6 <__swsetup_r+0x66>
 800d5f0:	4630      	mov	r0, r6
 800d5f2:	f000 fa85 	bl	800db00 <_free_r>
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	6363      	str	r3, [r4, #52]	; 0x34
 800d5fa:	89a3      	ldrh	r3, [r4, #12]
 800d5fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d600:	81a3      	strh	r3, [r4, #12]
 800d602:	2300      	movs	r3, #0
 800d604:	6063      	str	r3, [r4, #4]
 800d606:	6923      	ldr	r3, [r4, #16]
 800d608:	6023      	str	r3, [r4, #0]
 800d60a:	89a3      	ldrh	r3, [r4, #12]
 800d60c:	f043 0308 	orr.w	r3, r3, #8
 800d610:	81a3      	strh	r3, [r4, #12]
 800d612:	6923      	ldr	r3, [r4, #16]
 800d614:	b94b      	cbnz	r3, 800d62a <__swsetup_r+0x9a>
 800d616:	89a3      	ldrh	r3, [r4, #12]
 800d618:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d61c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d620:	d003      	beq.n	800d62a <__swsetup_r+0x9a>
 800d622:	4621      	mov	r1, r4
 800d624:	4630      	mov	r0, r6
 800d626:	f000 fa09 	bl	800da3c <__smakebuf_r>
 800d62a:	89a0      	ldrh	r0, [r4, #12]
 800d62c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d630:	f010 0301 	ands.w	r3, r0, #1
 800d634:	d00a      	beq.n	800d64c <__swsetup_r+0xbc>
 800d636:	2300      	movs	r3, #0
 800d638:	60a3      	str	r3, [r4, #8]
 800d63a:	6963      	ldr	r3, [r4, #20]
 800d63c:	425b      	negs	r3, r3
 800d63e:	61a3      	str	r3, [r4, #24]
 800d640:	6923      	ldr	r3, [r4, #16]
 800d642:	b943      	cbnz	r3, 800d656 <__swsetup_r+0xc6>
 800d644:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d648:	d1ba      	bne.n	800d5c0 <__swsetup_r+0x30>
 800d64a:	bd70      	pop	{r4, r5, r6, pc}
 800d64c:	0781      	lsls	r1, r0, #30
 800d64e:	bf58      	it	pl
 800d650:	6963      	ldrpl	r3, [r4, #20]
 800d652:	60a3      	str	r3, [r4, #8]
 800d654:	e7f4      	b.n	800d640 <__swsetup_r+0xb0>
 800d656:	2000      	movs	r0, #0
 800d658:	e7f7      	b.n	800d64a <__swsetup_r+0xba>
 800d65a:	bf00      	nop
 800d65c:	20000018 	.word	0x20000018
 800d660:	0800f5d0 	.word	0x0800f5d0
 800d664:	0800f5f0 	.word	0x0800f5f0
 800d668:	0800f5b0 	.word	0x0800f5b0

0800d66c <abort>:
 800d66c:	b508      	push	{r3, lr}
 800d66e:	2006      	movs	r0, #6
 800d670:	f000 fce8 	bl	800e044 <raise>
 800d674:	2001      	movs	r0, #1
 800d676:	f7f7 fec1 	bl	80053fc <_exit>
	...

0800d67c <__sflush_r>:
 800d67c:	898a      	ldrh	r2, [r1, #12]
 800d67e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d682:	4605      	mov	r5, r0
 800d684:	0710      	lsls	r0, r2, #28
 800d686:	460c      	mov	r4, r1
 800d688:	d458      	bmi.n	800d73c <__sflush_r+0xc0>
 800d68a:	684b      	ldr	r3, [r1, #4]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	dc05      	bgt.n	800d69c <__sflush_r+0x20>
 800d690:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d692:	2b00      	cmp	r3, #0
 800d694:	dc02      	bgt.n	800d69c <__sflush_r+0x20>
 800d696:	2000      	movs	r0, #0
 800d698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d69c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d69e:	2e00      	cmp	r6, #0
 800d6a0:	d0f9      	beq.n	800d696 <__sflush_r+0x1a>
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d6a8:	682f      	ldr	r7, [r5, #0]
 800d6aa:	602b      	str	r3, [r5, #0]
 800d6ac:	d032      	beq.n	800d714 <__sflush_r+0x98>
 800d6ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d6b0:	89a3      	ldrh	r3, [r4, #12]
 800d6b2:	075a      	lsls	r2, r3, #29
 800d6b4:	d505      	bpl.n	800d6c2 <__sflush_r+0x46>
 800d6b6:	6863      	ldr	r3, [r4, #4]
 800d6b8:	1ac0      	subs	r0, r0, r3
 800d6ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d6bc:	b10b      	cbz	r3, 800d6c2 <__sflush_r+0x46>
 800d6be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d6c0:	1ac0      	subs	r0, r0, r3
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	4602      	mov	r2, r0
 800d6c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6c8:	6a21      	ldr	r1, [r4, #32]
 800d6ca:	4628      	mov	r0, r5
 800d6cc:	47b0      	blx	r6
 800d6ce:	1c43      	adds	r3, r0, #1
 800d6d0:	89a3      	ldrh	r3, [r4, #12]
 800d6d2:	d106      	bne.n	800d6e2 <__sflush_r+0x66>
 800d6d4:	6829      	ldr	r1, [r5, #0]
 800d6d6:	291d      	cmp	r1, #29
 800d6d8:	d82c      	bhi.n	800d734 <__sflush_r+0xb8>
 800d6da:	4a2a      	ldr	r2, [pc, #168]	; (800d784 <__sflush_r+0x108>)
 800d6dc:	40ca      	lsrs	r2, r1
 800d6de:	07d6      	lsls	r6, r2, #31
 800d6e0:	d528      	bpl.n	800d734 <__sflush_r+0xb8>
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	6062      	str	r2, [r4, #4]
 800d6e6:	04d9      	lsls	r1, r3, #19
 800d6e8:	6922      	ldr	r2, [r4, #16]
 800d6ea:	6022      	str	r2, [r4, #0]
 800d6ec:	d504      	bpl.n	800d6f8 <__sflush_r+0x7c>
 800d6ee:	1c42      	adds	r2, r0, #1
 800d6f0:	d101      	bne.n	800d6f6 <__sflush_r+0x7a>
 800d6f2:	682b      	ldr	r3, [r5, #0]
 800d6f4:	b903      	cbnz	r3, 800d6f8 <__sflush_r+0x7c>
 800d6f6:	6560      	str	r0, [r4, #84]	; 0x54
 800d6f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6fa:	602f      	str	r7, [r5, #0]
 800d6fc:	2900      	cmp	r1, #0
 800d6fe:	d0ca      	beq.n	800d696 <__sflush_r+0x1a>
 800d700:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d704:	4299      	cmp	r1, r3
 800d706:	d002      	beq.n	800d70e <__sflush_r+0x92>
 800d708:	4628      	mov	r0, r5
 800d70a:	f000 f9f9 	bl	800db00 <_free_r>
 800d70e:	2000      	movs	r0, #0
 800d710:	6360      	str	r0, [r4, #52]	; 0x34
 800d712:	e7c1      	b.n	800d698 <__sflush_r+0x1c>
 800d714:	6a21      	ldr	r1, [r4, #32]
 800d716:	2301      	movs	r3, #1
 800d718:	4628      	mov	r0, r5
 800d71a:	47b0      	blx	r6
 800d71c:	1c41      	adds	r1, r0, #1
 800d71e:	d1c7      	bne.n	800d6b0 <__sflush_r+0x34>
 800d720:	682b      	ldr	r3, [r5, #0]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d0c4      	beq.n	800d6b0 <__sflush_r+0x34>
 800d726:	2b1d      	cmp	r3, #29
 800d728:	d001      	beq.n	800d72e <__sflush_r+0xb2>
 800d72a:	2b16      	cmp	r3, #22
 800d72c:	d101      	bne.n	800d732 <__sflush_r+0xb6>
 800d72e:	602f      	str	r7, [r5, #0]
 800d730:	e7b1      	b.n	800d696 <__sflush_r+0x1a>
 800d732:	89a3      	ldrh	r3, [r4, #12]
 800d734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d738:	81a3      	strh	r3, [r4, #12]
 800d73a:	e7ad      	b.n	800d698 <__sflush_r+0x1c>
 800d73c:	690f      	ldr	r7, [r1, #16]
 800d73e:	2f00      	cmp	r7, #0
 800d740:	d0a9      	beq.n	800d696 <__sflush_r+0x1a>
 800d742:	0793      	lsls	r3, r2, #30
 800d744:	680e      	ldr	r6, [r1, #0]
 800d746:	bf08      	it	eq
 800d748:	694b      	ldreq	r3, [r1, #20]
 800d74a:	600f      	str	r7, [r1, #0]
 800d74c:	bf18      	it	ne
 800d74e:	2300      	movne	r3, #0
 800d750:	eba6 0807 	sub.w	r8, r6, r7
 800d754:	608b      	str	r3, [r1, #8]
 800d756:	f1b8 0f00 	cmp.w	r8, #0
 800d75a:	dd9c      	ble.n	800d696 <__sflush_r+0x1a>
 800d75c:	6a21      	ldr	r1, [r4, #32]
 800d75e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d760:	4643      	mov	r3, r8
 800d762:	463a      	mov	r2, r7
 800d764:	4628      	mov	r0, r5
 800d766:	47b0      	blx	r6
 800d768:	2800      	cmp	r0, #0
 800d76a:	dc06      	bgt.n	800d77a <__sflush_r+0xfe>
 800d76c:	89a3      	ldrh	r3, [r4, #12]
 800d76e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d772:	81a3      	strh	r3, [r4, #12]
 800d774:	f04f 30ff 	mov.w	r0, #4294967295
 800d778:	e78e      	b.n	800d698 <__sflush_r+0x1c>
 800d77a:	4407      	add	r7, r0
 800d77c:	eba8 0800 	sub.w	r8, r8, r0
 800d780:	e7e9      	b.n	800d756 <__sflush_r+0xda>
 800d782:	bf00      	nop
 800d784:	20400001 	.word	0x20400001

0800d788 <_fflush_r>:
 800d788:	b538      	push	{r3, r4, r5, lr}
 800d78a:	690b      	ldr	r3, [r1, #16]
 800d78c:	4605      	mov	r5, r0
 800d78e:	460c      	mov	r4, r1
 800d790:	b913      	cbnz	r3, 800d798 <_fflush_r+0x10>
 800d792:	2500      	movs	r5, #0
 800d794:	4628      	mov	r0, r5
 800d796:	bd38      	pop	{r3, r4, r5, pc}
 800d798:	b118      	cbz	r0, 800d7a2 <_fflush_r+0x1a>
 800d79a:	6983      	ldr	r3, [r0, #24]
 800d79c:	b90b      	cbnz	r3, 800d7a2 <_fflush_r+0x1a>
 800d79e:	f000 f887 	bl	800d8b0 <__sinit>
 800d7a2:	4b14      	ldr	r3, [pc, #80]	; (800d7f4 <_fflush_r+0x6c>)
 800d7a4:	429c      	cmp	r4, r3
 800d7a6:	d11b      	bne.n	800d7e0 <_fflush_r+0x58>
 800d7a8:	686c      	ldr	r4, [r5, #4]
 800d7aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d0ef      	beq.n	800d792 <_fflush_r+0xa>
 800d7b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d7b4:	07d0      	lsls	r0, r2, #31
 800d7b6:	d404      	bmi.n	800d7c2 <_fflush_r+0x3a>
 800d7b8:	0599      	lsls	r1, r3, #22
 800d7ba:	d402      	bmi.n	800d7c2 <_fflush_r+0x3a>
 800d7bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7be:	f000 f915 	bl	800d9ec <__retarget_lock_acquire_recursive>
 800d7c2:	4628      	mov	r0, r5
 800d7c4:	4621      	mov	r1, r4
 800d7c6:	f7ff ff59 	bl	800d67c <__sflush_r>
 800d7ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d7cc:	07da      	lsls	r2, r3, #31
 800d7ce:	4605      	mov	r5, r0
 800d7d0:	d4e0      	bmi.n	800d794 <_fflush_r+0xc>
 800d7d2:	89a3      	ldrh	r3, [r4, #12]
 800d7d4:	059b      	lsls	r3, r3, #22
 800d7d6:	d4dd      	bmi.n	800d794 <_fflush_r+0xc>
 800d7d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7da:	f000 f908 	bl	800d9ee <__retarget_lock_release_recursive>
 800d7de:	e7d9      	b.n	800d794 <_fflush_r+0xc>
 800d7e0:	4b05      	ldr	r3, [pc, #20]	; (800d7f8 <_fflush_r+0x70>)
 800d7e2:	429c      	cmp	r4, r3
 800d7e4:	d101      	bne.n	800d7ea <_fflush_r+0x62>
 800d7e6:	68ac      	ldr	r4, [r5, #8]
 800d7e8:	e7df      	b.n	800d7aa <_fflush_r+0x22>
 800d7ea:	4b04      	ldr	r3, [pc, #16]	; (800d7fc <_fflush_r+0x74>)
 800d7ec:	429c      	cmp	r4, r3
 800d7ee:	bf08      	it	eq
 800d7f0:	68ec      	ldreq	r4, [r5, #12]
 800d7f2:	e7da      	b.n	800d7aa <_fflush_r+0x22>
 800d7f4:	0800f5d0 	.word	0x0800f5d0
 800d7f8:	0800f5f0 	.word	0x0800f5f0
 800d7fc:	0800f5b0 	.word	0x0800f5b0

0800d800 <std>:
 800d800:	2300      	movs	r3, #0
 800d802:	b510      	push	{r4, lr}
 800d804:	4604      	mov	r4, r0
 800d806:	e9c0 3300 	strd	r3, r3, [r0]
 800d80a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d80e:	6083      	str	r3, [r0, #8]
 800d810:	8181      	strh	r1, [r0, #12]
 800d812:	6643      	str	r3, [r0, #100]	; 0x64
 800d814:	81c2      	strh	r2, [r0, #14]
 800d816:	6183      	str	r3, [r0, #24]
 800d818:	4619      	mov	r1, r3
 800d81a:	2208      	movs	r2, #8
 800d81c:	305c      	adds	r0, #92	; 0x5c
 800d81e:	f7ff fa3b 	bl	800cc98 <memset>
 800d822:	4b05      	ldr	r3, [pc, #20]	; (800d838 <std+0x38>)
 800d824:	6263      	str	r3, [r4, #36]	; 0x24
 800d826:	4b05      	ldr	r3, [pc, #20]	; (800d83c <std+0x3c>)
 800d828:	62a3      	str	r3, [r4, #40]	; 0x28
 800d82a:	4b05      	ldr	r3, [pc, #20]	; (800d840 <std+0x40>)
 800d82c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d82e:	4b05      	ldr	r3, [pc, #20]	; (800d844 <std+0x44>)
 800d830:	6224      	str	r4, [r4, #32]
 800d832:	6323      	str	r3, [r4, #48]	; 0x30
 800d834:	bd10      	pop	{r4, pc}
 800d836:	bf00      	nop
 800d838:	0800e07d 	.word	0x0800e07d
 800d83c:	0800e09f 	.word	0x0800e09f
 800d840:	0800e0d7 	.word	0x0800e0d7
 800d844:	0800e0fb 	.word	0x0800e0fb

0800d848 <_cleanup_r>:
 800d848:	4901      	ldr	r1, [pc, #4]	; (800d850 <_cleanup_r+0x8>)
 800d84a:	f000 b8af 	b.w	800d9ac <_fwalk_reent>
 800d84e:	bf00      	nop
 800d850:	0800d789 	.word	0x0800d789

0800d854 <__sfmoreglue>:
 800d854:	b570      	push	{r4, r5, r6, lr}
 800d856:	2268      	movs	r2, #104	; 0x68
 800d858:	1e4d      	subs	r5, r1, #1
 800d85a:	4355      	muls	r5, r2
 800d85c:	460e      	mov	r6, r1
 800d85e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d862:	f000 f9b9 	bl	800dbd8 <_malloc_r>
 800d866:	4604      	mov	r4, r0
 800d868:	b140      	cbz	r0, 800d87c <__sfmoreglue+0x28>
 800d86a:	2100      	movs	r1, #0
 800d86c:	e9c0 1600 	strd	r1, r6, [r0]
 800d870:	300c      	adds	r0, #12
 800d872:	60a0      	str	r0, [r4, #8]
 800d874:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d878:	f7ff fa0e 	bl	800cc98 <memset>
 800d87c:	4620      	mov	r0, r4
 800d87e:	bd70      	pop	{r4, r5, r6, pc}

0800d880 <__sfp_lock_acquire>:
 800d880:	4801      	ldr	r0, [pc, #4]	; (800d888 <__sfp_lock_acquire+0x8>)
 800d882:	f000 b8b3 	b.w	800d9ec <__retarget_lock_acquire_recursive>
 800d886:	bf00      	nop
 800d888:	20001209 	.word	0x20001209

0800d88c <__sfp_lock_release>:
 800d88c:	4801      	ldr	r0, [pc, #4]	; (800d894 <__sfp_lock_release+0x8>)
 800d88e:	f000 b8ae 	b.w	800d9ee <__retarget_lock_release_recursive>
 800d892:	bf00      	nop
 800d894:	20001209 	.word	0x20001209

0800d898 <__sinit_lock_acquire>:
 800d898:	4801      	ldr	r0, [pc, #4]	; (800d8a0 <__sinit_lock_acquire+0x8>)
 800d89a:	f000 b8a7 	b.w	800d9ec <__retarget_lock_acquire_recursive>
 800d89e:	bf00      	nop
 800d8a0:	2000120a 	.word	0x2000120a

0800d8a4 <__sinit_lock_release>:
 800d8a4:	4801      	ldr	r0, [pc, #4]	; (800d8ac <__sinit_lock_release+0x8>)
 800d8a6:	f000 b8a2 	b.w	800d9ee <__retarget_lock_release_recursive>
 800d8aa:	bf00      	nop
 800d8ac:	2000120a 	.word	0x2000120a

0800d8b0 <__sinit>:
 800d8b0:	b510      	push	{r4, lr}
 800d8b2:	4604      	mov	r4, r0
 800d8b4:	f7ff fff0 	bl	800d898 <__sinit_lock_acquire>
 800d8b8:	69a3      	ldr	r3, [r4, #24]
 800d8ba:	b11b      	cbz	r3, 800d8c4 <__sinit+0x14>
 800d8bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8c0:	f7ff bff0 	b.w	800d8a4 <__sinit_lock_release>
 800d8c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d8c8:	6523      	str	r3, [r4, #80]	; 0x50
 800d8ca:	4b13      	ldr	r3, [pc, #76]	; (800d918 <__sinit+0x68>)
 800d8cc:	4a13      	ldr	r2, [pc, #76]	; (800d91c <__sinit+0x6c>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	62a2      	str	r2, [r4, #40]	; 0x28
 800d8d2:	42a3      	cmp	r3, r4
 800d8d4:	bf04      	itt	eq
 800d8d6:	2301      	moveq	r3, #1
 800d8d8:	61a3      	streq	r3, [r4, #24]
 800d8da:	4620      	mov	r0, r4
 800d8dc:	f000 f820 	bl	800d920 <__sfp>
 800d8e0:	6060      	str	r0, [r4, #4]
 800d8e2:	4620      	mov	r0, r4
 800d8e4:	f000 f81c 	bl	800d920 <__sfp>
 800d8e8:	60a0      	str	r0, [r4, #8]
 800d8ea:	4620      	mov	r0, r4
 800d8ec:	f000 f818 	bl	800d920 <__sfp>
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	60e0      	str	r0, [r4, #12]
 800d8f4:	2104      	movs	r1, #4
 800d8f6:	6860      	ldr	r0, [r4, #4]
 800d8f8:	f7ff ff82 	bl	800d800 <std>
 800d8fc:	68a0      	ldr	r0, [r4, #8]
 800d8fe:	2201      	movs	r2, #1
 800d900:	2109      	movs	r1, #9
 800d902:	f7ff ff7d 	bl	800d800 <std>
 800d906:	68e0      	ldr	r0, [r4, #12]
 800d908:	2202      	movs	r2, #2
 800d90a:	2112      	movs	r1, #18
 800d90c:	f7ff ff78 	bl	800d800 <std>
 800d910:	2301      	movs	r3, #1
 800d912:	61a3      	str	r3, [r4, #24]
 800d914:	e7d2      	b.n	800d8bc <__sinit+0xc>
 800d916:	bf00      	nop
 800d918:	0800f504 	.word	0x0800f504
 800d91c:	0800d849 	.word	0x0800d849

0800d920 <__sfp>:
 800d920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d922:	4607      	mov	r7, r0
 800d924:	f7ff ffac 	bl	800d880 <__sfp_lock_acquire>
 800d928:	4b1e      	ldr	r3, [pc, #120]	; (800d9a4 <__sfp+0x84>)
 800d92a:	681e      	ldr	r6, [r3, #0]
 800d92c:	69b3      	ldr	r3, [r6, #24]
 800d92e:	b913      	cbnz	r3, 800d936 <__sfp+0x16>
 800d930:	4630      	mov	r0, r6
 800d932:	f7ff ffbd 	bl	800d8b0 <__sinit>
 800d936:	3648      	adds	r6, #72	; 0x48
 800d938:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d93c:	3b01      	subs	r3, #1
 800d93e:	d503      	bpl.n	800d948 <__sfp+0x28>
 800d940:	6833      	ldr	r3, [r6, #0]
 800d942:	b30b      	cbz	r3, 800d988 <__sfp+0x68>
 800d944:	6836      	ldr	r6, [r6, #0]
 800d946:	e7f7      	b.n	800d938 <__sfp+0x18>
 800d948:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d94c:	b9d5      	cbnz	r5, 800d984 <__sfp+0x64>
 800d94e:	4b16      	ldr	r3, [pc, #88]	; (800d9a8 <__sfp+0x88>)
 800d950:	60e3      	str	r3, [r4, #12]
 800d952:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d956:	6665      	str	r5, [r4, #100]	; 0x64
 800d958:	f000 f847 	bl	800d9ea <__retarget_lock_init_recursive>
 800d95c:	f7ff ff96 	bl	800d88c <__sfp_lock_release>
 800d960:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d964:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d968:	6025      	str	r5, [r4, #0]
 800d96a:	61a5      	str	r5, [r4, #24]
 800d96c:	2208      	movs	r2, #8
 800d96e:	4629      	mov	r1, r5
 800d970:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d974:	f7ff f990 	bl	800cc98 <memset>
 800d978:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d97c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d980:	4620      	mov	r0, r4
 800d982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d984:	3468      	adds	r4, #104	; 0x68
 800d986:	e7d9      	b.n	800d93c <__sfp+0x1c>
 800d988:	2104      	movs	r1, #4
 800d98a:	4638      	mov	r0, r7
 800d98c:	f7ff ff62 	bl	800d854 <__sfmoreglue>
 800d990:	4604      	mov	r4, r0
 800d992:	6030      	str	r0, [r6, #0]
 800d994:	2800      	cmp	r0, #0
 800d996:	d1d5      	bne.n	800d944 <__sfp+0x24>
 800d998:	f7ff ff78 	bl	800d88c <__sfp_lock_release>
 800d99c:	230c      	movs	r3, #12
 800d99e:	603b      	str	r3, [r7, #0]
 800d9a0:	e7ee      	b.n	800d980 <__sfp+0x60>
 800d9a2:	bf00      	nop
 800d9a4:	0800f504 	.word	0x0800f504
 800d9a8:	ffff0001 	.word	0xffff0001

0800d9ac <_fwalk_reent>:
 800d9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9b0:	4606      	mov	r6, r0
 800d9b2:	4688      	mov	r8, r1
 800d9b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d9b8:	2700      	movs	r7, #0
 800d9ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d9be:	f1b9 0901 	subs.w	r9, r9, #1
 800d9c2:	d505      	bpl.n	800d9d0 <_fwalk_reent+0x24>
 800d9c4:	6824      	ldr	r4, [r4, #0]
 800d9c6:	2c00      	cmp	r4, #0
 800d9c8:	d1f7      	bne.n	800d9ba <_fwalk_reent+0xe>
 800d9ca:	4638      	mov	r0, r7
 800d9cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9d0:	89ab      	ldrh	r3, [r5, #12]
 800d9d2:	2b01      	cmp	r3, #1
 800d9d4:	d907      	bls.n	800d9e6 <_fwalk_reent+0x3a>
 800d9d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d9da:	3301      	adds	r3, #1
 800d9dc:	d003      	beq.n	800d9e6 <_fwalk_reent+0x3a>
 800d9de:	4629      	mov	r1, r5
 800d9e0:	4630      	mov	r0, r6
 800d9e2:	47c0      	blx	r8
 800d9e4:	4307      	orrs	r7, r0
 800d9e6:	3568      	adds	r5, #104	; 0x68
 800d9e8:	e7e9      	b.n	800d9be <_fwalk_reent+0x12>

0800d9ea <__retarget_lock_init_recursive>:
 800d9ea:	4770      	bx	lr

0800d9ec <__retarget_lock_acquire_recursive>:
 800d9ec:	4770      	bx	lr

0800d9ee <__retarget_lock_release_recursive>:
 800d9ee:	4770      	bx	lr

0800d9f0 <__swhatbuf_r>:
 800d9f0:	b570      	push	{r4, r5, r6, lr}
 800d9f2:	460e      	mov	r6, r1
 800d9f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9f8:	2900      	cmp	r1, #0
 800d9fa:	b096      	sub	sp, #88	; 0x58
 800d9fc:	4614      	mov	r4, r2
 800d9fe:	461d      	mov	r5, r3
 800da00:	da08      	bge.n	800da14 <__swhatbuf_r+0x24>
 800da02:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800da06:	2200      	movs	r2, #0
 800da08:	602a      	str	r2, [r5, #0]
 800da0a:	061a      	lsls	r2, r3, #24
 800da0c:	d410      	bmi.n	800da30 <__swhatbuf_r+0x40>
 800da0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da12:	e00e      	b.n	800da32 <__swhatbuf_r+0x42>
 800da14:	466a      	mov	r2, sp
 800da16:	f000 fb97 	bl	800e148 <_fstat_r>
 800da1a:	2800      	cmp	r0, #0
 800da1c:	dbf1      	blt.n	800da02 <__swhatbuf_r+0x12>
 800da1e:	9a01      	ldr	r2, [sp, #4]
 800da20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800da24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800da28:	425a      	negs	r2, r3
 800da2a:	415a      	adcs	r2, r3
 800da2c:	602a      	str	r2, [r5, #0]
 800da2e:	e7ee      	b.n	800da0e <__swhatbuf_r+0x1e>
 800da30:	2340      	movs	r3, #64	; 0x40
 800da32:	2000      	movs	r0, #0
 800da34:	6023      	str	r3, [r4, #0]
 800da36:	b016      	add	sp, #88	; 0x58
 800da38:	bd70      	pop	{r4, r5, r6, pc}
	...

0800da3c <__smakebuf_r>:
 800da3c:	898b      	ldrh	r3, [r1, #12]
 800da3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800da40:	079d      	lsls	r5, r3, #30
 800da42:	4606      	mov	r6, r0
 800da44:	460c      	mov	r4, r1
 800da46:	d507      	bpl.n	800da58 <__smakebuf_r+0x1c>
 800da48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800da4c:	6023      	str	r3, [r4, #0]
 800da4e:	6123      	str	r3, [r4, #16]
 800da50:	2301      	movs	r3, #1
 800da52:	6163      	str	r3, [r4, #20]
 800da54:	b002      	add	sp, #8
 800da56:	bd70      	pop	{r4, r5, r6, pc}
 800da58:	ab01      	add	r3, sp, #4
 800da5a:	466a      	mov	r2, sp
 800da5c:	f7ff ffc8 	bl	800d9f0 <__swhatbuf_r>
 800da60:	9900      	ldr	r1, [sp, #0]
 800da62:	4605      	mov	r5, r0
 800da64:	4630      	mov	r0, r6
 800da66:	f000 f8b7 	bl	800dbd8 <_malloc_r>
 800da6a:	b948      	cbnz	r0, 800da80 <__smakebuf_r+0x44>
 800da6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da70:	059a      	lsls	r2, r3, #22
 800da72:	d4ef      	bmi.n	800da54 <__smakebuf_r+0x18>
 800da74:	f023 0303 	bic.w	r3, r3, #3
 800da78:	f043 0302 	orr.w	r3, r3, #2
 800da7c:	81a3      	strh	r3, [r4, #12]
 800da7e:	e7e3      	b.n	800da48 <__smakebuf_r+0xc>
 800da80:	4b0d      	ldr	r3, [pc, #52]	; (800dab8 <__smakebuf_r+0x7c>)
 800da82:	62b3      	str	r3, [r6, #40]	; 0x28
 800da84:	89a3      	ldrh	r3, [r4, #12]
 800da86:	6020      	str	r0, [r4, #0]
 800da88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da8c:	81a3      	strh	r3, [r4, #12]
 800da8e:	9b00      	ldr	r3, [sp, #0]
 800da90:	6163      	str	r3, [r4, #20]
 800da92:	9b01      	ldr	r3, [sp, #4]
 800da94:	6120      	str	r0, [r4, #16]
 800da96:	b15b      	cbz	r3, 800dab0 <__smakebuf_r+0x74>
 800da98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da9c:	4630      	mov	r0, r6
 800da9e:	f000 fb65 	bl	800e16c <_isatty_r>
 800daa2:	b128      	cbz	r0, 800dab0 <__smakebuf_r+0x74>
 800daa4:	89a3      	ldrh	r3, [r4, #12]
 800daa6:	f023 0303 	bic.w	r3, r3, #3
 800daaa:	f043 0301 	orr.w	r3, r3, #1
 800daae:	81a3      	strh	r3, [r4, #12]
 800dab0:	89a0      	ldrh	r0, [r4, #12]
 800dab2:	4305      	orrs	r5, r0
 800dab4:	81a5      	strh	r5, [r4, #12]
 800dab6:	e7cd      	b.n	800da54 <__smakebuf_r+0x18>
 800dab8:	0800d849 	.word	0x0800d849

0800dabc <malloc>:
 800dabc:	4b02      	ldr	r3, [pc, #8]	; (800dac8 <malloc+0xc>)
 800dabe:	4601      	mov	r1, r0
 800dac0:	6818      	ldr	r0, [r3, #0]
 800dac2:	f000 b889 	b.w	800dbd8 <_malloc_r>
 800dac6:	bf00      	nop
 800dac8:	20000018 	.word	0x20000018

0800dacc <memmove>:
 800dacc:	4288      	cmp	r0, r1
 800dace:	b510      	push	{r4, lr}
 800dad0:	eb01 0402 	add.w	r4, r1, r2
 800dad4:	d902      	bls.n	800dadc <memmove+0x10>
 800dad6:	4284      	cmp	r4, r0
 800dad8:	4623      	mov	r3, r4
 800dada:	d807      	bhi.n	800daec <memmove+0x20>
 800dadc:	1e43      	subs	r3, r0, #1
 800dade:	42a1      	cmp	r1, r4
 800dae0:	d008      	beq.n	800daf4 <memmove+0x28>
 800dae2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dae6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800daea:	e7f8      	b.n	800dade <memmove+0x12>
 800daec:	4402      	add	r2, r0
 800daee:	4601      	mov	r1, r0
 800daf0:	428a      	cmp	r2, r1
 800daf2:	d100      	bne.n	800daf6 <memmove+0x2a>
 800daf4:	bd10      	pop	{r4, pc}
 800daf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dafa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dafe:	e7f7      	b.n	800daf0 <memmove+0x24>

0800db00 <_free_r>:
 800db00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db02:	2900      	cmp	r1, #0
 800db04:	d044      	beq.n	800db90 <_free_r+0x90>
 800db06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db0a:	9001      	str	r0, [sp, #4]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	f1a1 0404 	sub.w	r4, r1, #4
 800db12:	bfb8      	it	lt
 800db14:	18e4      	addlt	r4, r4, r3
 800db16:	f000 fb4b 	bl	800e1b0 <__malloc_lock>
 800db1a:	4a1e      	ldr	r2, [pc, #120]	; (800db94 <_free_r+0x94>)
 800db1c:	9801      	ldr	r0, [sp, #4]
 800db1e:	6813      	ldr	r3, [r2, #0]
 800db20:	b933      	cbnz	r3, 800db30 <_free_r+0x30>
 800db22:	6063      	str	r3, [r4, #4]
 800db24:	6014      	str	r4, [r2, #0]
 800db26:	b003      	add	sp, #12
 800db28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db2c:	f000 bb46 	b.w	800e1bc <__malloc_unlock>
 800db30:	42a3      	cmp	r3, r4
 800db32:	d908      	bls.n	800db46 <_free_r+0x46>
 800db34:	6825      	ldr	r5, [r4, #0]
 800db36:	1961      	adds	r1, r4, r5
 800db38:	428b      	cmp	r3, r1
 800db3a:	bf01      	itttt	eq
 800db3c:	6819      	ldreq	r1, [r3, #0]
 800db3e:	685b      	ldreq	r3, [r3, #4]
 800db40:	1949      	addeq	r1, r1, r5
 800db42:	6021      	streq	r1, [r4, #0]
 800db44:	e7ed      	b.n	800db22 <_free_r+0x22>
 800db46:	461a      	mov	r2, r3
 800db48:	685b      	ldr	r3, [r3, #4]
 800db4a:	b10b      	cbz	r3, 800db50 <_free_r+0x50>
 800db4c:	42a3      	cmp	r3, r4
 800db4e:	d9fa      	bls.n	800db46 <_free_r+0x46>
 800db50:	6811      	ldr	r1, [r2, #0]
 800db52:	1855      	adds	r5, r2, r1
 800db54:	42a5      	cmp	r5, r4
 800db56:	d10b      	bne.n	800db70 <_free_r+0x70>
 800db58:	6824      	ldr	r4, [r4, #0]
 800db5a:	4421      	add	r1, r4
 800db5c:	1854      	adds	r4, r2, r1
 800db5e:	42a3      	cmp	r3, r4
 800db60:	6011      	str	r1, [r2, #0]
 800db62:	d1e0      	bne.n	800db26 <_free_r+0x26>
 800db64:	681c      	ldr	r4, [r3, #0]
 800db66:	685b      	ldr	r3, [r3, #4]
 800db68:	6053      	str	r3, [r2, #4]
 800db6a:	4421      	add	r1, r4
 800db6c:	6011      	str	r1, [r2, #0]
 800db6e:	e7da      	b.n	800db26 <_free_r+0x26>
 800db70:	d902      	bls.n	800db78 <_free_r+0x78>
 800db72:	230c      	movs	r3, #12
 800db74:	6003      	str	r3, [r0, #0]
 800db76:	e7d6      	b.n	800db26 <_free_r+0x26>
 800db78:	6825      	ldr	r5, [r4, #0]
 800db7a:	1961      	adds	r1, r4, r5
 800db7c:	428b      	cmp	r3, r1
 800db7e:	bf04      	itt	eq
 800db80:	6819      	ldreq	r1, [r3, #0]
 800db82:	685b      	ldreq	r3, [r3, #4]
 800db84:	6063      	str	r3, [r4, #4]
 800db86:	bf04      	itt	eq
 800db88:	1949      	addeq	r1, r1, r5
 800db8a:	6021      	streq	r1, [r4, #0]
 800db8c:	6054      	str	r4, [r2, #4]
 800db8e:	e7ca      	b.n	800db26 <_free_r+0x26>
 800db90:	b003      	add	sp, #12
 800db92:	bd30      	pop	{r4, r5, pc}
 800db94:	2000120c 	.word	0x2000120c

0800db98 <sbrk_aligned>:
 800db98:	b570      	push	{r4, r5, r6, lr}
 800db9a:	4e0e      	ldr	r6, [pc, #56]	; (800dbd4 <sbrk_aligned+0x3c>)
 800db9c:	460c      	mov	r4, r1
 800db9e:	6831      	ldr	r1, [r6, #0]
 800dba0:	4605      	mov	r5, r0
 800dba2:	b911      	cbnz	r1, 800dbaa <sbrk_aligned+0x12>
 800dba4:	f000 fa16 	bl	800dfd4 <_sbrk_r>
 800dba8:	6030      	str	r0, [r6, #0]
 800dbaa:	4621      	mov	r1, r4
 800dbac:	4628      	mov	r0, r5
 800dbae:	f000 fa11 	bl	800dfd4 <_sbrk_r>
 800dbb2:	1c43      	adds	r3, r0, #1
 800dbb4:	d00a      	beq.n	800dbcc <sbrk_aligned+0x34>
 800dbb6:	1cc4      	adds	r4, r0, #3
 800dbb8:	f024 0403 	bic.w	r4, r4, #3
 800dbbc:	42a0      	cmp	r0, r4
 800dbbe:	d007      	beq.n	800dbd0 <sbrk_aligned+0x38>
 800dbc0:	1a21      	subs	r1, r4, r0
 800dbc2:	4628      	mov	r0, r5
 800dbc4:	f000 fa06 	bl	800dfd4 <_sbrk_r>
 800dbc8:	3001      	adds	r0, #1
 800dbca:	d101      	bne.n	800dbd0 <sbrk_aligned+0x38>
 800dbcc:	f04f 34ff 	mov.w	r4, #4294967295
 800dbd0:	4620      	mov	r0, r4
 800dbd2:	bd70      	pop	{r4, r5, r6, pc}
 800dbd4:	20001210 	.word	0x20001210

0800dbd8 <_malloc_r>:
 800dbd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbdc:	1ccd      	adds	r5, r1, #3
 800dbde:	f025 0503 	bic.w	r5, r5, #3
 800dbe2:	3508      	adds	r5, #8
 800dbe4:	2d0c      	cmp	r5, #12
 800dbe6:	bf38      	it	cc
 800dbe8:	250c      	movcc	r5, #12
 800dbea:	2d00      	cmp	r5, #0
 800dbec:	4607      	mov	r7, r0
 800dbee:	db01      	blt.n	800dbf4 <_malloc_r+0x1c>
 800dbf0:	42a9      	cmp	r1, r5
 800dbf2:	d905      	bls.n	800dc00 <_malloc_r+0x28>
 800dbf4:	230c      	movs	r3, #12
 800dbf6:	603b      	str	r3, [r7, #0]
 800dbf8:	2600      	movs	r6, #0
 800dbfa:	4630      	mov	r0, r6
 800dbfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc00:	4e2e      	ldr	r6, [pc, #184]	; (800dcbc <_malloc_r+0xe4>)
 800dc02:	f000 fad5 	bl	800e1b0 <__malloc_lock>
 800dc06:	6833      	ldr	r3, [r6, #0]
 800dc08:	461c      	mov	r4, r3
 800dc0a:	bb34      	cbnz	r4, 800dc5a <_malloc_r+0x82>
 800dc0c:	4629      	mov	r1, r5
 800dc0e:	4638      	mov	r0, r7
 800dc10:	f7ff ffc2 	bl	800db98 <sbrk_aligned>
 800dc14:	1c43      	adds	r3, r0, #1
 800dc16:	4604      	mov	r4, r0
 800dc18:	d14d      	bne.n	800dcb6 <_malloc_r+0xde>
 800dc1a:	6834      	ldr	r4, [r6, #0]
 800dc1c:	4626      	mov	r6, r4
 800dc1e:	2e00      	cmp	r6, #0
 800dc20:	d140      	bne.n	800dca4 <_malloc_r+0xcc>
 800dc22:	6823      	ldr	r3, [r4, #0]
 800dc24:	4631      	mov	r1, r6
 800dc26:	4638      	mov	r0, r7
 800dc28:	eb04 0803 	add.w	r8, r4, r3
 800dc2c:	f000 f9d2 	bl	800dfd4 <_sbrk_r>
 800dc30:	4580      	cmp	r8, r0
 800dc32:	d13a      	bne.n	800dcaa <_malloc_r+0xd2>
 800dc34:	6821      	ldr	r1, [r4, #0]
 800dc36:	3503      	adds	r5, #3
 800dc38:	1a6d      	subs	r5, r5, r1
 800dc3a:	f025 0503 	bic.w	r5, r5, #3
 800dc3e:	3508      	adds	r5, #8
 800dc40:	2d0c      	cmp	r5, #12
 800dc42:	bf38      	it	cc
 800dc44:	250c      	movcc	r5, #12
 800dc46:	4629      	mov	r1, r5
 800dc48:	4638      	mov	r0, r7
 800dc4a:	f7ff ffa5 	bl	800db98 <sbrk_aligned>
 800dc4e:	3001      	adds	r0, #1
 800dc50:	d02b      	beq.n	800dcaa <_malloc_r+0xd2>
 800dc52:	6823      	ldr	r3, [r4, #0]
 800dc54:	442b      	add	r3, r5
 800dc56:	6023      	str	r3, [r4, #0]
 800dc58:	e00e      	b.n	800dc78 <_malloc_r+0xa0>
 800dc5a:	6822      	ldr	r2, [r4, #0]
 800dc5c:	1b52      	subs	r2, r2, r5
 800dc5e:	d41e      	bmi.n	800dc9e <_malloc_r+0xc6>
 800dc60:	2a0b      	cmp	r2, #11
 800dc62:	d916      	bls.n	800dc92 <_malloc_r+0xba>
 800dc64:	1961      	adds	r1, r4, r5
 800dc66:	42a3      	cmp	r3, r4
 800dc68:	6025      	str	r5, [r4, #0]
 800dc6a:	bf18      	it	ne
 800dc6c:	6059      	strne	r1, [r3, #4]
 800dc6e:	6863      	ldr	r3, [r4, #4]
 800dc70:	bf08      	it	eq
 800dc72:	6031      	streq	r1, [r6, #0]
 800dc74:	5162      	str	r2, [r4, r5]
 800dc76:	604b      	str	r3, [r1, #4]
 800dc78:	4638      	mov	r0, r7
 800dc7a:	f104 060b 	add.w	r6, r4, #11
 800dc7e:	f000 fa9d 	bl	800e1bc <__malloc_unlock>
 800dc82:	f026 0607 	bic.w	r6, r6, #7
 800dc86:	1d23      	adds	r3, r4, #4
 800dc88:	1af2      	subs	r2, r6, r3
 800dc8a:	d0b6      	beq.n	800dbfa <_malloc_r+0x22>
 800dc8c:	1b9b      	subs	r3, r3, r6
 800dc8e:	50a3      	str	r3, [r4, r2]
 800dc90:	e7b3      	b.n	800dbfa <_malloc_r+0x22>
 800dc92:	6862      	ldr	r2, [r4, #4]
 800dc94:	42a3      	cmp	r3, r4
 800dc96:	bf0c      	ite	eq
 800dc98:	6032      	streq	r2, [r6, #0]
 800dc9a:	605a      	strne	r2, [r3, #4]
 800dc9c:	e7ec      	b.n	800dc78 <_malloc_r+0xa0>
 800dc9e:	4623      	mov	r3, r4
 800dca0:	6864      	ldr	r4, [r4, #4]
 800dca2:	e7b2      	b.n	800dc0a <_malloc_r+0x32>
 800dca4:	4634      	mov	r4, r6
 800dca6:	6876      	ldr	r6, [r6, #4]
 800dca8:	e7b9      	b.n	800dc1e <_malloc_r+0x46>
 800dcaa:	230c      	movs	r3, #12
 800dcac:	603b      	str	r3, [r7, #0]
 800dcae:	4638      	mov	r0, r7
 800dcb0:	f000 fa84 	bl	800e1bc <__malloc_unlock>
 800dcb4:	e7a1      	b.n	800dbfa <_malloc_r+0x22>
 800dcb6:	6025      	str	r5, [r4, #0]
 800dcb8:	e7de      	b.n	800dc78 <_malloc_r+0xa0>
 800dcba:	bf00      	nop
 800dcbc:	2000120c 	.word	0x2000120c

0800dcc0 <_realloc_r>:
 800dcc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcc4:	4680      	mov	r8, r0
 800dcc6:	4614      	mov	r4, r2
 800dcc8:	460e      	mov	r6, r1
 800dcca:	b921      	cbnz	r1, 800dcd6 <_realloc_r+0x16>
 800dccc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcd0:	4611      	mov	r1, r2
 800dcd2:	f7ff bf81 	b.w	800dbd8 <_malloc_r>
 800dcd6:	b92a      	cbnz	r2, 800dce4 <_realloc_r+0x24>
 800dcd8:	f7ff ff12 	bl	800db00 <_free_r>
 800dcdc:	4625      	mov	r5, r4
 800dcde:	4628      	mov	r0, r5
 800dce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dce4:	f000 fa70 	bl	800e1c8 <_malloc_usable_size_r>
 800dce8:	4284      	cmp	r4, r0
 800dcea:	4607      	mov	r7, r0
 800dcec:	d802      	bhi.n	800dcf4 <_realloc_r+0x34>
 800dcee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dcf2:	d812      	bhi.n	800dd1a <_realloc_r+0x5a>
 800dcf4:	4621      	mov	r1, r4
 800dcf6:	4640      	mov	r0, r8
 800dcf8:	f7ff ff6e 	bl	800dbd8 <_malloc_r>
 800dcfc:	4605      	mov	r5, r0
 800dcfe:	2800      	cmp	r0, #0
 800dd00:	d0ed      	beq.n	800dcde <_realloc_r+0x1e>
 800dd02:	42bc      	cmp	r4, r7
 800dd04:	4622      	mov	r2, r4
 800dd06:	4631      	mov	r1, r6
 800dd08:	bf28      	it	cs
 800dd0a:	463a      	movcs	r2, r7
 800dd0c:	f7fe ffb6 	bl	800cc7c <memcpy>
 800dd10:	4631      	mov	r1, r6
 800dd12:	4640      	mov	r0, r8
 800dd14:	f7ff fef4 	bl	800db00 <_free_r>
 800dd18:	e7e1      	b.n	800dcde <_realloc_r+0x1e>
 800dd1a:	4635      	mov	r5, r6
 800dd1c:	e7df      	b.n	800dcde <_realloc_r+0x1e>

0800dd1e <__ssputs_r>:
 800dd1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd22:	688e      	ldr	r6, [r1, #8]
 800dd24:	429e      	cmp	r6, r3
 800dd26:	4682      	mov	sl, r0
 800dd28:	460c      	mov	r4, r1
 800dd2a:	4690      	mov	r8, r2
 800dd2c:	461f      	mov	r7, r3
 800dd2e:	d838      	bhi.n	800dda2 <__ssputs_r+0x84>
 800dd30:	898a      	ldrh	r2, [r1, #12]
 800dd32:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dd36:	d032      	beq.n	800dd9e <__ssputs_r+0x80>
 800dd38:	6825      	ldr	r5, [r4, #0]
 800dd3a:	6909      	ldr	r1, [r1, #16]
 800dd3c:	eba5 0901 	sub.w	r9, r5, r1
 800dd40:	6965      	ldr	r5, [r4, #20]
 800dd42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd4a:	3301      	adds	r3, #1
 800dd4c:	444b      	add	r3, r9
 800dd4e:	106d      	asrs	r5, r5, #1
 800dd50:	429d      	cmp	r5, r3
 800dd52:	bf38      	it	cc
 800dd54:	461d      	movcc	r5, r3
 800dd56:	0553      	lsls	r3, r2, #21
 800dd58:	d531      	bpl.n	800ddbe <__ssputs_r+0xa0>
 800dd5a:	4629      	mov	r1, r5
 800dd5c:	f7ff ff3c 	bl	800dbd8 <_malloc_r>
 800dd60:	4606      	mov	r6, r0
 800dd62:	b950      	cbnz	r0, 800dd7a <__ssputs_r+0x5c>
 800dd64:	230c      	movs	r3, #12
 800dd66:	f8ca 3000 	str.w	r3, [sl]
 800dd6a:	89a3      	ldrh	r3, [r4, #12]
 800dd6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd70:	81a3      	strh	r3, [r4, #12]
 800dd72:	f04f 30ff 	mov.w	r0, #4294967295
 800dd76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd7a:	6921      	ldr	r1, [r4, #16]
 800dd7c:	464a      	mov	r2, r9
 800dd7e:	f7fe ff7d 	bl	800cc7c <memcpy>
 800dd82:	89a3      	ldrh	r3, [r4, #12]
 800dd84:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dd88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd8c:	81a3      	strh	r3, [r4, #12]
 800dd8e:	6126      	str	r6, [r4, #16]
 800dd90:	6165      	str	r5, [r4, #20]
 800dd92:	444e      	add	r6, r9
 800dd94:	eba5 0509 	sub.w	r5, r5, r9
 800dd98:	6026      	str	r6, [r4, #0]
 800dd9a:	60a5      	str	r5, [r4, #8]
 800dd9c:	463e      	mov	r6, r7
 800dd9e:	42be      	cmp	r6, r7
 800dda0:	d900      	bls.n	800dda4 <__ssputs_r+0x86>
 800dda2:	463e      	mov	r6, r7
 800dda4:	6820      	ldr	r0, [r4, #0]
 800dda6:	4632      	mov	r2, r6
 800dda8:	4641      	mov	r1, r8
 800ddaa:	f7ff fe8f 	bl	800dacc <memmove>
 800ddae:	68a3      	ldr	r3, [r4, #8]
 800ddb0:	1b9b      	subs	r3, r3, r6
 800ddb2:	60a3      	str	r3, [r4, #8]
 800ddb4:	6823      	ldr	r3, [r4, #0]
 800ddb6:	4433      	add	r3, r6
 800ddb8:	6023      	str	r3, [r4, #0]
 800ddba:	2000      	movs	r0, #0
 800ddbc:	e7db      	b.n	800dd76 <__ssputs_r+0x58>
 800ddbe:	462a      	mov	r2, r5
 800ddc0:	f7ff ff7e 	bl	800dcc0 <_realloc_r>
 800ddc4:	4606      	mov	r6, r0
 800ddc6:	2800      	cmp	r0, #0
 800ddc8:	d1e1      	bne.n	800dd8e <__ssputs_r+0x70>
 800ddca:	6921      	ldr	r1, [r4, #16]
 800ddcc:	4650      	mov	r0, sl
 800ddce:	f7ff fe97 	bl	800db00 <_free_r>
 800ddd2:	e7c7      	b.n	800dd64 <__ssputs_r+0x46>

0800ddd4 <_svfiprintf_r>:
 800ddd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd8:	4698      	mov	r8, r3
 800ddda:	898b      	ldrh	r3, [r1, #12]
 800dddc:	061b      	lsls	r3, r3, #24
 800ddde:	b09d      	sub	sp, #116	; 0x74
 800dde0:	4607      	mov	r7, r0
 800dde2:	460d      	mov	r5, r1
 800dde4:	4614      	mov	r4, r2
 800dde6:	d50e      	bpl.n	800de06 <_svfiprintf_r+0x32>
 800dde8:	690b      	ldr	r3, [r1, #16]
 800ddea:	b963      	cbnz	r3, 800de06 <_svfiprintf_r+0x32>
 800ddec:	2140      	movs	r1, #64	; 0x40
 800ddee:	f7ff fef3 	bl	800dbd8 <_malloc_r>
 800ddf2:	6028      	str	r0, [r5, #0]
 800ddf4:	6128      	str	r0, [r5, #16]
 800ddf6:	b920      	cbnz	r0, 800de02 <_svfiprintf_r+0x2e>
 800ddf8:	230c      	movs	r3, #12
 800ddfa:	603b      	str	r3, [r7, #0]
 800ddfc:	f04f 30ff 	mov.w	r0, #4294967295
 800de00:	e0d1      	b.n	800dfa6 <_svfiprintf_r+0x1d2>
 800de02:	2340      	movs	r3, #64	; 0x40
 800de04:	616b      	str	r3, [r5, #20]
 800de06:	2300      	movs	r3, #0
 800de08:	9309      	str	r3, [sp, #36]	; 0x24
 800de0a:	2320      	movs	r3, #32
 800de0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de10:	f8cd 800c 	str.w	r8, [sp, #12]
 800de14:	2330      	movs	r3, #48	; 0x30
 800de16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dfc0 <_svfiprintf_r+0x1ec>
 800de1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de1e:	f04f 0901 	mov.w	r9, #1
 800de22:	4623      	mov	r3, r4
 800de24:	469a      	mov	sl, r3
 800de26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de2a:	b10a      	cbz	r2, 800de30 <_svfiprintf_r+0x5c>
 800de2c:	2a25      	cmp	r2, #37	; 0x25
 800de2e:	d1f9      	bne.n	800de24 <_svfiprintf_r+0x50>
 800de30:	ebba 0b04 	subs.w	fp, sl, r4
 800de34:	d00b      	beq.n	800de4e <_svfiprintf_r+0x7a>
 800de36:	465b      	mov	r3, fp
 800de38:	4622      	mov	r2, r4
 800de3a:	4629      	mov	r1, r5
 800de3c:	4638      	mov	r0, r7
 800de3e:	f7ff ff6e 	bl	800dd1e <__ssputs_r>
 800de42:	3001      	adds	r0, #1
 800de44:	f000 80aa 	beq.w	800df9c <_svfiprintf_r+0x1c8>
 800de48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de4a:	445a      	add	r2, fp
 800de4c:	9209      	str	r2, [sp, #36]	; 0x24
 800de4e:	f89a 3000 	ldrb.w	r3, [sl]
 800de52:	2b00      	cmp	r3, #0
 800de54:	f000 80a2 	beq.w	800df9c <_svfiprintf_r+0x1c8>
 800de58:	2300      	movs	r3, #0
 800de5a:	f04f 32ff 	mov.w	r2, #4294967295
 800de5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de62:	f10a 0a01 	add.w	sl, sl, #1
 800de66:	9304      	str	r3, [sp, #16]
 800de68:	9307      	str	r3, [sp, #28]
 800de6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de6e:	931a      	str	r3, [sp, #104]	; 0x68
 800de70:	4654      	mov	r4, sl
 800de72:	2205      	movs	r2, #5
 800de74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de78:	4851      	ldr	r0, [pc, #324]	; (800dfc0 <_svfiprintf_r+0x1ec>)
 800de7a:	f7f2 f9b1 	bl	80001e0 <memchr>
 800de7e:	9a04      	ldr	r2, [sp, #16]
 800de80:	b9d8      	cbnz	r0, 800deba <_svfiprintf_r+0xe6>
 800de82:	06d0      	lsls	r0, r2, #27
 800de84:	bf44      	itt	mi
 800de86:	2320      	movmi	r3, #32
 800de88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de8c:	0711      	lsls	r1, r2, #28
 800de8e:	bf44      	itt	mi
 800de90:	232b      	movmi	r3, #43	; 0x2b
 800de92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de96:	f89a 3000 	ldrb.w	r3, [sl]
 800de9a:	2b2a      	cmp	r3, #42	; 0x2a
 800de9c:	d015      	beq.n	800deca <_svfiprintf_r+0xf6>
 800de9e:	9a07      	ldr	r2, [sp, #28]
 800dea0:	4654      	mov	r4, sl
 800dea2:	2000      	movs	r0, #0
 800dea4:	f04f 0c0a 	mov.w	ip, #10
 800dea8:	4621      	mov	r1, r4
 800deaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800deae:	3b30      	subs	r3, #48	; 0x30
 800deb0:	2b09      	cmp	r3, #9
 800deb2:	d94e      	bls.n	800df52 <_svfiprintf_r+0x17e>
 800deb4:	b1b0      	cbz	r0, 800dee4 <_svfiprintf_r+0x110>
 800deb6:	9207      	str	r2, [sp, #28]
 800deb8:	e014      	b.n	800dee4 <_svfiprintf_r+0x110>
 800deba:	eba0 0308 	sub.w	r3, r0, r8
 800debe:	fa09 f303 	lsl.w	r3, r9, r3
 800dec2:	4313      	orrs	r3, r2
 800dec4:	9304      	str	r3, [sp, #16]
 800dec6:	46a2      	mov	sl, r4
 800dec8:	e7d2      	b.n	800de70 <_svfiprintf_r+0x9c>
 800deca:	9b03      	ldr	r3, [sp, #12]
 800decc:	1d19      	adds	r1, r3, #4
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	9103      	str	r1, [sp, #12]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	bfbb      	ittet	lt
 800ded6:	425b      	neglt	r3, r3
 800ded8:	f042 0202 	orrlt.w	r2, r2, #2
 800dedc:	9307      	strge	r3, [sp, #28]
 800dede:	9307      	strlt	r3, [sp, #28]
 800dee0:	bfb8      	it	lt
 800dee2:	9204      	strlt	r2, [sp, #16]
 800dee4:	7823      	ldrb	r3, [r4, #0]
 800dee6:	2b2e      	cmp	r3, #46	; 0x2e
 800dee8:	d10c      	bne.n	800df04 <_svfiprintf_r+0x130>
 800deea:	7863      	ldrb	r3, [r4, #1]
 800deec:	2b2a      	cmp	r3, #42	; 0x2a
 800deee:	d135      	bne.n	800df5c <_svfiprintf_r+0x188>
 800def0:	9b03      	ldr	r3, [sp, #12]
 800def2:	1d1a      	adds	r2, r3, #4
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	9203      	str	r2, [sp, #12]
 800def8:	2b00      	cmp	r3, #0
 800defa:	bfb8      	it	lt
 800defc:	f04f 33ff 	movlt.w	r3, #4294967295
 800df00:	3402      	adds	r4, #2
 800df02:	9305      	str	r3, [sp, #20]
 800df04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dfd0 <_svfiprintf_r+0x1fc>
 800df08:	7821      	ldrb	r1, [r4, #0]
 800df0a:	2203      	movs	r2, #3
 800df0c:	4650      	mov	r0, sl
 800df0e:	f7f2 f967 	bl	80001e0 <memchr>
 800df12:	b140      	cbz	r0, 800df26 <_svfiprintf_r+0x152>
 800df14:	2340      	movs	r3, #64	; 0x40
 800df16:	eba0 000a 	sub.w	r0, r0, sl
 800df1a:	fa03 f000 	lsl.w	r0, r3, r0
 800df1e:	9b04      	ldr	r3, [sp, #16]
 800df20:	4303      	orrs	r3, r0
 800df22:	3401      	adds	r4, #1
 800df24:	9304      	str	r3, [sp, #16]
 800df26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df2a:	4826      	ldr	r0, [pc, #152]	; (800dfc4 <_svfiprintf_r+0x1f0>)
 800df2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df30:	2206      	movs	r2, #6
 800df32:	f7f2 f955 	bl	80001e0 <memchr>
 800df36:	2800      	cmp	r0, #0
 800df38:	d038      	beq.n	800dfac <_svfiprintf_r+0x1d8>
 800df3a:	4b23      	ldr	r3, [pc, #140]	; (800dfc8 <_svfiprintf_r+0x1f4>)
 800df3c:	bb1b      	cbnz	r3, 800df86 <_svfiprintf_r+0x1b2>
 800df3e:	9b03      	ldr	r3, [sp, #12]
 800df40:	3307      	adds	r3, #7
 800df42:	f023 0307 	bic.w	r3, r3, #7
 800df46:	3308      	adds	r3, #8
 800df48:	9303      	str	r3, [sp, #12]
 800df4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df4c:	4433      	add	r3, r6
 800df4e:	9309      	str	r3, [sp, #36]	; 0x24
 800df50:	e767      	b.n	800de22 <_svfiprintf_r+0x4e>
 800df52:	fb0c 3202 	mla	r2, ip, r2, r3
 800df56:	460c      	mov	r4, r1
 800df58:	2001      	movs	r0, #1
 800df5a:	e7a5      	b.n	800dea8 <_svfiprintf_r+0xd4>
 800df5c:	2300      	movs	r3, #0
 800df5e:	3401      	adds	r4, #1
 800df60:	9305      	str	r3, [sp, #20]
 800df62:	4619      	mov	r1, r3
 800df64:	f04f 0c0a 	mov.w	ip, #10
 800df68:	4620      	mov	r0, r4
 800df6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df6e:	3a30      	subs	r2, #48	; 0x30
 800df70:	2a09      	cmp	r2, #9
 800df72:	d903      	bls.n	800df7c <_svfiprintf_r+0x1a8>
 800df74:	2b00      	cmp	r3, #0
 800df76:	d0c5      	beq.n	800df04 <_svfiprintf_r+0x130>
 800df78:	9105      	str	r1, [sp, #20]
 800df7a:	e7c3      	b.n	800df04 <_svfiprintf_r+0x130>
 800df7c:	fb0c 2101 	mla	r1, ip, r1, r2
 800df80:	4604      	mov	r4, r0
 800df82:	2301      	movs	r3, #1
 800df84:	e7f0      	b.n	800df68 <_svfiprintf_r+0x194>
 800df86:	ab03      	add	r3, sp, #12
 800df88:	9300      	str	r3, [sp, #0]
 800df8a:	462a      	mov	r2, r5
 800df8c:	4b0f      	ldr	r3, [pc, #60]	; (800dfcc <_svfiprintf_r+0x1f8>)
 800df8e:	a904      	add	r1, sp, #16
 800df90:	4638      	mov	r0, r7
 800df92:	f3af 8000 	nop.w
 800df96:	1c42      	adds	r2, r0, #1
 800df98:	4606      	mov	r6, r0
 800df9a:	d1d6      	bne.n	800df4a <_svfiprintf_r+0x176>
 800df9c:	89ab      	ldrh	r3, [r5, #12]
 800df9e:	065b      	lsls	r3, r3, #25
 800dfa0:	f53f af2c 	bmi.w	800ddfc <_svfiprintf_r+0x28>
 800dfa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dfa6:	b01d      	add	sp, #116	; 0x74
 800dfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfac:	ab03      	add	r3, sp, #12
 800dfae:	9300      	str	r3, [sp, #0]
 800dfb0:	462a      	mov	r2, r5
 800dfb2:	4b06      	ldr	r3, [pc, #24]	; (800dfcc <_svfiprintf_r+0x1f8>)
 800dfb4:	a904      	add	r1, sp, #16
 800dfb6:	4638      	mov	r0, r7
 800dfb8:	f7ff f83e 	bl	800d038 <_printf_i>
 800dfbc:	e7eb      	b.n	800df96 <_svfiprintf_r+0x1c2>
 800dfbe:	bf00      	nop
 800dfc0:	0800f508 	.word	0x0800f508
 800dfc4:	0800f512 	.word	0x0800f512
 800dfc8:	00000000 	.word	0x00000000
 800dfcc:	0800dd1f 	.word	0x0800dd1f
 800dfd0:	0800f50e 	.word	0x0800f50e

0800dfd4 <_sbrk_r>:
 800dfd4:	b538      	push	{r3, r4, r5, lr}
 800dfd6:	4d06      	ldr	r5, [pc, #24]	; (800dff0 <_sbrk_r+0x1c>)
 800dfd8:	2300      	movs	r3, #0
 800dfda:	4604      	mov	r4, r0
 800dfdc:	4608      	mov	r0, r1
 800dfde:	602b      	str	r3, [r5, #0]
 800dfe0:	f7f7 fa68 	bl	80054b4 <_sbrk>
 800dfe4:	1c43      	adds	r3, r0, #1
 800dfe6:	d102      	bne.n	800dfee <_sbrk_r+0x1a>
 800dfe8:	682b      	ldr	r3, [r5, #0]
 800dfea:	b103      	cbz	r3, 800dfee <_sbrk_r+0x1a>
 800dfec:	6023      	str	r3, [r4, #0]
 800dfee:	bd38      	pop	{r3, r4, r5, pc}
 800dff0:	20001214 	.word	0x20001214

0800dff4 <_raise_r>:
 800dff4:	291f      	cmp	r1, #31
 800dff6:	b538      	push	{r3, r4, r5, lr}
 800dff8:	4604      	mov	r4, r0
 800dffa:	460d      	mov	r5, r1
 800dffc:	d904      	bls.n	800e008 <_raise_r+0x14>
 800dffe:	2316      	movs	r3, #22
 800e000:	6003      	str	r3, [r0, #0]
 800e002:	f04f 30ff 	mov.w	r0, #4294967295
 800e006:	bd38      	pop	{r3, r4, r5, pc}
 800e008:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e00a:	b112      	cbz	r2, 800e012 <_raise_r+0x1e>
 800e00c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e010:	b94b      	cbnz	r3, 800e026 <_raise_r+0x32>
 800e012:	4620      	mov	r0, r4
 800e014:	f000 f830 	bl	800e078 <_getpid_r>
 800e018:	462a      	mov	r2, r5
 800e01a:	4601      	mov	r1, r0
 800e01c:	4620      	mov	r0, r4
 800e01e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e022:	f000 b817 	b.w	800e054 <_kill_r>
 800e026:	2b01      	cmp	r3, #1
 800e028:	d00a      	beq.n	800e040 <_raise_r+0x4c>
 800e02a:	1c59      	adds	r1, r3, #1
 800e02c:	d103      	bne.n	800e036 <_raise_r+0x42>
 800e02e:	2316      	movs	r3, #22
 800e030:	6003      	str	r3, [r0, #0]
 800e032:	2001      	movs	r0, #1
 800e034:	e7e7      	b.n	800e006 <_raise_r+0x12>
 800e036:	2400      	movs	r4, #0
 800e038:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e03c:	4628      	mov	r0, r5
 800e03e:	4798      	blx	r3
 800e040:	2000      	movs	r0, #0
 800e042:	e7e0      	b.n	800e006 <_raise_r+0x12>

0800e044 <raise>:
 800e044:	4b02      	ldr	r3, [pc, #8]	; (800e050 <raise+0xc>)
 800e046:	4601      	mov	r1, r0
 800e048:	6818      	ldr	r0, [r3, #0]
 800e04a:	f7ff bfd3 	b.w	800dff4 <_raise_r>
 800e04e:	bf00      	nop
 800e050:	20000018 	.word	0x20000018

0800e054 <_kill_r>:
 800e054:	b538      	push	{r3, r4, r5, lr}
 800e056:	4d07      	ldr	r5, [pc, #28]	; (800e074 <_kill_r+0x20>)
 800e058:	2300      	movs	r3, #0
 800e05a:	4604      	mov	r4, r0
 800e05c:	4608      	mov	r0, r1
 800e05e:	4611      	mov	r1, r2
 800e060:	602b      	str	r3, [r5, #0]
 800e062:	f7f7 f9bb 	bl	80053dc <_kill>
 800e066:	1c43      	adds	r3, r0, #1
 800e068:	d102      	bne.n	800e070 <_kill_r+0x1c>
 800e06a:	682b      	ldr	r3, [r5, #0]
 800e06c:	b103      	cbz	r3, 800e070 <_kill_r+0x1c>
 800e06e:	6023      	str	r3, [r4, #0]
 800e070:	bd38      	pop	{r3, r4, r5, pc}
 800e072:	bf00      	nop
 800e074:	20001214 	.word	0x20001214

0800e078 <_getpid_r>:
 800e078:	f7f7 b9a8 	b.w	80053cc <_getpid>

0800e07c <__sread>:
 800e07c:	b510      	push	{r4, lr}
 800e07e:	460c      	mov	r4, r1
 800e080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e084:	f000 f8a8 	bl	800e1d8 <_read_r>
 800e088:	2800      	cmp	r0, #0
 800e08a:	bfab      	itete	ge
 800e08c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e08e:	89a3      	ldrhlt	r3, [r4, #12]
 800e090:	181b      	addge	r3, r3, r0
 800e092:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e096:	bfac      	ite	ge
 800e098:	6563      	strge	r3, [r4, #84]	; 0x54
 800e09a:	81a3      	strhlt	r3, [r4, #12]
 800e09c:	bd10      	pop	{r4, pc}

0800e09e <__swrite>:
 800e09e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0a2:	461f      	mov	r7, r3
 800e0a4:	898b      	ldrh	r3, [r1, #12]
 800e0a6:	05db      	lsls	r3, r3, #23
 800e0a8:	4605      	mov	r5, r0
 800e0aa:	460c      	mov	r4, r1
 800e0ac:	4616      	mov	r6, r2
 800e0ae:	d505      	bpl.n	800e0bc <__swrite+0x1e>
 800e0b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0b4:	2302      	movs	r3, #2
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	f000 f868 	bl	800e18c <_lseek_r>
 800e0bc:	89a3      	ldrh	r3, [r4, #12]
 800e0be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e0c6:	81a3      	strh	r3, [r4, #12]
 800e0c8:	4632      	mov	r2, r6
 800e0ca:	463b      	mov	r3, r7
 800e0cc:	4628      	mov	r0, r5
 800e0ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0d2:	f000 b817 	b.w	800e104 <_write_r>

0800e0d6 <__sseek>:
 800e0d6:	b510      	push	{r4, lr}
 800e0d8:	460c      	mov	r4, r1
 800e0da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0de:	f000 f855 	bl	800e18c <_lseek_r>
 800e0e2:	1c43      	adds	r3, r0, #1
 800e0e4:	89a3      	ldrh	r3, [r4, #12]
 800e0e6:	bf15      	itete	ne
 800e0e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800e0ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e0ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e0f2:	81a3      	strheq	r3, [r4, #12]
 800e0f4:	bf18      	it	ne
 800e0f6:	81a3      	strhne	r3, [r4, #12]
 800e0f8:	bd10      	pop	{r4, pc}

0800e0fa <__sclose>:
 800e0fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0fe:	f000 b813 	b.w	800e128 <_close_r>
	...

0800e104 <_write_r>:
 800e104:	b538      	push	{r3, r4, r5, lr}
 800e106:	4d07      	ldr	r5, [pc, #28]	; (800e124 <_write_r+0x20>)
 800e108:	4604      	mov	r4, r0
 800e10a:	4608      	mov	r0, r1
 800e10c:	4611      	mov	r1, r2
 800e10e:	2200      	movs	r2, #0
 800e110:	602a      	str	r2, [r5, #0]
 800e112:	461a      	mov	r2, r3
 800e114:	f7f6 fe0e 	bl	8004d34 <_write>
 800e118:	1c43      	adds	r3, r0, #1
 800e11a:	d102      	bne.n	800e122 <_write_r+0x1e>
 800e11c:	682b      	ldr	r3, [r5, #0]
 800e11e:	b103      	cbz	r3, 800e122 <_write_r+0x1e>
 800e120:	6023      	str	r3, [r4, #0]
 800e122:	bd38      	pop	{r3, r4, r5, pc}
 800e124:	20001214 	.word	0x20001214

0800e128 <_close_r>:
 800e128:	b538      	push	{r3, r4, r5, lr}
 800e12a:	4d06      	ldr	r5, [pc, #24]	; (800e144 <_close_r+0x1c>)
 800e12c:	2300      	movs	r3, #0
 800e12e:	4604      	mov	r4, r0
 800e130:	4608      	mov	r0, r1
 800e132:	602b      	str	r3, [r5, #0]
 800e134:	f7f7 f989 	bl	800544a <_close>
 800e138:	1c43      	adds	r3, r0, #1
 800e13a:	d102      	bne.n	800e142 <_close_r+0x1a>
 800e13c:	682b      	ldr	r3, [r5, #0]
 800e13e:	b103      	cbz	r3, 800e142 <_close_r+0x1a>
 800e140:	6023      	str	r3, [r4, #0]
 800e142:	bd38      	pop	{r3, r4, r5, pc}
 800e144:	20001214 	.word	0x20001214

0800e148 <_fstat_r>:
 800e148:	b538      	push	{r3, r4, r5, lr}
 800e14a:	4d07      	ldr	r5, [pc, #28]	; (800e168 <_fstat_r+0x20>)
 800e14c:	2300      	movs	r3, #0
 800e14e:	4604      	mov	r4, r0
 800e150:	4608      	mov	r0, r1
 800e152:	4611      	mov	r1, r2
 800e154:	602b      	str	r3, [r5, #0]
 800e156:	f7f7 f984 	bl	8005462 <_fstat>
 800e15a:	1c43      	adds	r3, r0, #1
 800e15c:	d102      	bne.n	800e164 <_fstat_r+0x1c>
 800e15e:	682b      	ldr	r3, [r5, #0]
 800e160:	b103      	cbz	r3, 800e164 <_fstat_r+0x1c>
 800e162:	6023      	str	r3, [r4, #0]
 800e164:	bd38      	pop	{r3, r4, r5, pc}
 800e166:	bf00      	nop
 800e168:	20001214 	.word	0x20001214

0800e16c <_isatty_r>:
 800e16c:	b538      	push	{r3, r4, r5, lr}
 800e16e:	4d06      	ldr	r5, [pc, #24]	; (800e188 <_isatty_r+0x1c>)
 800e170:	2300      	movs	r3, #0
 800e172:	4604      	mov	r4, r0
 800e174:	4608      	mov	r0, r1
 800e176:	602b      	str	r3, [r5, #0]
 800e178:	f7f7 f983 	bl	8005482 <_isatty>
 800e17c:	1c43      	adds	r3, r0, #1
 800e17e:	d102      	bne.n	800e186 <_isatty_r+0x1a>
 800e180:	682b      	ldr	r3, [r5, #0]
 800e182:	b103      	cbz	r3, 800e186 <_isatty_r+0x1a>
 800e184:	6023      	str	r3, [r4, #0]
 800e186:	bd38      	pop	{r3, r4, r5, pc}
 800e188:	20001214 	.word	0x20001214

0800e18c <_lseek_r>:
 800e18c:	b538      	push	{r3, r4, r5, lr}
 800e18e:	4d07      	ldr	r5, [pc, #28]	; (800e1ac <_lseek_r+0x20>)
 800e190:	4604      	mov	r4, r0
 800e192:	4608      	mov	r0, r1
 800e194:	4611      	mov	r1, r2
 800e196:	2200      	movs	r2, #0
 800e198:	602a      	str	r2, [r5, #0]
 800e19a:	461a      	mov	r2, r3
 800e19c:	f7f7 f97c 	bl	8005498 <_lseek>
 800e1a0:	1c43      	adds	r3, r0, #1
 800e1a2:	d102      	bne.n	800e1aa <_lseek_r+0x1e>
 800e1a4:	682b      	ldr	r3, [r5, #0]
 800e1a6:	b103      	cbz	r3, 800e1aa <_lseek_r+0x1e>
 800e1a8:	6023      	str	r3, [r4, #0]
 800e1aa:	bd38      	pop	{r3, r4, r5, pc}
 800e1ac:	20001214 	.word	0x20001214

0800e1b0 <__malloc_lock>:
 800e1b0:	4801      	ldr	r0, [pc, #4]	; (800e1b8 <__malloc_lock+0x8>)
 800e1b2:	f7ff bc1b 	b.w	800d9ec <__retarget_lock_acquire_recursive>
 800e1b6:	bf00      	nop
 800e1b8:	20001208 	.word	0x20001208

0800e1bc <__malloc_unlock>:
 800e1bc:	4801      	ldr	r0, [pc, #4]	; (800e1c4 <__malloc_unlock+0x8>)
 800e1be:	f7ff bc16 	b.w	800d9ee <__retarget_lock_release_recursive>
 800e1c2:	bf00      	nop
 800e1c4:	20001208 	.word	0x20001208

0800e1c8 <_malloc_usable_size_r>:
 800e1c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1cc:	1f18      	subs	r0, r3, #4
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	bfbc      	itt	lt
 800e1d2:	580b      	ldrlt	r3, [r1, r0]
 800e1d4:	18c0      	addlt	r0, r0, r3
 800e1d6:	4770      	bx	lr

0800e1d8 <_read_r>:
 800e1d8:	b538      	push	{r3, r4, r5, lr}
 800e1da:	4d07      	ldr	r5, [pc, #28]	; (800e1f8 <_read_r+0x20>)
 800e1dc:	4604      	mov	r4, r0
 800e1de:	4608      	mov	r0, r1
 800e1e0:	4611      	mov	r1, r2
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	602a      	str	r2, [r5, #0]
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	f7f7 f912 	bl	8005410 <_read>
 800e1ec:	1c43      	adds	r3, r0, #1
 800e1ee:	d102      	bne.n	800e1f6 <_read_r+0x1e>
 800e1f0:	682b      	ldr	r3, [r5, #0]
 800e1f2:	b103      	cbz	r3, 800e1f6 <_read_r+0x1e>
 800e1f4:	6023      	str	r3, [r4, #0]
 800e1f6:	bd38      	pop	{r3, r4, r5, pc}
 800e1f8:	20001214 	.word	0x20001214

0800e1fc <_init>:
 800e1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1fe:	bf00      	nop
 800e200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e202:	bc08      	pop	{r3}
 800e204:	469e      	mov	lr, r3
 800e206:	4770      	bx	lr

0800e208 <_fini>:
 800e208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e20a:	bf00      	nop
 800e20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e20e:	bc08      	pop	{r3}
 800e210:	469e      	mov	lr, r3
 800e212:	4770      	bx	lr
